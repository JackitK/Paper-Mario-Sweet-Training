%Make some numbers for later


#new:Data $DefenseNumbers
{
	$HudElementScript_Number0 $HudElementScript_Number1 $HudElementScript_Number2 $HudElementScript_Number3 $HudElementScript_Number4 $HudElementScript_Number5 $HudElementScript_Number6 $HudElementScript_Number7
	$HudElementScript_Number8 $HudElementScript_Number9 00000000 00000000
}

#new:Data $NumberPalette
{
	7BDE210D 210F294F 00010001 00010001 00010001 00010001 0001A53F A53BA539
}

/%
	one of them
	00000008 
	00000005 00000000 
	00000004
		00000002 0000003C 8028A960 80441BF0
	00000003 
	00000000
%/

#new:Data $HudElementScript_Number0
{
	00000008 
	00000005 00000000 
	00000004
		00000002 0000003C $RasterData_0 $NumberPalette
	00000003 
	00000000
}

#new:Data $HudElementScript_Number1
{
	00000008 
	00000005 00000000 
	00000004
		00000002 0000003C $RasterData_1 $NumberPalette
	00000003 
	00000000
}

#new:Data $HudElementScript_Number2
{
	00000008 
	00000005 00000000 
	00000004
		00000002 0000003C $RasterData_2 $NumberPalette
	00000003 
	00000000
}

#new:Data $HudElementScript_Number3
{
	00000008 
	00000005 00000000 
	00000004
		00000002 0000003C $RasterData_3 $NumberPalette
	00000003 
	00000000
}

#new:Data $HudElementScript_Number4
{
	00000008 
	00000005 00000000 
	00000004
		00000002 0000003C $RasterData_4 $NumberPalette
	00000003 
	00000000
}

#new:Data $HudElementScript_Number5
{
	00000008 
	00000005 00000000 
	00000004
		00000002 0000003C $RasterData_5 $NumberPalette
	00000003 
	00000000
}

#new:Data $HudElementScript_Number6
{
	00000008 
	00000005 00000000 
	00000004
		00000002 0000003C $RasterData_6 $NumberPalette
	00000003 
	00000000
}

#new:Data $HudElementScript_Number7
{
	00000008 
	00000005 00000000 
	00000004
		00000002 0000003C $RasterData_7 $NumberPalette
	00000003 
	00000000
}

#new:Data $HudElementScript_Number8
{
	00000008 
	00000005 00000000 
	00000004
		00000002 0000003C $RasterData_8 $NumberPalette
	00000003 
	00000000
}

#new:Data $HudElementScript_Number9
{
	00000008 
	00000005 00000000 
	00000004
		00000002 0000003C $RasterData_9 $NumberPalette
	00000003 
	00000000
}

#new:Data $RasterData_0
{
	0FFF0000 FF3FF000 EE2EE200 EE2EE200 DD2DD200 0DDD1100 00111000 00000000
}

#new:Data $RasterData_1
{
	00FF0000 0FFF3000 02EE2000 00EE2000 00DD2000 00DD1000 00011000 00000000
}

#new:Data $RasterData_2
{
	0FFF3000 FF3FF300 222EE200 00EE2200 0DD22000 DDDDD100 01111100 00000000
}

#new:Data $RasterData_3
{
	0FFF3000 FF3FF300 22EE2200 002EE200 DD2DD200 1DDD1100 01111000 00000000
}

#new:Data $RasterData_4
{
	000FF300 00FFF300 0EEEE200 EE2EE200 DDDDD200 011DD100 00011100 00000000
}

#new:Data $RasterData_5
{
	FFFF3000 FF333000 EEEE2000 022EE200 000DD200 DDDD1100 01111000 00000000
}

#new:Data $RasterData_6
{
	00FF3000 0FF33000 EEEE2000 EE2EE200 DD2DD200 0DDD1100 00111000 00000000
}

#new:Data $RasterData_7
{
	FFFFF000 033FF300 00EE2200 00EE2000 0DD22000 0DD10000 00110000 00000000
}

#new:Data $RasterData_8
{
	0FFF3000 FF3FF300 0EEE2200 EE2EE200 DD2DD200 0DDD1100 00111000 00000000
}

#new:Data $RasterData_9
{
	0FFF0000 FF3FF000 EE2EE200 0EEEE200 00DD2200 0DD11000 00110000 00000000
}




%Functions
#export:Function $DefenseDisplay
{
	PUSH	RA, S0, S1, S2, S3, S4, S8, A0, A1, A2, T0, T1, T2	%just to be safe?
	%it touches the stack stuff :(
	ADDI	SP, SP -100
	%Do shenanigans to preserve some values for later
	LW		S4, 160 (SP) %148 + 1C
	SW		S4, 1C (SP)
	LW		S4, 164 (SP) %148 + 1C
	SW		S4, 1C (SP)
	LW		S4, 168 (SP) %148 + 20
	SW		S4, 20 (SP)
	LW		S4, 16C (SP) %148 + 24
	SW		S4, 24 (SP)
	LW		S4, 170 (SP) %148 + 28
	SW		S4, 28 (SP)
	LW		S4, 174 (SP) %148 + 2C
	SW		S4, 2C (SP)
	%
	JAL     ~Func:is_ability_active %800E9D48
	ORI		A0, R0, 2A
	BEQ		V0, R0, .end
	NOP
	%
	JAL		$GetDefenseOfActor
	NOP
	COPY	S4, V0		%defense value
	%Now draw some numbers somehow
	%Ctrl C Ctrl V the hp code and do stuff to it
  208:  LI        V0, 66666667						%start
  210:  MULT      S4, V0
  214:  SRA       V0, S4, 1F
  218:  MFHI      T0
  21C:  SRA       V1, T0, 2
  220:  SUBU      S1, V1, V0
  224:  SLL       S2, S1, 2
  228:  ADDU      V0, S2, S1
  22C:  SLL       V0, V0, 1
  230:  BLEZ      S1, .o2B8			%Skip 10s digit printing
  234:  SUBU      S4, S4, V0			%set up S4 as a multiple of 10
  238:  LAW       S0, 8029EFBC
  240:  LI        A1, A
  244:  JAL       ~Func:set_hud_element_render_depth
  248:  COPY      A0, S0
  24C:  LA        T0, $DefenseNumbers							%Set of hp bar digits
  254:  ADDU      V0, S2, T0
  258:  LW        A1, 0 (V0)
  25C:  JAL       ~Func:set_hud_element_script
  260:  COPY      A0, S0
  264:  CLEAR     A0
  268:  COPY      A1, A0
  26C:  LHU       V0, 2 (S6)
  270:  COPY      A2, A0
  274:  SW        V0, 10 (SP)
  278:  LHU       V0, 2 (S5)
  27C:  COPY      A3, A0
		LI		  S8, 		8
  280:  SW        S8, 18 (SP)
  284:  SW        S8, 1C (SP)
  288:  ADDIU     V0, V0, 2
  28C:  ANDI      V0, V0, FFFF
  290:  JAL       80267A3C
  294:  SW        V0, 14 (SP)
  298:  COPY      A0, S0
  29C:  LW        A1, 20 (SP)
  2A0:  LW        A2, 24 (SP)
  2A4:  ADDIU     A1, A1, 4									%X offset
  2A8:  JAL       ~Func:set_hud_element_render_pos
  2AC:  ADDIU     A2, A2, FFF4
  2B0:  JAL       ~Func:draw_hud_element_1
  2B4:  COPY      A0, S0
        .o2B8							%Past 10s digit printing
		%the ones digit
  2B8:  LAW       S0, 8029EFBC
  2C0:  LI        A1, A					
  2C4:  JAL       ~Func:set_hud_element_render_depth	%801449DC
  2C8:  COPY      A0, S0
  2CC:  SLL       V0, S4, 2
  2D0:  LA        T0, $DefenseNumbers		%numbers
  2D8:  ADDU      V0, V0, T0
  2DC:  LW        A1, 0 (V0)
  2E0:  JAL       ~Func:set_hud_element_script	%801447FC
  2E4:  COPY      A0, S0
  2E8:  CLEAR     A0
  2EC:  COPY      A1, A0
  2F0:  LHU       V0, 2 (S6)
  2F4:  COPY      A2, A0
  2F8:  ADDIU     V0, V0, 6
  2FC:  ANDI      V0, V0, FFFF
  300:  SW        V0, 10 (SP)
  304:  LHU       V0, 2 (S5)
  308:  COPY      A3, A0
  30C:  SW        S8, 18 (SP)
  310:  SW        S8, 1C (SP)
  314:  ADDIU     V0, V0, 2
  318:  ANDI      V0, V0, FFFF
  31C:  JAL       80267A3C		%$Function_80267A3C do things?
  320:  SW        V0, 14 (SP)
  324:  COPY      A0, S0
  328:  LW        A1, 20 (SP)
  32C:  LW        A2, 24 (SP)
  330:  ADDIU     A1, A1, A							%X offset
  334:  JAL       ~Func:set_hud_element_render_pos
  338:  ADDIU     A2, A2, FFF4
  33C:  JAL       ~Func:draw_hud_element_1
  340:  COPY      A0, S0  
	%
	.end
	ADDI	SP, SP 	100
	POP		RA, S0, S1, S2, S3, S4, S8, A0, A1, A2, T0, T1, T2
	JR		RA
	NOP
}


%does not follow calling convention, uses S3 as input actor pointer!
#export:Function $GetDefenseOfActor
{
	PUSH	RA, S0, S1, S2, S3, S4, A0, A1, A2, T0, T1, T2	%just to be safe?
	%S3 = actor pointer
	%S2 = get pointer
	LW		S2, 1F4 (S3)		%Part table
	%Find flag 00800000
	.partloopstart
	%Reading the part table is weird	
	%C + part = next part (00000000 is null)
	BEQ		S2, R0, .special
	NOP
	LW		S1, 0 (S2)
	LI		S0, 00800000
	AND		S1, S1, S0
	%flag?
	BNE		S1, R0, .skiploop
	NOP
	LW		S2, C (S2)
	BEQ		R0, R0, .partloopstart
	NOP
	.skiploop	
	%~Func:get_defense 	int defenseValue : Actor* actor "unused", $DefenseTable table, int elementflags
	%elementflags 0
	COPY	A0, S3
	LW		A1, 78 (S2)
	COPY	A2, R0
	JAL		802662BC	%~Func:get_defense
	NOP
	BEQ		R0, R0, .nospecial
	NOP
	.special
	%code for targetless enemies
	DADDU	V0, R0, R0
	.nospecial
	%Now add other defense stuff
	%Defdown
	LB		S2, 226 (S3)
	SLTI	S2, S2, 1
	BNE		S2, R0, .nodefdown
	NOP
	LB		S2, 225 (S3)	
	SUB		V0, V0, S2
	SLTI	S2, V0, 0
	BEQ		S2, R0, .nodefdown
	NOP
	COPY	V0, R0
	.nodefdown
	%NOTE: due to how I programmed it defdown and the 0 clamp is calculated before adding defense boost
	LB		S2, 222 (S3)
	ADD		V0, V0, S2
	%cap at 99
	SLTI	S2, V0, 64
	BNE		S2, R0, .end
	NOP
	ORI		V0, R0, 63
	.end
	POP		RA, S0, S1, S2, S3, S4, A0, A1, A2, T0, T1, T2
	JR		RA
	NOP	
}

%this one just takes the first part in the table
#export:Function $GetDefenseOfActor2
{
	PUSH	RA, S0, S1, S2, S3, S4, A0, A1, A2, T0, T1, T2	%just to be safe?
	%S3 = actor pointer
	%S2 = get pointer
	LW		S2, 1F4 (S3)		%Part table
	%Find flag 00800000
	.partloopstart
	%Reading the part table is weird	
	%C + part = next part (00000000 is null)
	BEQ		S2, R0, .special
	NOP
	LW		S1, 0 (S2)
	LI		S0, 00800000
	AND		S1, S1, S0
	%flag?
	BEQ		R0, R0, .skiploop
	NOP
	/%
	BNE		S1, R0, .skiploop
	NOP
	LW		S2, C (S2)
	BEQ		R0, R0, .partloopstart
	NOP
	%/
	.skiploop	
	%~Func:get_defense 	int defenseValue : Actor* actor "unused", $DefenseTable table, int elementflags
	%elementflags 0
	COPY	A0, S3
	LW		A1, 78 (S2)
	COPY	A2, R0
	JAL		802662BC	%~Func:get_defense
	NOP
	BEQ		R0, R0, .nospecial
	NOP
	.special
	%code for targetless enemies
	DADDU	V0, R0, R0
	.nospecial
	%Now add other defense stuff
	LB		S2, 222 (S3)
	ADD		V0, V0, S2
	%Defdown
	LB		S2, 226 (S3)
	SLTI	S2, S2, 1
	BNE		S2, R0, .nodefdown
	NOP
	LB		S2, 225 (S3)	
	SUB		V0, V0, S2
	SLTI	S2, V0, 0
	BEQ		S2, R0, .nodefdown
	NOP
	COPY	V0, R0
	.nodefdown
	%cap at 99
	SLTI	S2, V0, 64
	BNE		S2, R0, .end
	NOP
	ORI		V0, R0, 63
	.end
	POP		RA, S0, S1, S2, S3, S4, A0, A1, A2, T0, T1, T2
	JR		RA
	NOP	
}



%Various sections of code for displaying HUD numbers

/%
  208:  LI        V0, 66666667						%start
  210:  MULT      S4, V0
  214:  SRA       V0, S4, 1F
  218:  MFHI      T0
  21C:  SRA       V1, T0, 2
  220:  SUBU      S1, V1, V0
  224:  SLL       S2, S1, 2
  228:  ADDU      V0, S2, S1
  22C:  SLL       V0, V0, 1
  230:  BLEZ      S1, .o2B8			%Skip 10s digit printing
  234:  SUBU      S4, S4, V0			%set up S4 as a multiple of 10
  238:  LAW       S0, 8029EFBC
  240:  LI        A1, A
  244:  JAL       ~Func:set_hud_element_render_depth
  248:  COPY      A0, S0
  24C:  LA        T0, $???_802809FC							%Set of hp bar digits
  254:  ADDU      V0, S2, T0
  258:  LW        A1, 0 (V0)
  25C:  JAL       ~Func:set_hud_element_script
  260:  COPY      A0, S0
  264:  CLEAR     A0
  268:  COPY      A1, A0
  26C:  LHU       V0, 2 (S6)
  270:  COPY      A2, A0
  274:  SW        V0, 10 (SP)
  278:  LHU       V0, 2 (S5)
  27C:  COPY      A3, A0
  280:  SW        S8, 18 (SP)
  284:  SW        S8, 1C (SP)
  288:  ADDIU     V0, V0, 2
  28C:  ANDI      V0, V0, FFFF
  290:  JAL       $Function_80267A3C
  294:  SW        V0, 14 (SP)
  298:  COPY      A0, S0
  29C:  LW        A1, 20 (SP)
  2A0:  LW        A2, 24 (SP)
  2A4:  ADDIU     A1, A1, 4									%X offset
  2A8:  JAL       ~Func:set_hud_element_render_pos
  2AC:  ADDIU     A2, A2, 6
  2B0:  JAL       ~Func:draw_hud_element_1
  2B4:  COPY      A0, S0
        .o2B8							%Past 10s digit printing


		%the ones digit
  2B8:  LAW       S0, 8029EFBC
  2C0:  LI        A1, A
  2C4:  JAL       ~Func:set_hud_element_render_depth	%801449DC
  2C8:  COPY      A0, S0
  2CC:  SLL       V0, S4, 2
  2D0:  LA        T0, $???_802809FC		%numbers
  2D8:  ADDU      V0, V0, T0
  2DC:  LW        A1, 0 (V0)
  2E0:  JAL       ~Func:set_hud_element_script	%801447FC
  2E4:  COPY      A0, S0
  2E8:  CLEAR     A0
  2EC:  COPY      A1, A0
  2F0:  LHU       V0, 2 (S6)
  2F4:  COPY      A2, A0
  2F8:  ADDIU     V0, V0, 6
  2FC:  ANDI      V0, V0, FFFF
  300:  SW        V0, 10 (SP)
  304:  LHU       V0, 2 (S5)
  308:  COPY      A3, A0
  30C:  SW        S8, 18 (SP)
  310:  SW        S8, 1C (SP)
  314:  ADDIU     V0, V0, 2
  318:  ANDI      V0, V0, FFFF
  31C:  JAL       $Function_80267A3C		%do things?
  320:  SW        V0, 14 (SP)
  324:  COPY      A0, S0
  328:  LW        A1, 20 (SP)
  32C:  LW        A2, 24 (SP)
  330:  ADDIU     A1, A1, A							%X offset
  334:  JAL       ~Func:set_hud_element_render_pos
  338:  ADDIU     A2, A2, 6
  33C:  JAL       ~Func:draw_hud_element_1
  340:  COPY      A0, S0

%/
%piece of IncreaseMaxHealth code (but this is very old, I have code that is more clear)
/%
	%Don't print any unneeded digits
	% PUSH	A2
	ADDIU	T0, R0, 2710
	SUB		T1, S4, T0
	BLTZ	T1, .lt10000 % <10k
	NOP
	%%ADD		T0, R0, R0
	ADDIU	T2, R0, 1FD0 %our number is more than 10k, set up digit printing
	.printloop10k	%loop over the digits until you find the right one
	%increment digit
	ADDIU	T0, T0, 2710
	SUB		T1, S4, T0
	BLTZ	T1, .PrintDigit10000s %print time
	ADDI	T1, T1, 2710 %fix value
	BEQ		R0, R0, .printloop10k
	ADDIU 	T2, T2, 28
	.lt10000
	%this was checking for the digit 0, we don't need to check it since anything less than 10k would have an empty space there
	% SUBI	T2, T2, 1FA8
	% BEQ		T2, R0, .PrintDigit10000s
	% ADDI	T2, T2, 1FA8
	BEQ		R0, R0, .1000s
	NOP
	%=============================== we have the digit, time to print
	%ADDIU	T0, R0, C8
	.PrintDigit10000s
	ADDIU	T0, R0, C8 %?
	ADD		S4, T1, R0
	LUI		V0, 6666
	ORI		V0, V0, 6667
	MULT	S4, V0			
	SRA		V0, S4, 1F
	MFHI	T0
	SRA		V1, T0, 2
	SUBU	S1, V1, V0
	SLL		S2, S1, 2
	ADDU	V0, S2, S1
	SLL		V0, V0, 1
	%SUBU	S4, S4, V0       %if not commented, everything but the ones digit and the ten thousands digit disappears
	LUI		S0, 802A
	LW		S0, EFBC (S0)
	ADDIU	A1, R0, A
	JAL		801449DC
	DADDU	A0, S0, R0
	SLL		V0, S4, 2  		 
	LUI		T0, 8028
	ADDIU	T0, T0, 9FC		
	LUI		A1, 8029		 
	OR		A1, A1, T2		 
	JAL		801447FC
	DADDU	A0, S0, R0
	DADDU	A0, R0, R0
	DADDU	A1, A0, R0
	LHU		V0, 2 (S6)
	DADDU	A2, A0, R0
	ADDIU	V0, V0, 6		
	ANDI	V0, V0, FFFF	
	SW		V0, 10 (SP)
	LHU		V0, 2 (S5)		
	DADDU	A3, A0, R0
	SW		S8, 18 (SP)		
	SW		S8, 1C (SP)		
	ADDIU	V0, V0, 2
	ANDI	V0, V0, FFFF
	JAL		80267A3C
	SW		V0, 14 (SP)
	DADDU	A0, S0, R0
	LW		A1, 20 (SP)
	LW		A2, 24 (SP)
	ADDIU	A1, A1, FFF2	%position offset (was 4 in 10s digit, A in 1s digit)
	JAL		80144984
	ADDIU	A2, A2, 6
	JAL		801447C4
	DADDU	A0, S0, R0
	ADDIU	T2, R0, 1FA8	%this number will be used to signal to print 0 
	.1000s
	ADDIU	T0, R0, 3E8
	SUB		T1, S4, T0
	BLTZ	T1, .lt1000 % <1000 (but we need to print 0 if needed)
	NOP
	%%ADD		T0, R0, R0
	ADDIU	T2, R0, 1FD0 %our number is more than 1000, set up digit printing
	.printloop1k	%loop over the digits until you find the right one
	%increment digit
	ADDIU	T0, T0, 3E8
	SUB		T1, S4, T0
	BLTZ	T1, .PrintDigit1000s %print time
	ADDI	T1, T1, 3E8 %fix value
	BEQ		R0, R0, .printloop1k
	ADDIU 	T2, T2, 28
	.lt1000
	ADDIU	T0, R0, 1FA8
	BEQ		T2, T0, .PrintDigit1000s %print a 0
	NOP
	BEQ		R0, R0, .100s
	NOP
	%=============================== we have the digit, time to print
	%ADDIU	T0, R0, C8
	.PrintDigit1000s
	ADDIU	T0, R0, C8 %?
	ADD		S4, T1, R0
	LUI		V0, 6666
	ORI		V0, V0, 6667
	MULT	S4, V0			
	SRA		V0, S4, 1F
	MFHI	T0
	SRA		V1, T0, 2
	SUBU	S1, V1, V0
	SLL		S2, S1, 2
	ADDU	V0, S2, S1
	SLL		V0, V0, 1
	%SUBU	S4, S4, V0       %if not commented, everything but the ones digit and the thousands digit disappears
	LUI		S0, 802A
	LW		S0, EFBC (S0)
	ADDIU	A1, R0, A
	JAL		801449DC
	DADDU	A0, S0, R0
	SLL		V0, S4, 2  		 
	LUI		T0, 8028
	ADDIU	T0, T0, 9FC
	LUI		A1, 8029		 
	OR		A1, A1, T2		 
	JAL		801447FC
	DADDU	A0, S0, R0
	DADDU	A0, R0, R0
	DADDU	A1, A0, R0
	LHU		V0, 2 (S6)
	DADDU	A2, A0, R0
	ADDIU	V0, V0, 6		
	ANDI	V0, V0, FFFF	
	SW		V0, 10 (SP)
	LHU		V0, 2 (S5)		
	DADDU	A3, A0, R0
	SW		S8, 18 (SP)		
	SW		S8, 1C (SP)		
	ADDIU	V0, V0, 2
	ANDI	V0, V0, FFFF
	JAL		80267A3C
	SW		V0, 14 (SP)
	DADDU	A0, S0, R0
	LW		A1, 20 (SP)
	LW		A2, 24 (SP)
	ADDIU	A1, A1, FFF8	%position offset (was 4 in 10s digit, A in 1s digit)
	JAL		80144984
	ADDIU	A2, A2, 6
	JAL		801447C4
	DADDU	A0, S0, R0
	ADDIU	T2, R0, 1FA8	%this number will be used to signal to print a 0 in the hundreds place
%/
