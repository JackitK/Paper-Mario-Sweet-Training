% Script for Ooze Smash, does half the normal damage of a normal hammer but in exchange does poison damage, turn count varying on hammer strength...
% Determine damage & poison turns based on rank....
  % Orginally was going to do always 1 damage but variey in poison turns, but there's no incentive to go for it over D-down pound....
  % Instead it'll do half damage that turn, but the poison will last turns = other half of hammer damage + rank
      % Normal:  1 Damage + 2 turns of poison
      % Super:   2 Damage + 4 turns of poison
      % Ultra:   3 Damage + 6 turns of poison
  % So if you include all turns of poison damage it does as much (techincally more at Ultra Rank or if the enemy is weak to poison) as Power Smash 
  % but for less FP and poison bypasses defense allowing for a cheaper D-Down Smash. 
  %Obviously the biggest downside is poison does only 1 damage per turn, so it's not too useful in battles that don't last long. 
  % I don't want it too be too powerful since Toxitea also poisons, but that's why it's a cheap badge.
  %(Hopefully this buff will be enough to make it at least worth considering in cheap defensive builds without stealing the spotlight from Toxitea, especially since Toxitea is mutitarget.)
%The damage script... it always does one damage to the foe (before defense check), hammer upgrades instead determine how long the poision will last...
  %If the Action command fails, it'll do zero damage and a max of 1 turn of poison.

@ $Script_UseMove0
{
    0:  Call  EnablePlayerBlur  ( 00000001 )
   10:  Call  802694A4  ( 00000001 )
   20:  Call  GetMenuSelection  ( *Var0 *Var1 *Var2 )
   38:  Switch  *Var1
   44:  	Case  ==  .Item:Nothing % 0
   50:  		Set   *VarD  0000002D
   50:  		Set   *VarE  00000001
   60:  		Set   *VarF  00000002
   80:  		ExecWait  $Script_802A3260
   8C:  	Case  ==  .Item:Jump % 1
   98:  		Set   *VarD  0000002D
   98:  		Set   *VarE  00000002
   A8:  		Set   *VarF  00000004
   C8:  		ExecWait  $Script_802A3260
   D4:  	Case  ==  .Item:SpinJump % 2
   E0:  		Set   *VarD  0000002D
   E0:  		Set   *VarE  00000003
   F0:  		Set   *VarF  00000006
  110:  		ExecWait  $Script_802A3260
  11C:  EndSwitch
  124:  Call  EnablePlayerBlur  ( 00000000 )
  134:  Return
  13C:  End
}
  
  @ $Script_802A3260
  {
      0:  Call  GetMenuSelection  ( *Var0 *Var1 *Var2 )
     18:  Switch  *Var1
     24:  	Case  ==  .Item:Nothing % 0
     30:  		ExecWait  $Script_802A1B40
     3C:  	Case  ==  .Item:Jump % 1
     48:  		ExecWait  $Script_802A2000
     54:  	Case  ==  .Item:SpinJump % 2
     60:  		ExecWait  $Script_802A23E8
     6C:  EndSwitch
     74:  Call  PlayerTestEnemy       ( *Var0 ~Flags:DamageType:Smash 00000019 00000000 00000000 00000010 )
     98:  Call  GetActionSuccessCopy  ( *Var0 )
     A8:  Switch  *Var0
     B4:  	Case  >  00000000
     C0:  		Call  GetMenuSelection  ( *Var0 *Var1 *Var2 )
     D8:  		Switch  *Var1
     E4:  			Case  ==  .Item:Nothing % 0
     F0:  				Call  StartRumble   ( 00000007 )
                  Call  PlaySoundAtActor  ( .Actor:Player 00000392 )
    100:  				Thread
    108:  					Call  ShakeCam  ( .Cam:Battle 00000000  10` *Fixed[1.3] )
                    Call  PlaySoundAtActor  ( .Actor:Player 00000392 )
    124:  				EndThread
    12C:  			Case  ==  .Item:Jump % 1
    138:  				Call  StartRumble   ( 00000008 )
                  Call  PlaySoundAtActor  ( .Actor:Player 00000392 )
    148:  				Thread
    150:  					Call  ShakeCam  ( .Cam:Battle 00000000  10` *Fixed[1.6] )
                    Call  PlaySoundAtActor  ( .Actor:Player 00000392 )
    16C:  				EndThread
    174:  			Case  ==  .Item:SpinJump % 2
    180:  				Call  StartRumble   ( 00000009 )
                  Call  PlaySoundAtActor  ( .Actor:Player 00000392 )
    190:  				Thread
    198:  					Call  ShakeCam  ( .Cam:Battle 00000000  10` *Fixed[1.9] )
                    Call  PlaySoundAtActor  ( .Actor:Player 00000392 )
    1B4:  				EndThread
    1BC:  		EndSwitch
    1C4:  	Default
    1CC:  		Call  GetMenuSelection  ( *Var0 *Var1 *Var2 )
    1E4:  		Switch  *Var1
    1F0:  			Case  ==  .Item:Nothing % 0
    1FC:  				Call  StartRumble   ( 00000007 )
                  Call  PlaySoundAtActor  ( .Actor:Player 00000392 )
    20C:  				Thread
    214:  					Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[1.3] )
                    Call  PlaySoundAtActor  ( .Actor:Player 00000392 )
    230:  				EndThread
    238:  			Case  ==  .Item:Jump % 1
    244:  				Call  StartRumble   ( 00000008 )
                  Call  PlaySoundAtActor  ( .Actor:Player 00000392 )
    254:  				Thread
    25C:  					Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[1.6] )
                    Call  PlaySoundAtActor  ( .Actor:Player 00000392 )
    278:  				EndThread
    280:  			Case  ==  .Item:SpinJump % 2
    28C:  				Call  StartRumble   ( 00000009 )
                  Call  PlaySoundAtActor  ( .Actor:Player 00000392 )
    29C:  				Thread
    2A4:  					Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[1.9] )
                    Call  PlaySoundAtActor  ( .Actor:Player 00000392 )
    2C0:  				EndThread
    2C8:  		EndSwitch
    2D0:  EndSwitch
    2D8:  Call  UseBattleCamPreset    ( 0000002C )
    2E8:  Wait  1`
    2F4:  Call  PlayerTestEnemy       ( *Var0 ~Flags:DamageType:Smash 00000019 00000000 00000000 00000010 )
    318:  If  *Var0  ==  .HitResult:Miss % 6
    328:  	ExecWait  $Script_802A1A64
    334:  	Return
    33C:  EndIf
    344:  Call  DidActionSucceed  ( *Var0 )
    354:  Switch  *Var0
    360:  	Case  >  .False
    36C:  		Call  GetMenuSelection  ( *Var0 *Var1 *Var2 )
    384:  		Switch  *Var1
    390:  			Case  ==  .Item:Nothing % 0
    39C:  				%Call  PlaySoundAtActor  ( .Actor:Player 000000E9 )
                  Call  PlaySoundAtActor  ( .Actor:Player 00000393 )
                          % Normal hammer does 2 damage so do 1 damage plus 2 turns of poison...
                          Call  PlayerDamageEnemy ( *Var0 ~Flags:DamageType:Smash 00000019 ~DebuffType:Poison:2:100` *VarE 00000070 )
    3B0:  			Case  ==  .Item:Jump % 1
    3BC:  				%Call  PlaySoundAtActor  ( .Actor:Player 0000010E )
                  Call  PlaySoundAtActor  ( .Actor:Player 00000393 )
                          % Normal hammer does 4 damage so do 2 damage plus 4 turns of poison...
                          Call  PlayerDamageEnemy ( *Var0 ~Flags:DamageType:Smash 00000019 ~DebuffType:Poison:4:100` *VarE 00000070 )
    3D0:  			Case  ==  .Item:SpinJump % 2
    3DC:  				%Call  PlaySoundAtActor  ( .Actor:Player 0000010E )
                  Call  PlaySoundAtActor  ( .Actor:Player 00000393 )
                          % Normal hammer does 4 damage so do 2 damage plus 4 turns of poison...
                          Call  PlayerDamageEnemy ( *Var0 ~Flags:DamageType:Smash 00000019 ~DebuffType:Poison:6:100` *VarE 00000070 )
    3F0:  		EndSwitch
    3F8:  		%Call  PlayerDamageEnemy ( *Var0 ~Flags:DamageType:Smash 00000019 ~DebuffType:Poison:3:100` 0 00000070 )
    41C:  	Default
    424:  		Call  GetMenuSelection  ( *Var0 *Var1 *Var2 )
    43C:  		Switch  *Var1
    448:  			Case  ==  .Item:Nothing % 0
    454:  				Call  PlaySoundAtActor  ( .Actor:Player 000000E9 )
    468:  			Case  ==  .Item:Jump % 1
    474:  				Call  PlaySoundAtActor  ( .Actor:Player 0000010E )
    488:  			Case  ==  .Item:SpinJump % 2
    494:  				Call  PlaySoundAtActor  ( .Actor:Player 0000010E )
    4A8:  		EndSwitch
    4B0:  		Call  PlayerDamageEnemy ( *Var0 ~Flags:DamageType:Smash 00000019 ~DebuffType:Poison:1:100` 00000001 00000030 )
    4D4:  EndSwitch
    4DC:  Switch  *Var0
    4E8:  	CaseOR  ==  00000001 % 1
    4F4:  	CaseOR  ==  00000003 % 3
    500:  		ExecWait  $Script_802A18AC
    50C:  	EndCaseGroup
    514:  	CaseOR  ==  .HitResult:Hit % 0
    520:  	CaseOR  ==  .HitResult:QuakeImmune % 2
    52C:  		ExecWait  $Script_802A1A64
    538:  	EndCaseGroup
    540:  EndSwitch
    548:  Return
    550:  End
  }
  
  
/%
% Make into "Element Smash" (Name pending)
% Like Power Smash but does elemental damage depending on what Rush's Element is...



%Determine damage
@ $Script_UseMove0
{
    0:  Call  EnablePlayerBlur  ( 00000001 )
   10:  Call  802694A4  ( 00000001 )
   20:  Call  GetMenuSelection  ( *Var0 *Var1 *Var2 )
   38:  Switch  *Var1
   44:  	Case  ==  .Item:Nothing % 0
   50:  		Set   *VarD  0000002D
   60:  		Set   *VarE  00000004
   70:  		Set   *VarF  00000005
   80:  		ExecWait  $Script_802A3260
   8C:  	Case  ==  .Item:Jump % 1
   98:  		Set   *VarD  0000002D
   A8:  		Set   *VarE  00000005
   B8:  		Set   *VarF  00000007
   C8:  		ExecWait  $Script_802A3260
   D4:  	Case  ==  .Item:SpinJump % 2
   E0:  		Set   *VarD  0000002D
   F0:  		Set   *VarE  00000006
  100:  		Set   *VarF  00000009
  110:  		ExecWait  $Script_802A3260
  11C:  EndSwitch
  124:  Call  EnablePlayerBlur  ( 00000000 )
  134:  Return
  13C:  End
}


@ $Script_802A3260
{
    0:  Call  GetMenuSelection  ( *Var0 *Var1 *Var2 )
   18:  Switch  *Var1
   24:  	Case  ==  .Item:Nothing % 0
   30:  		ExecWait  $Script_802A1B40
   3C:  	Case  ==  .Item:Jump % 1
   48:  		ExecWait  $Script_802A2000
   54:  	Case  ==  .Item:SpinJump % 2
   60:  		ExecWait  $Script_802A23E8
   6C:  EndSwitch
   74:  Call  PlayerTestEnemy       ( *Var0 ~Flags:DamageType:Smash 00000019 00000000 00000000 00000010 )
   98:  Call  UseBattleCamPreset    ( 0000002C )
   A8:  Wait  1`
   B4:  ExecWait  $Script_802A3188
   C0:  Call  PlayerTestEnemy       ( *Var0 ~Flags:DamageType:Smash 00000000 00000000 00000000 00000010 )
   E4:  If  *Var0  ==  .HitResult:Miss % 6
   F4:  	ExecWait  $Script_802A1A64
  100:  	Return
  108:  EndIf
  110:  Call  DidActionSucceed  ( *Var0 )
  120:  Switch  *Var0
  12C:  	Case  >  .False
  138:  		Call  GetMenuSelection  ( *Var0 *Var1 *Var2 )
  150:  		Switch  *Var1
  15C:  			Case  ==  .Item:Nothing % 0
  168:  				Call  PlaySoundAtActor  ( .Actor:Player 000000E9 )
  17C:  			Case  ==  .Item:Jump % 1
  188:  				Call  PlaySoundAtActor  ( .Actor:Player 0000010E )
  19C:  			Case  ==  .Item:SpinJump % 2
  1A8:  				Call  PlaySoundAtActor  ( .Actor:Player 0000010E )
  1BC:  		EndSwitch
            %Deterimine the Element and choose the apporitate attack....
            Call $ScrApi_GetElementVariable ( *VarA )
            %Run the switch to deterimine element
            Switch  *VarA 
                 Case  ==  00000001  % Do Fire Damage
                  Call  PlayerDamageEnemy ( *Var0 ~Flags:DamageType:Smash|Fire 00000019 00000000 *VarF 00000030 )
                 Case  ==  00000002  % Do Ice Damage
                  Call  PlayerDamageEnemy ( *Var0 ~Flags:DamageType:Smash|Ice 00000019 00000000 *VarF 00000030 )
                 Default   % Otherwise do Electric Damage
                  Call  PlayerDamageEnemy ( *Var0 ~Flags:DamageType:Smash|Electric 00000019 00000000 *VarF 00000030 )
            EndSwitch
  1E8:  	Default
  1F0:  		Call  GetMenuSelection  ( *Var0 *Var1 *Var2 )
  208:  		Switch  *Var1
  214:  			Case  ==  .Item:Nothing % 0
  220:  				Call  PlaySoundAtActor  ( .Actor:Player 000000E9 )
  234:  			Case  ==  .Item:Jump % 1
  240:  				Call  PlaySoundAtActor  ( .Actor:Player 0000010E )
  254:  			Case  ==  .Item:SpinJump % 2
  260:  				Call  PlaySoundAtActor  ( .Actor:Player 0000010E )
  274:  		EndSwitch
            %Deterimine the Element and choose the apporitate attack....
            Call $ScrApi_GetElementVariable ( *VarA )
            %Run the switch to deterimine element
            Switch  *VarA 
                 Case  ==  00000001  % Do Fire Damage
                  Call  PlayerDamageEnemy ( *Var0 ~Flags:DamageType:Smash|Fire 00000019 00000000 *VarE 00000030 )
                 Case  ==  00000002  % Do Ice Damage
                  Call  PlayerDamageEnemy ( *Var0 ~Flags:DamageType:Smash|Ice 00000019 00000000 *VarE 00000030 )
                 Default   % Otherwise do Electric Damage
                  Call  PlayerDamageEnemy ( *Var0 ~Flags:DamageType:Smash|Electric 00000019 00000000 *VarE 00000030 )
            EndSwitch
  2A0:  EndSwitch
  2A8:  Switch  *Var0
  2B4:  	CaseOR  ==  00000001 % 1
  2C0:  	CaseOR  ==  00000003 % 3
  2CC:  		ExecWait  $Script_802A18AC
  2D8:  	EndCaseGroup
  2E0:  	CaseOR  ==  .HitResult:Hit % 0
  2EC:  	CaseOR  ==  .HitResult:QuakeImmune % 2
  2F8:  		ExecWait  $Script_802A1A64
  304:  	EndCaseGroup
  30C:  EndSwitch
  314:  Return
  31C:  End
}

%/