% Define the HP value here...
#define .HPChan 25`b
#define .HPLee 40`b
#define .HPTheMaster1 50`b
#define .HPChanHard 35`b
#define .HPLeeHard 50`b
#define .HPTheMaster1Hard 60`b

%Add some updates to Lee for a fun possible bonus release...

% New formations for the hard mode fights (Chan to Master 1)
#new:Formation $Formation_05
{
	$Chan_hard 00000002 0000000A 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_06
{
	$Lee_hard 00000002 0000000A 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_07
{
	$TheMaster1_hard 00000002 0000000A 00000000 00000000 00000000 00000000
}

%Battle Formations (Includes 3 new ones for hard versions of Chan Lee and Master 1)
@ $FormationTable
{
	$SJIS_80232C00 00000001 $Formation_00 $Stage_8023299C 00000000
	$SJIS_80232BF8 00000001 $Formation_01 $Stage_8023299C 00000000
	$SJIS_80232BE8 00000001 $Formation_02 $Stage_8023299C 00000000
	$SJIS_80232BD8 00000001 $Formation_03 $Stage_8023299C 00000000
	$SJIS_80232BC8 00000001 $Formation_04 $Stage_8023299C 00000000
    $SJIS_80232C00 00000001 $Formation_05 $Stage_8023299C 00000000
	$SJIS_80232BF8 00000001 $Formation_06 $Stage_8023299C 00000000
	$SJIS_80232BE8 00000001 $Formation_07 $Stage_8023299C 00000000
	00000000 00000000 00000000 00000000 00000000
}

% Before resuming with actors lets add the thunder effect into the code here so I can use it later.
%Thunder Effect summons lighting, 
    %got way more milage than I thought I would out of a script I didn't even make....
    /%
%Nevermind I got it working as a global function
#new:Function $Function_ThunderFX
{
     ADDIU     SP, SP, FFC0
     SW        RA, 24 (SP)
     SW        S2, 20 (SP)
     SW        S1, 1C (SP)
     SW        S0, 18 (SP)
     SDC1      F24, 38 (SP)
     SDC1      F22, 30 (SP)
     SDC1      F20, 28 (SP)
     JAL       ~Func:get_actor
     LW        A0, 148 (A0)
     JAL       ~Func:get_actor
     LH        A0, 428 (V0)
     DADDU     S0, V0, R0
     BEQ       S0, R0, .o128
     ADDIU     V0, R0, 2
     JAL       80149CB4
     ADDIU     A0, R0, 366
     LIO       V1, CCCCCCCD
     LBU       A0, 191 (S0)
     LBU       V0, 190 (S0)
     MULTU     A0, V1
     LWC1      F0, 188 (S0)
     SRL       V1, V0, 2
     ADDU      V0, V0, V1
     MTC1      V0, F6
     NOP
     CVT.S.W   F6, F6
     MUL.S     F6, F6, F0
     NOP
     ADDIU     V0, A0, FFFE
     MTC1      V0, F4
     NOP
     CVT.S.W   F4, F4
     MUL.S     F4, F4, F0
     NOP
     LWC1      F2, 148 (S0)
     LWC1      F22, 144 (S0)
     LWC1      F24, 14C (S0)
     MFHI      T0
     SRL       V0, T0, 3
     ANDI      V0, V0, FF
     MTC1      V0, F0
     NOP
     CVT.S.W   F0, F0
     TRUNC.W.S F8, F6
     MFC1      S1, F8
     TRUNC.W.S F8, F4
     MFC1      S2, F8
     LW        V0, 0 (S0)
     ANDI      V0, V0, 8000
     BEQ       V0, R0, .oE8
     ADD.S     F20, F2, F0
     SRL       V0, A0, 1
     MTC1      V0, F0
     NOP
     CVT.S.W   F0, F0
     SUB.S     F20, F20, F0
     .oE8
     JAL       800299FC
     ADDIU     A0, R0, 2
     ADDIU     A0, V0, 3
     MFC1      A1, F22
     MFC1      A2, F20
     MFC1      A3, F24
     MTC1      S1, F0
     NOP
     CVT.S.W   F0, F0
     SWC1      F0, 10 (SP)
     MTC1      S2, F0
     NOP
     CVT.S.W   F0, F0
     JAL       80070CD0
     SWC1      F0, 14 (SP)
     ADDIU     V0, R0, 2
     .o128
     LW        RA, 24 (SP)
     LW        S2, 20 (SP)
     LW        S1, 1C (SP)
     LW        S0, 18 (SP)
     LDC1      F24, 38 (SP)
     LDC1      F22, 30 (SP)
     LDC1      F20, 28 (SP)
     JR        RA
     ADDIU     SP, SP, 40
}
%/


% ---- Now for the actor changes -------
% Hard Chan, same as Chan but with more HP....
#new:Actor $Chan_hard
{
	% stats
	[Index]        7Db
	[Level]         0`b
	[MaxHP]        .HPChanHard
	[Coins]         0`b
	[Flags]       00000800
	[StatusTable] $StatusTable_80219D78
	% ai
	[PartsCount]    1`s
	[PartsTable]  $PartsTable_80219E24
	[Script]      $Script_Init_8021CCDC
	% move effectiveness
	[Escape]      100`b
	[Item]          0`b
	[AirLift]       0`b
	[Hurricane]     0`b % Bow's "Spook" as well
	[UpAndAway]     0`b
	[PowerBounce] 100`b
	[SpinSmash]     0`b % weight (0-4)
	% ui positions
	[Size]         22`b  18`b % width height
	[HealthBar]     0`b   0`b % dx dy
	[StatusTurn]  -10`b  20`b % dx dy
	[StatusIcon]   10`b  20`b % dx dy
}

%----Updates to Chan-----
@ $DefenseTable_80219D50 % Chan Non-Flipped
{
	.Element:Normal     00000007 % Make do one damage with Berseker badge if only to reduce RNG frustration, maybe even drop it down to 6...
	.Element:Fire       00000063
    .Element:Shock      00000063
    .Element:Ice        00000063
	.Element:Blast      00000063
    .Element:Quake      -1          % Weak to Quake cause Buzzy Bettle
	.Element:End
}

@ $DefenseTable_80219D6C % Chan Flipped (Keeps 1 point of defense but is vulnerable to elements)
{
	.Element:Normal 00000001
    .Element:Fire       -1
    .Element:Shock      00000000
    .Element:Ice        00000000
	.Element:Blast      00000000
    .Element:Quake      -1    
	.Element:End
}

% Fun idea to implement. Make only vulnerable to status when flipped
@ $StatusTable_80219D78 % Chan's Status Vulnerabilities
{
	.Status:Normal      0`
	.Status:Default     0`
	.Status:Sleep      0`
	.Status:Poison     0`
	.Status:Frozen      0`
	.Status:Dizzy       0`
	.Status:Fear        0`
	.Status:Static     50`
	.Status:Paralyze   50`
	.Status:Shrink     50`
	.Status:Stop      100`
	.Status:DefaultTurnMod    0`
	.Status:SleepTurnMod      0`
	.Status:PoisonTurnMod     0`
	.Status:FrozenTurnMod     0`
	.Status:DizzyTurnMod      0`
	.Status:FearTurnMod       0`
	.Status:StaticTurnMod     0`
	.Status:ParalyzeTurnMod   0`
	.Status:ShrinkTurnMod     0`
	.Status:StopTurnMod       0`
	.Status:End
}

% Make Chan vulnerable to sleep, paralyze, and poison when flipped (Sleep is more trouble than worth to make work)
#new:StatusTable $ChanFlipped
{
    .Status:Normal      0`
	.Status:Default     0`
	.Status:Sleep      0`
	.Status:Poison     100`
	.Status:Frozen      0`
	.Status:Dizzy      100`
	.Status:Fear        0`
	.Status:Static     50`
	.Status:Paralyze   100`
	.Status:Shrink     50`
	.Status:Stop      100`
	.Status:DefaultTurnMod    0`
	.Status:SleepTurnMod      0`
	.Status:PoisonTurnMod     2` % Add two extra turns of poison to keep up with danger D-Downpound
	.Status:FrozenTurnMod     0`
	.Status:DizzyTurnMod      0`
	.Status:FearTurnMod       0`
	.Status:StaticTurnMod     1`
	.Status:ParalyzeTurnMod   0`
	.Status:ShrinkTurnMod     0`
	.Status:StopTurnMod       0`
	.Status:End
}


@ $Chan
{
	% stats
    [MaxHP]        .HPChan %25`b in normal, 40 in hard
    [PowerBounce]  10`b
	% Nothing else should change
}

/%
% No need for this now that I have HP as a variable...
#new:Actor $Chan_hard
{
	% stats
	[Index]        7Db
	[Level]         0`b
    [MaxHP]        30`b
	[Coins]         0`b
	[Flags]       00000800
	[StatusTable] $StatusTable_80219D78
	% ai
	[PartsCount]    1`s
	[PartsTable]  $PartsTable_80219E24
	[Script]      $Script_Init_8021CCDC
	% move effectiveness
	[Escape]      100`b
	[Item]          0`b
	[AirLift]       0`b
	[Hurricane]     0`b % Bow's "Spook" as well
	[UpAndAway]     0`b
	[PowerBounce] 100`b
	[SpinSmash]     0`b % weight (0-4)
	% ui positions
	[Size]         22`b  18`b % width height
	[HealthBar]     0`b   0`b % dx dy
	[StatusTurn]  -10`b  20`b % dx dy
	[StatusIcon]   10`b  20`b % dx dy
}
%/

% Update Chan's Handle Event to change Status tables when flipped
@ $Script_HandleEvent_8021AAB8
{
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   28:  Call  GetLastEvent      ( .Actor:Self *Var0 )
   3C:  Switch  *Var0
   48:  	CaseOR  ==  .Event:HitCombo % 9
   54:  	CaseOR  ==  .Event:Hit % A
   60:  		SetConst  *Var0  00000001
   70:  		SetConst  *Var1  00A30006
   80:  		SetConst  *Var2  00A30007
   90:  		ExecWait  $Script_8021AA1C
   9C:  		ExecWait  DoNormalHit
   A8:  	EndCaseGroup
   B0:  	Case  ==  .Event:BurnHit % E
   BC:  		Call  GetActorVar   ( .Actor:Self 00000008 *Var0 )
   D4:  		If  *Var0  !=  00000002
   E4:  			SetConst  *Var0  00000001
   F4:  			SetConst  *Var1  00A30006
  104:  			SetConst  *Var2  00A30006
  114:  			ExecWait  DoBurnHit
  120:  		Else
  128:  			SetConst  *Var0  00000001
  138:  			SetConst  *Var1  00A30014
  148:  			SetConst  *Var2  00A30015
  158:  			ExecWait  DoBurnHit
  164:  		EndIf
  16C:  	Case  ==  .Event:BurnDeath % 24
  178:  		Call  GetActorVar   ( .Actor:Self 00000008 *Var0 )
  190:  		If  *Var0  !=  00000002
  1A0:  			SetConst  *Var0  00000001
  1B0:  			SetConst  *Var1  00A30006
  1C0:  			SetConst  *Var2  00A30006
  1D0:  			ExecWait  DoBurnHit
  1DC:  			SetConst  *Var0  00000001
  1EC:  			SetConst  *Var1  00A30006
  1FC:  			ExecWait  DoDeath
  208:  		Else
  210:  			SetConst  *Var0  00000001
  220:  			SetConst  *Var1  00A30014
  230:  			SetConst  *Var2  00A30015
  240:  			ExecWait  DoBurnHit
  24C:  			SetConst  *Var0  00000001
  25C:  			SetConst  *Var1  00A30015
  26C:  			ExecWait  DoDeath
  278:  		EndIf
  280:  		Return
  288:  	Case  ==  .Event:SpinSmashHit % B
  294:  		SetConst  *Var0  00000001
  2A4:  		SetConst  *Var1  00A30006
  2B4:  		SetConst  *Var2  00A30007
  2C4:  		ExecWait  $Script_8021AA1C
  2D0:  		ExecWait  DoSpinSmashHit
  2DC:  	Case  ==  .Event:FlipTrigger % D
  2E8:  		Call  SetActorVar       ( .Actor:Self 00000008 00000002 )
  300:  		Call  SetTargetOffset   ( .Actor:Self 00000001  0`  16` )
  31C:  		Call  8027D4C8  ( FFFFFF81 00000001 FFFFFFFF FFFFFFF7 )
  338:  		Call  SetActorVar       ( .Actor:Self 00000009 00000001 )
  350:  		Call  SetDefenseTable   ( .Actor:Self 00000001 $DefenseTable_80219D6C )
                Call  SetStatusTable    (.Actor:Self $ChanFlipped)
  368:  		Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_80219F08 )
  380:  		Call  SetActorFlagBits  ( .Actor:Self 00000400 .True )
  398:  		Call  SetAnimation      ( .Actor:Self 00000001 00A30006 )
  3B0:  		Call  SetActorRotationOffset    ( .Actor:Self 00000000 0000000C 00000000 )
  3CC:  		Thread
  3D4:  			Wait  1`
  3E0:  			Call  SetActorRotation  ( .Actor:Self 00000000 00000000 00000000 )
  3FC:  			Wait  1`
  408:  			Call  SetActorRotation  ( .Actor:Self 00000000 00000000 FFFFFFD3 )
  424:  			Wait  1`
  430:  			Call  SetActorRotation  ( .Actor:Self 00000000 00000000 FFFFFFA6 )
  44C:  			Wait  1`
  458:  			Call  SetActorRotation  ( .Actor:Self 00000000 00000000 FFFFFF79 )
  474:  			Wait  1`
  480:  			Call  SetActorRotation  ( .Actor:Self 00000000 00000000 FFFFFF4C )
  49C:  			Wait  1`
  4A8:  		EndThread
  4B0:  		UseIntBuffer  $IntTable_8021AA6C
  4BC:  		Loop  00000013
  4C8:  			Get1Int  *Var0
  4D4:  			Call  SetActorDispOffset    ( .Actor:Self 00000000 *Var0 00000000 )
  4F0:  			Wait  1`
  4FC:  		EndLoop
  504:  		Call  SetActorDispOffset    ( .Actor:Self 00000000 00000000 00000000 )
  520:  		Call  SetActorRotationOffset    ( .Actor:Self 00000000 00000000 00000000 )
  53C:  		Call  SetActorRotation      ( .Actor:Self 00000000 00000000 00000000 )
  558:  		Call  SetAnimation  ( .Actor:Self 00000001 00A30007 )
  570:  	Case  ==  .Event:ShockHit % 2F
  57C:  		SetConst  *Var0  00000001
  58C:  		SetConst  *Var1  00A30006
  59C:  		ExecWait  DoShockHit
  5A8:  		SetConst  *Var0  00000001
  5B8:  		SetConst  *Var1  00A30006
  5C8:  		ExecWait  DoJumpBack
  5D4:  		SetConst  *Var0  00000001
  5E4:  		SetConst  *Var1  00A30004
  5F4:  		ExecWait  DoReturnHome
  600:  	Case  ==  .Event:ShockDeath % 26
  60C:  		SetConst  *Var0  00000001
  61C:  		SetConst  *Var1  00A30006
  62C:  		ExecWait  DoShockHit
  638:  		SetConst  *Var0  00000001
  648:  		SetConst  *Var1  00A30006
  658:  		ExecWait  DoDeath
  664:  		Return
  66C:  	Case  ==  00000017 % 17
  678:  		Call  GetActorVar   ( .Actor:Self 00000008 *Var0 )
  690:  		If  *Var0  ==  00000001
  6A0:  			SetConst  *Var0  00000001
  6B0:  			SetConst  *Var1  00A3000C
  6C0:  			ExecWait  DoImmune
  6CC:  			Call  SetAnimation  ( .Actor:Self 00000001 00A3000D )
  6E4:  			Wait  8`
  6F0:  		Else
  6F8:  			SetConst  *Var0  00000001
  708:  			SetConst  *Var1  00A30002
  718:  			ExecWait  DoImmune
  724:  		EndIf
  72C:  	Case  ==  .Event:Immune % 19
  738:  		Call  GetActorVar   ( .Actor:Self 00000008 *Var0 )
  750:  		If  *Var0  ==  00000001
  760:  			SetConst  *Var0  00000001
  770:  			SetConst  *Var1  00A3000C
  780:  			ExecWait  DoImmune
  78C:  			Call  SetAnimation  ( .Actor:Self 00000001 00A3000D )
  7A4:  			Wait  8`
  7B0:  		Else
  7B8:  			SetConst  *Var0  00000001
  7C8:  			SetConst  *Var1  00A30002
  7D8:  			ExecWait  DoImmune
  7E4:  		EndIf
  7EC:  	Case  ==  .Event:SpikeTaunt % 1B
  7F8:  		Wait  10`
  804:  		Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  820:  		Call  GetStatusFlags    ( .Actor:Self *Var3 )
  834:  		If  *Var3  &  ~Flags:StatusFlags:Shrink % 80000
  844:  			Add   *Var1  00000009
  854:  		Else
  85C:  			Add   *Var1  00000018
  86C:  		EndIf
  874:  		Call  PlayEffect    ( ~FX:LensFlare:Rotating *Var0 *Var1 *Var2 00000014 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  8B8:  		Wait  20`
  8C4:  	Case  ==  .Event:Death % 20
  8D0:  		SetConst  *Var0  00000001
  8E0:  		SetConst  *Var1  00A30006
  8F0:  		SetConst  *Var2  00A30007
  900:  		ExecWait  $Script_8021AA1C
  90C:  		ExecWait  DoNormalHit
  918:  		Wait  10`
  924:  		SetConst  *Var0  00000001
  934:  		SetConst  *Var1  00A30006
  944:  		SetConst  *Var2  00A30007
  954:  		ExecWait  $Script_8021AA1C
  960:  		ExecWait  DoDeath
  96C:  		Return
  974:  	Case  ==  .Event:SpinSmashDeath % 21
  980:  		SetConst  *Var0  00000001
  990:  		SetConst  *Var1  00A30006
  9A0:  		SetConst  *Var2  00A30007
  9B0:  		ExecWait  $Script_8021AA1C
  9BC:  		ExecWait  DoSpinSmashHit
  9C8:  		SetConst  *Var0  00000001
  9D8:  		SetConst  *Var1  00A30006
  9E8:  		SetConst  *Var2  00A30007
  9F8:  		ExecWait  $Script_8021AA1C
  A04:  		ExecWait  DoDeath
  A10:  		Return
  A18:  	Case  ==  .Event:RecoverStatus % 31
  A24:  		Call  GetActorVar   ( .Actor:Self 00000008 *Var0 )
  A3C:  		If  *Var0  ==  00000001
  A4C:  			SetConst  *Var0  00000001
  A5C:  			SetConst  *Var1  00A30001
  A6C:  			ExecWait  DoRecover
  A78:  		EndIf
  A80:  	Case  ==  .Event:ScareAway % 39
  A8C:  		Call  GetActorVar   ( .Actor:Self 00000008 *Var0 )
  AA4:  		If  *Var0  ==  00000001
  AB4:  			SetConst  *Var0  00000001
  AC4:  			SetConst  *Var1  00A30004
  AD4:  			SetConst  *Var2  00A30006
  AE4:  			ExecWait  DoScareAway
  AF0:  			Return
  AF8:  		Else
  B00:  			SetConst  *Var0  00000001
  B10:  			SetConst  *Var1  00A30002
  B20:  			ExecWait  DoImmune
  B2C:  		EndIf
  B34:  	Case  ==  .Event:BeginAirLift % 3A
  B40:  		Call  GetActorVar   ( .Actor:Self 00000008 *Var0 )
  B58:  		If  *Var0  ==  00000001
  B68:  			SetConst  *Var0  00000001
  B78:  			SetConst  *Var1  00A30004
  B88:  		Else
  B90:  			SetConst  *Var0  00000001
  BA0:  			SetConst  *Var1  00A30002
  BB0:  		EndIf
  BB8:  		ExecWait  DoAirLift
  BC4:  	Case  ==  .Event:BlowAway % 16
  BD0:  		Call  GetActorVar   ( .Actor:Self 00000008 *Var0 )
  BE8:  		If  *Var0  ==  00000001
  BF8:  			SetConst  *Var0  00000001
  C08:  			SetConst  *Var1  00A30006
  C18:  		Else
  C20:  			SetConst  *Var0  00000001
  C30:  			SetConst  *Var1  00A30007
  C40:  		EndIf
  C48:  		ExecWait  DoBlowAway
  C54:  		Return
  C5C:  	Case  ==  .Event:AirLiftFailed % 1F
  C68:  		Call  GetActorVar   ( .Actor:Self 00000008 *Var0 )
  C80:  		If  *Var0  ==  00000001
  C90:  			SetConst  *Var0  00000001
  CA0:  			SetConst  *Var1  00A3000C
  CB0:  			ExecWait  DoImmune
  CBC:  			Call  SetAnimation  ( .Actor:Self 00000001 00A3000D )
  CD4:  			Wait  8`
  CE0:  		Else
  CE8:  			SetConst  *Var0  00000001
  CF8:  			SetConst  *Var1  00A30002
  D08:  			ExecWait  DoImmune
  D14:  		EndIf
  D1C:  	Default
  D24:  EndSwitch
  D2C:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  D40:  Call  UseIdleAnimation  ( .Actor:Self .True )
  D54:  Return
  D5C:  End
}

%Chan's intalizing script
 %Run a stronger Next Turn script if Challenge mode is on
@ $Script_Init_8021CCDC
{
    0:  ExecWait  $Script_80219F4C
    C:  Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_8021D0CC )
        Call  BindNextTurn  ( .Actor:Self $Script_NextTurn_8021CD7C )
   34:  Call  SetActorVar   ( .Actor:Self 00000000 00000000 )
   4C:  Call  SetActorVar   ( .Actor:Self 00000001 00000000 )
   64:  Call  SetActorVar   ( .Actor:Self 00000002 00000000 )
   7C:  Call  SetBattleFlagBits ( 00800000 .True )
   90:  Return
   98:  End
}

% Chan Taking his turn
@ $Script_TakeTurn_Chan
{
    
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
   40:  If  *Var[0]  ==  00000002 
   50:  	Call     GetActorVar 	( .Actor:Self 00000009 *Var[0] )
   68:  	Sub  *Var[0]  00000001 
   78:  	If  *Var[0]  >  00000000 
   88:  		Call     SetActorVar 	( .Actor:Self 00000009 *Var[0] )
   A0:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
   BC:  		Wait     0000001E 
   C8:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
   E0:  		Call     UseBattleCamPreset 	( 00000002 )
   F0:  	Else
   F8:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  114:  		Wait     00000014 
  120:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  138:  		SetConst  *Var[0]  00000001 
  148:  		SetConst  *Var[1]  00A30002 
  158:  		SetConst  *Var[2]  00A30001 
  168:  		ExecWait 8029BBB4 
  174:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
  188:  		Call     SetActorVar 	( .Actor:Self 00000008 00000001 )
  1A0:  		Call     SetTargetOffset 	( .Actor:Self 00000001 00000000 00000010 )
  1BC:  		Call     8027D4C8 ( FFFFFF81 00000001 FFFFFFFF FFFFFFF7 )
  1D8:  		Call     SetDefenseTable 	( .Actor:Self 00000001 $DefenseTable_80219D50 )
                Call     SetStatusTable 	( .Actor:Self $StatusTable_80219D78 ) % Swap back to normal Status Table
  1F0:  		Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_80219E70 )
  208:  		Call     BindIdle    	( .Actor:Self $Script_Idle_8021A11C )
  21C:  		Call     SetActorFlagBits 	( .Actor:Self 00000400 .False )
  234:  	EndIf
            % Don't skip IdleScript if Status
            If  *Var0  &  ~Flags:StatusFlags:Sleep|Paralyze
  23C:  	    Call     EnableIdleScript 	( .Actor:Self 00000001 )
  250:  	    Call     UseIdleAnimation 	( .Actor:Self .True )
  264:  	    Return
            Else
                % Skip idle script
            EndIf
  26C:  EndIf
  274:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
  288:  Call     UseBattleCamPreset 	( 0000003F )
  298:  Call     BattleCamTargetActor ( .Actor:Self )
  2A8:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
  2C0:  Call     SetAnimation 	( .Actor:Self 00000001 00A3000C )
  2D8:  Wait     0000000A 
  2E4:  Call     SetAnimation 	( .Actor:Self 00000001 00A30009 )
  2FC:  Thread
  304:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  320:  	Call     PlayEffect  	( ~FX:SmokeImpact:Small *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
  364:  	Wait     0000000A 
  370:  	Call     PlayEffect  	( ~FX:SmokeImpact:Small *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
  3B4:  	Wait     00000005 
  3C0:  	Call     PlayEffect  	( ~FX:SmokeImpact:Small *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
  404:  EndThread
  40C:  Call     PlaySoundAtActor 	( .Actor:Self 00002021 )
  420:  Call     SetAnimation 	( .Actor:Self 00000001 00A30005 )
  438:  Wait     00000014 
  444:  Call     SetActorSounds ( FFFFFF81 00000000 00000000 00000000 )
  460:  Call     PlaySoundAtActor 	( .Actor:Self 000020D3 )
  474:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000002 00000010 )
  498:  Switch  *Var[0] 
  4A4:  	CaseOR  ==  00000006 
  4B0:  	CaseOR  ==  00000005 
  4BC:  		Set  *Var[A]  *Var[0] 
  4CC:  		Thread
  4D4:  			Loop     
  4E0:  				Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
  4FC:  				Add  *Var[0]  0000001E 
  50C:  				Call     GetActorPos 	( .Actor:Self *Var[3] *Var[4] *Var[5] )
  528:  				If  *Var[0]  >  *Var[3] 
  538:  					BreakLoop
  540:  				EndIf
  548:  				Wait     00000001 
  554:  			EndLoop
  55C:  			Call     UseBattleCamPreset 	( 00000001 )
  56C:  			If  *Var[A]  ==  00000005 
  57C:  				Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  5A0:  			EndIf
  5A8:  			Wait     0000000F 
  5B4:  			Call     UseBattleCamPreset 	( 00000002 )
  5C4:  		EndThread
  5CC:  		Call     SetGoalToTarget 	( .Actor:Self )
  5DC:  		Call     AddGoalPos 	( .Actor:Self FFFFFF6A 00000000 00000000 )
  5F8:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[24.0] ) %14 -> 24
  60C:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
  624:  		Wait     0000000F 
  630:  		Call     YieldTurn   	( )
  63C:  		Call     8026F6EC ( FFFFFF81 )
  64C:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  668:  		Call     SetGoalToHome 	( .Actor:Self )
  678:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  694:  		Add  *Var[0]  000000C8 
  6A4:  		Call     SetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  6C0:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[16.0] ) %10 -> 16
  6D4:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
  6EC:  		Wait     0000000A 
  6F8:  		Call     SetAnimation 	( .Actor:Self 00000001 00A3000D )
  710:  		Wait     0000000A 
  71C:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  734:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  748:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  75C:  		Return
  764:  	EndCaseGroup
  76C:  EndSwitch
  774:  Call     SetGoalToTarget 	( .Actor:Self )
  784:  Call     SetActorSpeed 	( .Actor:Self *Fixed[14.0] )
  798:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
  7B0:  Wait     00000002 
        %Determine damage depending on if Challenge mode or normal
        % If Challenge mode, do 5 damage and cause Dizzy...
        If *GF_HardMode == .True
            % First, determine damage.  It'll do 5 damage in most modes but increase it in "Kitchen Sink mode" to get around Bresker + Last Stand
            % If the flag for all sinks mode is on do extra damage, otherwise do just 5...
            If *GB_FileCodeMode == 8`
                Set *VarC 00000006
            Else
                Set *VarC 00000005
            EndIf

            % Don't Dizzy Mario if he's already Dizzy, that's just cruel
            Call  GetStatusFlags    ( .Actor:Player *VarA )
            If  *VarA  &  ~Flags:StatusFlags:Dizzy
                Call    EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 *VarC 00000020 )
            Else
                Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF ~DebuffType:Dizzy:2:100` *VarC 00000020 )
            EndIf

            % Add a twist for All Sink Mode where he'll attack again, but stronger if Mario is at perfect danger
                % To make things more interesting, trigger this attack every turn once Chan gets below 10 HP
                    % I'll test for both and store it as a variable so I don't have to waste space putting the entire attack code in two extra times....
            Set *VarE .False % Only run the attack again if VarE is true...
            If *GB_FileCodeMode == 8`
                % Check for Perfect HP from Mario/Player
                Call  GetActorHP    ( .Actor:Player *VarD  )
                If *VarD > 00000004 % 5 HP or more
                    Set *VarE .True
                EndIf
                % Check if Actor's HP is below 8
                Call  GetActorHP    ( .Actor:Self *VarD  )
                If *VarD < 00000008 % less than 8 HP
                    Set *VarE .True
                EndIf
            EndIf

            % Now check to see if the attack should play again...
            If *VarE == .True
                % Play decoration here...
                Call  PlaySoundAtActor  ( .Actor:Self 0000020B )
                Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:GoldenFlames )
  49C:  		Wait  1`
                % Buff the attack (*VarC) and do the attack again
                Add *VarC 00000001 % Increase by 1
                %Run through the attack animation again...
                Call     SetTargetActor ( .Actor:Self .Actor:Player )
                Call     UseBattleCamPreset 	( 0000003F )
                Call     BattleCamTargetActor ( .Actor:Self )
                Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
                Call     SetAnimation 	( .Actor:Self 00000001 00A3000C )
                Wait     0000000A 
                Call     SetAnimation 	( .Actor:Self 00000001 00A30009 )
            Thread
                Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  320:  	    Call     PlayEffect  	( ~FX:SmokeImpact:Small *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
  364:  	    Wait     0000000A 
  370:  	    Call     PlayEffect  	( ~FX:SmokeImpact:Small *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
  3B4:  	    Wait     00000005 
  3C0:  	    Call     PlayEffect  	( ~FX:SmokeImpact:Small *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
  404:      EndThread
  40C:      Call     PlaySoundAtActor 	( .Actor:Self 00002021 )
  420:      Call     SetAnimation 	( .Actor:Self 00000001 00A30005 )
  438:      Wait     00000014 
  444:      Call     SetActorSounds ( FFFFFF81 00000000 00000000 00000000 )
  460:      Call     PlaySoundAtActor 	( .Actor:Self 000020D3 )
  474:      Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000002 00000010 )
  498:      Switch  *Var[0] 
  4A4:  	    CaseOR  ==  00000006 
  4B0:  	    CaseOR  ==  00000005 
  4BC:  		    Set  *Var[A]  *Var[0] 
  4CC:  		    Thread
  4D4:  			Loop     
  4E0:  				Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
  4FC:  				Add  *Var[0]  0000001E 
  50C:  				Call     GetActorPos 	( .Actor:Self *Var[3] *Var[4] *Var[5] )
  528:  				If  *Var[0]  >  *Var[3] 
  538:  					BreakLoop
  540:  				EndIf
  548:  				Wait     00000001 
  554:  			EndLoop
  55C:  			Call     UseBattleCamPreset 	( 00000001 )
  56C:  			If  *Var[A]  ==  00000005 
  57C:  				Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  5A0:  			EndIf
  5A8:  			Wait     0000000F 
  5B4:  			Call     UseBattleCamPreset 	( 00000002 )
  5C4:  		EndThread
  5CC:  		Call     SetGoalToTarget 	( .Actor:Self )
  5DC:  		Call     AddGoalPos 	( .Actor:Self FFFFFF6A 00000000 00000000 )
  5F8:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[24.0] ) %14 -> 24
  60C:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
  624:  		Wait     0000000F 
  630:  		Call     YieldTurn   	( )
  63C:  		Call     8026F6EC ( FFFFFF81 )
  64C:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  668:  		Call     SetGoalToHome 	( .Actor:Self )
  678:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  694:  		Add  *Var[0]  000000C8 
  6A4:  		Call     SetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  6C0:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[16.0] ) %10 -> 16
  6D4:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
  6EC:  		Wait     0000000A 
  6F8:  		Call     SetAnimation 	( .Actor:Self 00000001 00A3000D )
  710:  		Wait     0000000A 
  71C:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  734:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  748:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  75C:  		Return
  764:  	EndCaseGroup
  76C:      EndSwitch
  774:      Call     SetGoalToTarget 	( .Actor:Self )
  784:      Call     SetActorSpeed 	( .Actor:Self *Fixed[14.0] )
  798:      Call     RunToGoal   	( .Actor:Self 00000000 .False )
  7B0:      Wait     00000002 
                    Call     EnemyDamageTarget 	( .Actor:Self *Var[0] ~Flags:DamageType:NoOtherDamagePopups|StatusAlwaysHits 0000FFFF ~DebuffType:Dizzy:2:100` *VarC 00000020 )
            %End of second attack
            EndIf
            % Otherwise do 3 damage
            Else
                Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 00000003 00000020 )
            EndIf
            % Remove Golden Flame when coming back
            Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  7E4:  Switch  *Var[0] 
  7F0:  	CaseOR  ==  00000000 
  7FC:  	CaseOR  ==  00000002 
  808:  		Call     UseBattleCamPreset 	( 00000002 )
  818:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  834:  		Add  *Var[0]  00000028 
  844:  		Set  *Var[1]  00000000 
  854:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
  868:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  884:  		Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
  8A4:  		Add  *Var[0]  0000001E 
  8B4:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  8D0:  		Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  8F0:  		Add  *Var[0]  00000014 
  900:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  91C:  		Call     JumpToGoal  	( .Actor:Self 00000006 00000000 00000001 00000000 )
  93C:  		Call     SetAnimation 	( .Actor:Self 00000001 00A30001 )
  954:  		Wait     00000008 
  960:  		Call     YieldTurn   	( )
  96C:  		Call     8026F6EC ( FFFFFF81 )
  97C:  		SetConst  *Var[0]  00000001 
  98C:  		SetConst  *Var[1]  00A30004 
  99C:  		ExecWait DoReturnHome 
  9A8:  		Call     SetAnimation 	( .Actor:Self 00000001 00A30001 )
  9C0:  	EndCaseGroup
  9C8:  EndSwitch
  % Remove Golden Flame when coming back
  Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  9D0:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  9E4:  Call     UseIdleAnimation 	( .Actor:Self .True )
  9F8:  Return
  A00:  End
}

% Update this script flip back over the same turn....
@ $Script_80219F4C
{
    0:  Call  BindIdle      ( .Actor:Self $Script_Idle_8021A11C )
   14:  Call  GetActorVar   ( .Actor:Self 00000000 *Var0 )
   2C:  If  *Var0  ==  00000001
   3C:  	Call  SetActorVar       ( .Actor:Self 00000008 00000000 )
   54:  	Call  $Function_80218000    ( FFFFFFF6 00000000 0000000A 00000000 )
   70:  	Call  BindTakeTurn      ( .Actor:Self $Script_TakeTurn_8021B81C )
   84:  	Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_8021A560 )
   98:  	Call  SetPartEventBits  ( .Actor:Self 00000001 00001000 .False )
   B4:  Else
   BC:  	Call  SetActorVar       ( .Actor:Self 00000008 00000001 )
   D4:  	Call  SetTargetOffset   ( .Actor:Self 00000001 00000000 00000010 )
   F0:  	Call  8027D4C8  ( FFFFFF81 00000001 FFFFFFFF FFFFFFF7 )
  10C:  	Call  BindTakeTurn      ( .Actor:Self $Script_TakeTurn_Chan )
  120:  	Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_8021AAB8 )
  134:  	Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_80219E70 )
  14C:  	Call  SetActorFlagBits  ( .Actor:Self 00000800 .False )
  164:  	Call  SetPartEventBits  ( .Actor:Self 00000001 00001000 .True )
  180:  EndIf
  188:  Call  HPBarToHome       ( .Actor:Self )
  198:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  1AC:  Call  UseIdleAnimation  ( .Actor:Self .True )
  1C0:  Return
  1C8:  End
}

% Chan's Next Turn script: Update so certain dialouge doesn't play in modes where player's max hp is 5...

@ $Script_NextTurn_8021CD7C
{
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   28:  Call  GetBattlePhase    ( *Var0 )
   38:  Switch  *Var0
   44:  	Case  ==  0000000A
   50:  		Call  GetActorVar   ( .Actor:Self 00000000 *Var0 )
   68:  		If  *Var0  ==  00000000
   78:  			Call  UseBattleCamPreset    ( 00000002 )
   88:  			Call  MoveBattleCamOver (  10` )
   98:  			Call  ActorSpeak        ( 0002001F .Actor:Self 00000001 00A30004 00A30003 ) % Mario! Here comes Chan the man!
   B8:  			Call  SetActorVar       ( .Actor:Self 00000000 00000001 )
   D0:  		EndIf
   D8:  	Case  ==  0000000C
   E4:  		Call  GetActorVar   ( .Actor:Self 00000008 *Var0 )
   FC:  		If  *Var0  ==  00000002
  10C:  			BreakCase
  114:  		EndIf
  11C:  		Call  GetStatusFlags    ( .Actor:Self *Var0 )
  130:  		If  *Var0  &  ~Flags:StatusFlags:Sleep|Paralyze|Poison|Dizzy|Stone|Stop:A % 37100A
  140:  			BreakCase
  148:  		EndIf
  150:  		SetConst  *VarA  00A30004
  160:  		SetConst  *VarB  00A30003
  170:  		Call  GetActorVar   ( .Actor:Self 00000008 *Var0 )
  188:  		If  *Var0  ==  00000002
  198:  			SetConst  *VarA  00A30007
  1A8:  			SetConst  *VarB  00A30002
  1B8:  		EndIf
                % Skip these dialouge in max 5 HP modes otherwise they trigger way too often...
                If *GF_DangerMode == .False
  1C0:  		    Call  GetActorHP    ( .Actor:Self *Var0 )
  1D4:  		    Call  GetEnemyMaxHP ( .Actor:Self *Var1 )
  1E8:  		    Div   *Var1  00000002
  1F8:  		    If  *Var0  <=  *Var1
  208:  			    Call  GetActorVar   ( .Actor:Self 00000002 *Var0 )
  220:  			    If  *Var0  ==  00000000
  230:  				    Call  UseBattleCamPreset    ( 00000002 )
  240:  				    Call  MoveBattleCamOver (  10` )
  250:  				    Call  ActorSpeak        ( 00020021 .Actor:Self 00000001 *VarA *VarB ) % Hmmm... You have some skills.
  270:  				    Call  SetActorVar       ( .Actor:Self 00000002 00000001 )
  288:  				    BreakCase
  290:  			    EndIf
  298:  		    EndIf
  2A0:  		    Call  GetPlayerHP   ( *Var0 )
  2B0:  		    If  *Var0  <=  00000005
  2C0:  			    Call  UseBattleCamPreset    ( 00000002 )
  2D0:  			    Call  MoveBattleCamOver     (  10` )
  2E0:  			    Call  ActorSpeak    ( 00020022 .Actor:Self 00000001 *VarA *VarB ) % Mario, prepare to be finished!
  300:  			    BreakCase
  308:  		    EndIf
                EndIf
                % In All Sinks mode, play a dialouge once Chan gets down to 8 HP...
                If *GB_FileCodeMode == 8`
                    Call  GetActorHP    ( .Actor:Self *Var0 )
                    If *Var0 < 00000008
                        Call  UseBattleCamPreset    ( 00000002 )
  2D0:  			    Call  MoveBattleCamOver     (  10` )
  2E0:  			    Call  ActorSpeak    ( 002F0343 .Actor:Self 00000001 *VarA *VarB ) % Oof![Pause 5] My vitality is weakening...
                        BreakCase
                    EndIf
                EndIf
  310:  EndSwitch
  318:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  32C:  Call  UseIdleAnimation  ( .Actor:Self .True )
  340:  Return
  348:  End
}

% Update dialouge so desperation dialouge will play even if he's flipped over.
@ $Script_HandleEvent_8021D0CC
{
    0:  ExecWait  $Script_HandleEvent_8021AAB8
    C:  Call  GetLastEvent  ( .Actor:Self *Var0 )
   20:  Switch  *Var0
   2C:  	Case  ==  .Event:FlipTrigger % D
   38:  		Call  GetBattleFlags    ( *Var0 )
   48:  		If  *Var0  !&  00000020
   58:  			BreakCase
   60:  		EndIf
   68:  		Call  GetStatusFlags    ( .Actor:Self *Var0 )
   7C:  		If  *Var0  &  ~Flags:StatusFlags:Sleep|Paralyze|Poison|Dizzy|Shrink|Stone|Stop % 3F1000
   8C:  			BreakCase
   94:  		EndIf
   9C:  		Set   *Flag[00]  .False
   AC:  		Call  GetMenuSelection  ( *Var0 *Var1 *Var2 )
   C4:  		Switch  *Var0
   D0:  			CaseOR  ==  00000001
   DC:  			CaseOR  ==  00000000
   E8:  				Set   *Flag[00]  .True
   F8:  			EndCaseGroup
  100:  		EndSwitch
  108:  		If  *Flag[00]  ==  .False
  118:  			BreakCase
  120:  		EndIf
  128:  		Call  UseIdleAnimation  ( .Actor:Self .False )
  13C:  		Call  EnableIdleScript  ( .Actor:Self 00000000 )
  150:  		Wait  30`
  15C:  		Call  GetActorVar       ( .Actor:Self 00000008 *Var0 )
  174:  		If  *Var0  ==  00000002
  184:  			Call  GetActorVar   ( .Actor:Self 00000001 *Var0 )
  19C:  			Add   *Var0  00000001
  1AC:  			Switch  *Var0
  1B8:  				Case  ==  00000001
  1C4:  					Call  UseBattleCamPreset    ( 00000002 )
  1D4:  					Call  MoveBattleCamOver     (  10` )
                            % Play desperation mode in all sinks mode if low enough on health

                            % Otherwise play the normal script...
  1E4:  					Call  ActorSpeak    ( 00020020 .Actor:Self 00000001 00A30007 00A30002 ) % Ow... How dishonorable!
  204:  				Case  ==  00000002
  210:  				Case  ==  00000003
  21C:  					Set   *Var0  00000000
  22C:  			EndSwitch
  234:  			Call  SetActorVar   ( .Actor:Self 00000001 *Var0 )
  24C:  		EndIf
  254:  		Call  EnableIdleScript  ( .Actor:Self 00000001 )
  268:  		Call  UseIdleAnimation  ( .Actor:Self .True )
  27C:  EndSwitch
  284:  Return
  28C:  End
}

% Play a piece of dialouge if Chan is low enough on HP.
#new:Script $DesperationWarning_Chan
{
If *GB_FileCodeMode == 8`
    Call  GetActorHP    ( .Actor:Self *Var0 )
    If *Var0 < 00000008
        %Speaking seems to break it so just play a sound effect instead...
        %Call  ActorSpeak    ( 002F0343 .Actor:Self 00000001 00A30007 00A30002 ) % Oof! My vitality is weakening...
        BreakCase
    EndIf
EndIf
Return
End
}


%----Updates to Lee-----
@ $StatusTable_8021D3D0 % Lee's Status vulnerbilites (Normal)
{
	.Status:Normal      0`
	.Status:Default     0`
	.Status:Sleep      60`
	.Status:Poison     75`
	.Status:Frozen      0`
	.Status:Dizzy      75`
	.Status:Fear        0`
	.Status:Static     75`
	.Status:Paralyze   75`
	.Status:Shrink     75`
	.Status:Stop       75`
	.Status:DefaultTurnMod    0`
	.Status:SleepTurnMod     -1`
	.Status:PoisonTurnMod    -1`
	.Status:FrozenTurnMod     0`
	.Status:DizzyTurnMod     -1`
	.Status:FearTurnMod       0`
	.Status:StaticTurnMod    -1`
	.Status:ParalyzeTurnMod  -1`
	.Status:ShrinkTurnMod    -1`
	.Status:StopTurnMod      -1`
	.Status:End
}

/%
 $StatusTable_LeeHard %Immune to sleep in hard mode to prevent sleepy tea looping
{
	.Status:Normal      0`
	.Status:Default     0`
	.Status:Sleep      60`
	.Status:Poison     75`
	.Status:Frozen      0`
	.Status:Dizzy      75`
	.Status:Fear        0`
	.Status:Static     75`
	.Status:Paralyze   75`
	.Status:Shrink     75`
	.Status:Stop       75`
	.Status:DefaultTurnMod    0`
	.Status:SleepTurnMod     -1`
	.Status:PoisonTurnMod    -1`
	.Status:FrozenTurnMod     0`
	.Status:DizzyTurnMod     -1`
	.Status:FearTurnMod       0`
	.Status:StaticTurnMod    -1`
	.Status:ParalyzeTurnMod  -1`
	.Status:ShrinkTurnMod    -1`
	.Status:StopTurnMod      -1`
	.Status:End
}
%/

@ $StatusTable_802269D4 %Lee's Status vulnerbilites (Chai)
{
	.Status:Normal      0`
	.Status:Default     0`
	.Status:Sleep       0`
	.Status:Poison     100`
	.Status:Frozen      0`
	.Status:Dizzy       0`
	.Status:Fear        0`
	.Status:Static      0`
	.Status:Paralyze   80`
	.Status:Shrink     80`
	.Status:Stop       90`
	.Status:DefaultTurnMod    0`
	.Status:SleepTurnMod     -1`
	.Status:PoisonTurnMod     0`
	.Status:FrozenTurnMod     0`
	.Status:DizzyTurnMod     -1`
	.Status:FearTurnMod       0`
	.Status:StaticTurnMod     0`
	.Status:ParalyzeTurnMod   0`
	.Status:ShrinkTurnMod     0`
	.Status:StopTurnMod      -1`
	.Status:End
}

@ $DefenseTable_8021D3C4 %Lee's normal defense table
{
	.Element:Normal 00000000
	.Element:End
}

@ $DefenseTable_802259C0 %Lee's defense as Rush
%Same as Watt but added weakness to Throw aka Wind aka Aerial Attacks
%Also add a weakness to ice, to help teach the player "electric is weak to ice" for later...
{
	.Element:Normal 00000000
	.Element:Shock  00000063
    .Element:Throw  -2`
    .Element:Ice  -1`
	.Element:End
}

@ $DefenseTable_802269C8 %Lee's defense as Chai
% Weak to Electric and resistant to fire and water
{
	.Element:Normal 00000000
    .Element:Shock  -1`
    .Element:Water  1`
    .Element:Fire 1`
	.Element:End
}

@ $StatusTable_802259D4 % Lee's Status vulnerbilites (As Rush)
{
	.Status:Normal      0`
	.Status:Default     0`
	.Status:Sleep      50`
	.Status:Poison      0`
	.Status:Frozen      0`
	.Status:Dizzy      80`
	.Status:Fear        0`
	.Status:Static      0`
	.Status:Paralyze   0`
	.Status:Shrink     80`
	.Status:Stop       90`
	.Status:DefaultTurnMod    0`
	.Status:SleepTurnMod     -1`
	.Status:PoisonTurnMod     0`
	.Status:FrozenTurnMod     0`
	.Status:DizzyTurnMod     -1`
	.Status:FearTurnMod       0`
	.Status:StaticTurnMod     0`
	.Status:ParalyzeTurnMod   0`
	.Status:ShrinkTurnMod     0`
	.Status:StopTurnMod      -1`
	.Status:End
}

% Have to remake Lee's Status Table for hard mode to assure he can never be put to sleep
#new:StatusTable $StatusTable_LeeHard % Lee's Status vulnerbilites
{
	.Status:Normal      0`
	.Status:Default     0`
	.Status:Sleep       0`
	.Status:Poison      0`
	.Status:Frozen      0`
	.Status:Dizzy      80`
	.Status:Fear        0`
	.Status:Static      0`
	.Status:Paralyze   0`
	.Status:Shrink     80`
	.Status:Stop       90`
	.Status:DefaultTurnMod    0`
	.Status:SleepTurnMod     -1`
	.Status:PoisonTurnMod     0`
	.Status:FrozenTurnMod     0`
	.Status:DizzyTurnMod     -1`
	.Status:FearTurnMod       0`
	.Status:StaticTurnMod     0`
	.Status:ParalyzeTurnMod   0`
	.Status:ShrinkTurnMod     0`
	.Status:StopTurnMod      -1`
	.Status:End
}


% Shouldn't have to redefine these 
@ $LeeWatt % Lee while transformed as Rush
{
	% stats
    [MaxHP]        .HPLee %40`b in normal, 50 in hard % This is defined in $DefineEnemyPower on the "GameStartFunctions" patch
    [PowerBounce]  10`b
}

@ $LeeSushie
{
    [MaxHP]       .HPLee %40`b in normal, 50 in hard % This is defined in $DefineEnemyPower on the "GameStartFunctions" patch
    [PowerBounce]  10`b
}


@ $Lee  %Normal Lee
{
    [MaxHP]       .HPLee %40`b in normal, 50 in hard % This is defined in $DefineEnemyPower on the "GameStartFunctions" patch
    [PowerBounce]  10`b
}

% Remade new actors for Lee's hard fight

% Hard Lee, same as Lee but with more HP....
#new:Actor $Lee_hard
{
	% stats
	[Index]        7Eb
	[Level]         0`b
	[MaxHP]        .HPLeeHard
	[Coins]         0`b
	[Flags]       00000000
	[StatusTable] $StatusTable_LeeHard
	% ai
	[PartsCount]    1`s
	[PartsTable]  $PartsTable_8021D47C
	[Script]      $Script_Init_8021D4C8
	% move effectiveness
	[Escape]      100`b
	[Item]          0`b
	[AirLift]       0`b
	[Hurricane]     0`b % Bow's "Spook" as well
	[UpAndAway]     0`b
	[PowerBounce]  90`b
	[SpinSmash]     0`b % weight (0-4)
	% ui positions
	[Size]         36`b  36`b % width height
	[HealthBar]     0`b   0`b % dx dy
	[StatusTurn]  -10`b  20`b % dx dy
	[StatusIcon]   10`b  20`b % dx dy
}

#new:Actor $LeeWatt_hard
{
	% stats
	[Index]        84b
	[Level]         0`b
	[MaxHP]        .HPLeeHard
	[Coins]         0`b
	[Flags]       00000200
	[StatusTable] $StatusTable_LeeHard
	% ai
	[PartsCount]    2`s
	[PartsTable]  $PartsTable_80225A80
	[Script]      $Script_Init_Watt
	% move effectiveness
	[Escape]      100`b
	[Item]          0`b
	[AirLift]       0`b
	[Hurricane]     0`b % Bow's "Spook" as well
	[UpAndAway]     0`b
	[PowerBounce]  90`b
	[SpinSmash]     0`b % weight (0-4)
	% ui positions
	[Size]         34`b  28`b % width height
	[HealthBar]     0`b   0`b % dx dy
	[StatusTurn]  -10`b  20`b % dx dy
	[StatusIcon]   10`b  20`b % dx dy
}

#new:Actor $LeeSushie_hard
{
	% stats
	[Index]        85b
	[Level]         0`b
	[MaxHP]        .HPLeeHard
	[Coins]         0`b
	[Flags]       00000000
	[StatusTable] $StatusTable_802269D4
	% ai
	[PartsCount]    1`s
	[PartsTable]  $PartsTable_80226A80
	[Script]      $Script_Init_Sushie
	% move effectiveness
	[Escape]      100`b
	[Item]          0`b
	[AirLift]       0`b
	[Hurricane]     0`b % Bow's "Spook" as well
	[UpAndAway]     0`b
	[PowerBounce]  90`b
	[SpinSmash]     0`b % weight (0-4)
	% ui positions
	[Size]         37`b  26`b % width height
	[HealthBar]     0`b   0`b % dx dy
	[StatusTurn]  -10`b  20`b % dx dy
	[StatusIcon]   10`b  20`b % dx dy
}

% Special formations for hard mode Watt and Sushie
#new:SpecialFormation $SpecialFormation_RushHard
{
	$LeeWatt_hard $Vector3D_8021E940 00000000 00000000 00000000 00000000 00000000
}
#new:SpecialFormation $SpecialFormation_ChaiHard
{
	$LeeSushie_hard $Vector3D_8021E940 00000000 00000000 00000000 00000000 00000000
}


% Initizaling Lee, make stronger (and hopefully different attack pattern) Depending on if Challenge mode is on
@ $Script_Init_8021D4C8
{
    % No challenge mode check here for Lee here for now, might be easier to do the check within Lee's various attack scripts
        Call  BindTakeTurn  ( .Actor:Self $Script_TakeTurn_80229F9C )
   14:  Call  BindIdle      ( .Actor:Self $Script_Idle_8021D5B4 )
   28:  Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_8021D600 )
   3C:  Call  BindNextTurn  ( .Actor:Self $Script_NextTurn_8022A038 )
   50:  Call  SetActorVar   ( .Actor:Self 00000008 00000000 )
   68:  Call  SetActorVar   ( .Actor:Self 00000000 00000000 )
   80:  Thread
   88:  	Call  8026BF48  ( 00000001 )
   98:  	ExecWait  $Script_CopyPartner
   A4:  	Call  8026BF48  ( 00000000 )
   B4:  EndThread
   BC:  Call  $Function_802180D0 ( )
   C8:  Call  SetBattleFlagBits ( 00800000 .True )
   DC:  Return
   E4:  End
}

%Lee's Turn normally
@ $Script_TakeTurn_80229F9C
{
    0:  Call  GetActorVar   ( .Actor:Self 00000008 *Var0 )
   18:  Switch  *Var0
   24:  	Case  ==  00000000
   30:  		ExecWait  $Script_CopyPartner
   3C:  	Case  ==  00000001
   48:  	Case  ==  00000002
   54:  		ExecWait  $Script_FlyingTackle
                % If Hard mode is on, transform imediately after attacking...
                If *GF_HardMode == .True
                    ExecWait  $Script_CopyPartner
                EndIf
   60:  	Case  ==  00000003
   6C:  		Call  SetActorVar   ( .Actor:Self 00000008 00000002 )
   84:  EndSwitch
   8C:  Return
   94:  End
}

% Lee's Next Turn script: Updated to remove dialouge in max 5 HP runs...
@ $Script_NextTurn_8022A038
{
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   28:  Call  GetBattlePhase    ( *Var0 )
   38:  Switch  *Var0
   44:  	Case  ==  0000000C
   50:  		Call  GetStatusFlags    ( .Actor:Self *Var0 )
   64:  		If  *Var0  &  ~Flags:StatusFlags:Sleep|Paralyze|Poison|Dizzy|Shrink|Stone|Stop % 3F1000
   74:  			BreakCase
   7C:  		EndIf
                % Only play in modes where player's max HP isn't 5...
                If *GF_DangerMode == .False
   84:  		    Call  GetActorHP    ( .Actor:Self *Var0 )
   98:  		    Call  GetEnemyMaxHP ( .Actor:Self *Var1 )
   AC:  		    Div   *Var1  00000002
   BC:  		    If  *Var0  <=  *Var1
   CC:  			    Call  UseBattleCamPreset    ( 00000002 )
   DC:  			    Call  MoveBattleCamOver     (  10` )
   EC:  			    Call  GetActorVar   ( .Actor:Self 00000008 *Var0 )
  104:  			    If  *Var0  ==  00000001
  114:  				    Call  ActorSpeak    ( 00020028 .Actor:Enemy1 00000001 00A40006 00A40003 ) % Ooh... You are strong, I'll give you that.
  134:  			    Else
  13C:  				    Call  ActorSpeak    ( 00020028 .Actor:Self 00000001 00A40006 00A40003 ) % Ooh... You are strong, I'll give you that.
  15C:  			    EndIf
  164:  			    BreakCase
  16C:  		    EndIf
  174:  		    Call  GetPlayerHP   ( *Var0 )
  184:  		    If  *Var0  <=  00000005
  194:  			    Call  UseBattleCamPreset    ( 00000002 )
  1A4:  			    Call  MoveBattleCamOver     (  10` )
  1B4:  			    Call  ActorSpeak    ( 00020029 .Actor:Self 00000001 00A40006 00A40003 ) % Mario, now I will finish you.
  1D4:  			    BreakCase
  1DC:  		    EndIf
                EndIf
  1E4:  EndSwitch
  1EC:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  200:  Call  UseIdleAnimation  ( .Actor:Self .True )
  214:  Return
  21C:  End
}

% Used for when Lee Heals....
% Heals 1 HP in normal mode and 5 HP in hard mode
#new:Script $Script_LeeHeal
{
    % Play healing sound
    Thread
        1FC:  	    Wait  5`
        208:  	    Call  PlaySoundAtActor  ( .Actor:Self  0000206D )
        21C:  	    Call  PlaySoundAtActor  ( .Actor:Self  00000214 )
        23C:  	    Call  PlaySoundAtActor  ( .Actor:Self 0000025C )
        250:      EndThread
        % Heal 10 HP in challenge mode to make up for the fact I can't find a good place to make Lee heal normally
    If *GF_HardMode == .True % Challenge Mode
        % Lets crank it up in all sinks mode cause Bersker + Danger
        If *GB_FileCodeMode == 8` % Kitchen Sink mode
            Set *VarA 0000000F %15 HP
        Else
            Set *VarA 0000000A % 10 HP
        EndIf
    Else
    %In normal modes set to 1 HP to reflect how the heal works when the real Chai does it.
        Set *VarA 00000001 % 1 HP
    EndIf

    % Heal base on *VarA
    Thread
        260:  	      Call  8026BF48  ( 00000001 )
        270:  	      Call  HealActor ( .Actor:Self *VarA .False )
        288:  	      Call  8026BF48  ( 00000000 )
        2A0:      Call  WaitForBuffDone ( )
        EndThread
    Return
    End 
}

% Try incorporating a heal here since it doesn't work in transform
@ $Script_FlyingTackle
{
    % Determine damage
    Set *VarC 00000005
    % Add damage for hard mode
    If *GF_HardMode == .True
        Add *VarC 00000001
    EndIf
    % Add damage for All Sinks mode
    If *GB_FileCodeMode == 8`
        Add *VarC 00000001
    EndIf
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   28:  Call  SetActorVar       ( .Actor:Self 00000008 00000000 )
   40:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
   54:  Call  UseBattleCamPreset    ( 0000003F )
   64:  Call  BattleCamTargetActor  ( .Actor:Self )
   74:  Call  8024ECF8  ( FFFFFFFF 00000001 00000000 )
   8C:  Call  SetAnimation      ( .Actor:Self 00000001 00A40008 )
   A4:  Wait  20`
   B0:  Call  SetActorSounds    ( .Actor:Self .ActorSound:Jump 000002CB 00000000 )
   CC:  Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000001 00000010 )
   F0:  Switch  *Var0
   FC:  	CaseOR  ==  .HitResult:Miss % 6
  108:  	CaseOR  ==  .HitResult:Lucky % 5
  114:  		Set   *VarA  *Var0
  124:  		Call  UseBattleCamPreset    ( 00000002 )
  134:  		Call  MoveBattleCamOver (  20` )
  144:  		Call  SetAnimation      ( .Actor:Self 00000001 00A40009 )
  15C:  		Call  SetGoalToTarget   ( .Actor:Self )
  16C:  		Call  AddGoalPos        ( .Actor:Self  -100`  0`  0` )
  188:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.3] )
  19C:  		Call  JumpToGoal        ( .Actor:Self  17` .False .True .False )
  1BC:  		If  *VarA  ==  .HitResult:Lucky % 5
  1CC:  			Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
  1F0:  		EndIf
  1F8:  		Wait  10`
  204:  		Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  220:  		Call  SetActorPos       ( .Actor:Self *Var0  0` *Var2 )
  23C:  		Call  SetAnimation      ( .Actor:Self 00000001 00A40002 )
  254:  		Call  ResetActorSounds  ( .Actor:Self .ActorSound:Jump )
  268:  		Wait  15`
  274:  		Call  YieldTurn ( )
  280:  		Call  SetActorYaw       ( .Actor:Self  180` )
  294:  		Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  2B0:  		ExecWait  $Script_8021D5C4
  2BC:  		Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
  2D4:  		Call  SetActorYaw       ( .Actor:Self  0` )
  2E8:  		Call  EnableIdleScript  ( .Actor:Self 00000001 )
  2FC:  		Call  UseIdleAnimation  ( .Actor:Self .True )
  310:  		Return
  318:  	EndCaseGroup
  320:  EndSwitch
  328:  Call  SetAnimation      ( .Actor:Self 00000001 00A40009 )
  340:  Call  SetGoalToTarget   ( .Actor:Self )
  350:  Call  GetStatusFlags    ( .Actor:Self *VarA )
  364:  If  *VarA  &  ~Flags:StatusFlags:Shrink % 80000
  374:  	Call  AddGoalPos    ( .Actor:Self *Fixed[4.0] *Fixed[-6.0]  0` )
  390:  Else
  398:  	Call  AddGoalPos    ( .Actor:Self  10`  -15`  0` )
  3B4:  EndIf
  3BC:  Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.3] )
  3D0:  Call  JumpToGoal        ( .Actor:Self  12` .False .True .False )
  3F0:  Wait  2`
  3FC:  Call  SetGoalToTarget   ( .Actor:Self )
  40C:  Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000000 *VarC 00000020 )
  434:  Switch  *Var0
  440:  	CaseOR  ==  .HitResult:Hit % 0
  44C:  	CaseOR  ==  .HitResult:QuakeImmune % 2
  458:  		Call  UseBattleCamPreset    ( 00000002 )
  468:  		Call  ResetActorSounds      ( .Actor:Self .ActorSound:Jump )
  47C:  		Call  SetAnimation  ( .Actor:Self 00000001 00A4000A )
  494:  		Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  4B0:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.5] )
  4C4:  		Add   *Var0  0000001E
  4D4:  		Call  SetGoalPos    ( .Actor:Self *Var0  0` *Var2 )
  4F0:  		Call  JumpToGoal    ( .Actor:Self  20` .False .True .False )
  510:  		Add   *Var0  00000014
  520:  		Call  SetGoalPos    ( .Actor:Self *Var0  0` *Var2 )
  53C:  		Call  JumpToGoal    ( .Actor:Self  10` .False .True .False )
  55C:  		Wait  10`
  568:  		Call  YieldTurn ( )
  574:  		ExecWait  $Script_8021D5C4
  580:  	EndCaseGroup
  588:  EndSwitch

  590:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  5A4:  Call  UseIdleAnimation  ( .Actor:Self .True )
  5B8:  Return
  5C0:  End
}

% Update the Copy partner script to get "special" versions of "Sushie and Watt" in hard mode
@ $Script_CopyPartner
{
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   28:  Call  UseBattleCamPreset    ( 0000000E )
   38:  Call  BattleCamTargetActor  ( .Actor:Self )
   48:  Call  MoveBattleCamOver (  15` )
   58:  Wait  15`
        If *GF_HardMode == .True
            % Do nothing (Was orginally going to heal here but it's buggy)
            Wait  20`
        Else
            Call  ActorSpeak        ( 00020027 .Actor:Self 00000001 00A40006 00A40003 ) % I bet you've never seen a move like this before!
            Wait  10`
        EndIf
   90:  Call  PlaySoundAtActor  ( .Actor:Self 000020B8 )
   A4:  Call  SetAnimation      ( .Actor:Self 00000001 00A40007 )
   BC:  Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
   D8:  Call  GetStatusFlags    ( .Actor:Self *VarA )
   EC:  If  *VarA  &  ~Flags:StatusFlags:Shrink % 80000
   FC:  	Add   *Var1  00000008
  10C:  	SetF  *Var3  *Fixed[0.4]
  11C:  Else
  124:  	Add   *Var1  00000014
  134:  	SetF  *Var3  *Fixed[1.0]
  144:  EndIf
  14C:  Call  PlayEffect    ( 00000013 00000001 *Var0 *Var1 *Var2 *Var3 00000028 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  190:  Call  $Function_8021973C ( )
  19C:  Call  MakeLerp  ( 00000000 000000C8 00000014 .Easing:Linear )
  1B8:  Label  0
  1C4:  Call  UpdateLerp ( )
  1D0:  Call  $Function_80219780    ( *Var0 )
  1E0:  Wait  1`
  1EC:  If  *Var1  ==  00000001
  1FC:  	Goto  0
  208:  EndIf
  210:  Wait  10`
  21C:  Call  $Function_GetPartner  ( *Var5 *Var6 )
            Call  $Function_80218100 ( )
  23C:  Call  $Function_80219824    ( *Var5 )
  24C:      Switch  *Var5
  258:  	    Case  ==  00000001
  264:  		    Call  SummonEnemy   ( $SpecialFormation_80220524 00000000 )
  278:  	    Case  ==  00000002
  284:  		    Call  SummonEnemy   ( $SpecialFormation_80222274 00000000 )
  298:  	    Case  ==  00000003
  2A4:  		    Call  SummonEnemy   ( $SpecialFormation_8022336C 00000000 )
  2B8:  	    Case  ==  00000004
  2C4:  		    Call  SummonEnemy   ( $SpecialFormation_802243F4 00000000 )
  2D8:  	    Case  ==  00000009
  2E4:  		    Call  SummonEnemy   ( $SpecialFormation_80225958 00000000 )
  2F8:  	    Case  ==  00000006
  304:  		    Call  SummonEnemy   ( $SpecialFormation_80226960 00000000 )
  318:  	    Case  ==  00000007
  324:  		    Call  SummonEnemy   ( $SpecialFormation_802283F0 00000000 )
  338:  	    Case  ==  00000008
  344:  		    Call  SummonEnemy   ( $SpecialFormation_8022972C 00000000 )
  358:      EndSwitch
  360:  Set   *VarA  *Var0
  370:  Call  CopyStatusEffects ( .Actor:Self *VarA )
  384:  Call  PlaySoundAtActor  ( .Actor:Self .Sound:SmokeBurst )
  398:  Thread
  3A0:  	Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  3BC:  	Add   *Var1  00000003
  3CC:  	Add   *Var2  00000005
  3DC:  	Loop  00000003
  3E8:  		Call  PlayEffect    ( ~FX:BigSmokePuff *Var0 *Var1 *Var2 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  42C:  		Wait  3`
  438:  	EndLoop
  440:  EndThread
  448:  Wait  5`
  454:  Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  470:  Call  SetActorPos   ( *VarA *Var0 *Var1 *Var2 )
  48C:  Call  SetPartFlagBits   ( .Actor:Self 00000001 00020001 .True )
  4A8:  Call  SetPartFlagBits   ( .Actor:Self 00000001 00800000 .False )
  4C4:  Call  SetActorFlagBits  ( .Actor:Self 00400004 .True )
  4DC:  Call  GetActorHP    ( .Actor:Self *Var0 )
  4F0:  Call  SetEnemyHP    ( *VarA *Var0 )
  504:  Call  CopyBuffs     ( .Actor:Self *VarA )
  518:  Call  GetOwnerID    ( *Var0 )
  528:  Call  SetActorVar   ( *VarA 00000000 *Var0 )
  540:  Call  SetActorVar   ( *VarA 00000001 *Var6 )
  558:  Wait  20`
  564:  Call  UseBattleCamPreset    ( 00000002 )
  574:  Call  MoveBattleCamOver (  20` )
  584:  Thread
  58C:  	Call  MakeLerp  ( 000000C8 00000000 00000014 .Easing:Linear )
  5A8:  	Label  1
  5B4:  	Call  UpdateLerp ( )
  5C0:  	Call  $Function_80219780    ( *Var0 )
  5D0:  	Wait  1`
  5DC:  	If  *Var1  ==  00000001
  5EC:  		Goto  1
  5F8:  	EndIf
  600:  EndThread
  608:  Call  SetActorSounds    ( *VarA .ActorSound:Jump 00000000 00000000 )
  624:  Switch  *Var5
  630:  	Case  ==  00000008
  63C:  		Call  GetActorPos   ( *VarA *Var0 *Var1 *Var2 )
  658:  		Call  SetActorJumpGravity   ( *VarA *Fixed[0.01] )
  66C:  		Call  SetGoalPos    ( *VarA *Var0  10` *Var2 )
  688:  		Call  JumpToGoal    ( *VarA  10` .False .False .False )
  6A8:  		Wait  10`
  6B4:  	CaseOR  ==  00000006
  6C0:  	CaseOR  ==  00000009
  6CC:  	CaseOR  ==  00000004
  6D8:  		Call  GetActorPos   ( *VarA *Var0 *Var1 *Var2 )
  6F4:  		Call  SetActorJumpGravity   ( *VarA *Fixed[0.01] )
  708:  		Call  SetGoalPos    ( *VarA *Var0  30` *Var2 )
  724:  		Call  JumpToGoal    ( *VarA  20` .False .False .False )
  744:  	EndCaseGroup
  74C:  EndSwitch
  754:  Call  GetActorPos   ( *VarA *Var0 *Var1 *Var2 )
  770:  Call  ForceHomePos  ( *VarA *Var0 *Var1 *Var2 )
  78C:  Call  HPBarToHome   ( *VarA )
  79C:  Call  ResetActorSounds  ( *VarA .ActorSound:Jump )
  7B0:  Wait  20`
  7BC:  Call  SetActorPos   ( .Actor:Self  0`  -1000`  0` )
  7D8:  Call  ForceHomePos  ( .Actor:Self  0`  -1000`  0` )
  7F4:  Call  HPBarToHome   ( .Actor:Self )
  804:  Call  SetActorVar   ( .Actor:Self 00000008 00000001 )
  81C:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  830:  Call  UseIdleAnimation  ( .Actor:Self .True )

  844:  Return
  84C:  End
}

% I've too far to bother getting this to work, if Lee's HP doesn't change between normal and hard, so be it.
%I'll find other ways to artifically give him more health.
/%
#new:Function $Function_80219824_hard
{
    0:  ADDIU     SP, SP, FFE8
    4:  SW        S0, 10 (SP)
    8:  COPY      S0, A0
    C:  SW        RA, 14 (SP)
   10:  LW        V0, C (S0)
   14:  JAL       ~Func:get_variable
   18:  LW        A1, 0 (V0)
   1C:  LW        A0, 148 (S0)
   20:  JAL       ~Func:get_actor
   24:  COPY      S0, V0
   28:  COPY      V1, V0
   2C:  ADDIU     S0, S0, FFFF
   30:  SLTIU     V0, S0, 9
   34:  BEQ       V0, R0, .oB0
   38:  CLEAR     A0
   3C:  SLL       V0, S0, 2
   40:  LTW       V0, V0 ($JumpTable_80232B40)
   4C:  JR        V0
   50:  NOP
	% LBL: from $JumpTable_80232B40 , entry 0`
   54:  LA        A0, $SpecialFormation_80220524
   58:  BEQ       R0, R0, .oB0
   5C:  RESERVED
	% LBL: from $JumpTable_80232B40 , entry 1`
   60:  LA        A0, $SpecialFormation_80222274
   64:  BEQ       R0, R0, .oB0
   68:  RESERVED
	% LBL: from $JumpTable_80232B40 , entry 2`
   6C:  LA        A0, $SpecialFormation_8022336C
   70:  BEQ       R0, R0, .oB0
   74:  RESERVED
	% LBL: from $JumpTable_80232B40 , entry 3`
   78:  LA        A0, $SpecialFormation_802243F4
   7C:  BEQ       R0, R0, .oB0
   80:  RESERVED
	% LBL: from $JumpTable_80232B40 , entry 8`
   84:  LA        A0, $SpecialFormation_80225958
   88:  BEQ       R0, R0, .oB0
   8C:  RESERVED
	% LBL: from $JumpTable_80232B40 , entry 5`
   90:  LA        A0, $SpecialFormation_RushHard
   94:  BEQ       R0, R0, .oB0
   98:  RESERVED
	% LBL: from $JumpTable_80232B40 , entry 6`
   9C:  LA        A0, $SpecialFormation_ChaiHard
   A0:  BEQ       R0, R0, .oB0
   A4:  RESERVED
	% LBL: from $JumpTable_80232B40 , entry 7`
   A8:  LA        A0, $SpecialFormation_8022972C
	% LBL: from $JumpTable_80232B40 , entry 4`
        .oB0
   B0:  LB        V1, 1F1 (V1)
   B4:  ADDIU     V1, V1, A
   B8:  SW        V1, 8 (A0)
   BC:  LW        RA, 14 (SP)
   C0:  LW        S0, 10 (SP)
   C4:  LI        V0, 2
   C8:  JR        RA
   CC:  ADDIU     SP, SP, 18
}
%/

% Lee's Turn as Rush
@ $Script_TakeTurn_80226004
{
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  UseBattleCamPreset    ( 00000013 )
   24:  Call  GetActorPos       ( .Actor:Player *Var0 *Var1 *Var2 )
   40:  Call  SetBattleCamTarget    ( *Var0 *Var1 *Var2 )
   58:  Call  SetBattleCamZoom  (  350` )
   68:  Call  SetBattleCamOffsetZ   (  40` )
   78:  Call  MoveBattleCamOver (  80` )
   88:  Call  8024ECF8  ( FFFFFFFF 00000001 00000000 )
   A0:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
   B4:  Call  SetGoalToTarget   ( .Actor:Self )
   C4:  Call  SetAnimation      ( .Actor:Self 00000001 000E0003 )
   DC:  Call  $Function_802196F0    ( 00000001 )
   EC:  Call  AddGoalPos        ( .Actor:Self  15`  -10`  5` )
  108:  Call  FlyToGoal ( .Actor:Self  30`  0` .Easing:CosInOut )
  124:  Call  SetAnimation      ( .Actor:Self 00000001 000E0001 )
  13C:  Call  $Function_802196F0    ( 00000000 )
  14C:  Wait  5`
  158:  Call  $Function_80219658    ( 00000000 )
  168:  Call  AddGoalPos        ( .Actor:Self  25`  20`  0` )
  184:  Call  FlyToGoal ( .Actor:Self  15`  -20` .Easing:CosInOut )
  1A0:  Call  SetAnimation      ( .Actor:Self 00000001 000E0005 )
  1B8:  Call  SetGoalToTarget   ( .Actor:Self )
  1C8:  Call  FlyToGoal ( .Actor:Self  5`  0` .Easing:CosInOut )
  1E4:  Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000001 00000010 )
  208:  Switch  *Var0
  214:  	CaseOR  ==  .HitResult:Miss % 6
  220:  	CaseOR  ==  .HitResult:Lucky % 5
  22C:  		Set   *VarA  *Var0
  23C:  		Thread
  244:  			Wait  5`
  250:  			Call  SetAnimation  ( .Actor:Self 00000001 000E0001 )
  268:  		EndThread
  270:  		Call  SetGoalToTarget   ( .Actor:Self )
  280:  		Call  AddGoalPos        ( .Actor:Self  -40`  10`  0` )
  29C:  		Call  FlyToGoal ( .Actor:Self  10`  -20` .Easing:QuadraticOut )
  2B8:  		If  *VarA  ==  .HitResult:Lucky % 5
  2C8:  			Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
  2EC:  		EndIf
  2F4:  		Call  $Function_802196A4    ( 00000001 )
  304:  		Call  $Function_80219658    ( 00000001 )
  314:  		Wait  20`
  320:  		Call  UseBattleCamPreset    ( 00000002 )
  330:  		Call  YieldTurn ( )
  33C:  		Call  SetGoalToHome     ( .Actor:Self )
  34C:  		Call  SetAnimation      ( .Actor:Self 00000001 000E0003 )
  364:  		Call  FlyToGoal ( .Actor:Self  30`  0` .Easing:CosInOut )
  380:  		Call  SetAnimation      ( .Actor:Self 00000001 000E0001 )
  398:  		Call  UseIdleAnimation  ( .Actor:Self .True )
  3AC:  		Return
  3B4:  	EndCaseGroup
  3BC:  EndSwitch
  3C4:  Call  $Function_802196A4    ( 00000000 )
  3D4:  Set   *VarA  00000028
  3E4:  Call  AddBattleCamZoom  (  -75` )
  3F4:  Call  MoveBattleCamOver ( *VarA )
  404:  Call  8024ECF8  ( 00000000 00000000 00000001 )
  41C:  Call  PlaySoundAtActor  ( .Actor:Self 00000289 )
  430:  Call  GetStatusFlags    ( .Actor:Self *Var0 )
  444:  If  *Var0  &  ~Flags:StatusFlags:Shrink % 80000
  454:  	Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  470:  	Add   *Var1  00000004
  480:  	Call  PlayEffect    ( ~FX:RadialFlowIn:ElectricalWaves *Var0 *Var1 *Var2 *Fixed[0.52] *VarA 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  4C4:  Else
  4CC:  	Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  4E8:  	Add   *Var1  0000000C
  4F8:  	Call  PlayEffect    ( ~FX:RadialFlowIn:ElectricalWaves *Var0 *Var1 *Var2 *Fixed[1.3] *VarA 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  53C:  EndIf
  544:  Call  $Function_8021973C ( )
  550:  Set   *Var9  00000000
  560:  Call  SetAnimation  ( .Actor:Self 00000001 000E0006 )
  578:  Loop  *VarA
  584:  	Add   *Var9  00000003
  594:  	If  *Var9  >  000000C8
  5A4:  		Set   *Var9  000000C8
  5B4:  	EndIf
  5BC:  	Call  $Function_80219780    ( *Var9 )
  5CC:  	Wait  1`
  5D8:  EndLoop
  5E0:  Call  SetAnimation      ( .Actor:Self 00000001 000E0001 )
  5F8:  Call  8026EA7C  ( FFFFFF81 00000001 00000009 )
  610:  Call  AddBattleCamZoom  (  75` )
  620:  Call  MoveBattleCamOver (  5` )
  630:  Thread
  638:  	Wait  2`
  644:  	Call  $Function_80219780    ( 00000000 )
  654:  EndThread
        % Determine Base power of Attack and Store as *Var8
        % First determine's partner's rank...
        Call  GetActorVar   ( .Actor:Self 00000001 *Var9 )
        Switch *Var9
            Case  ==  00000000
                Set *Var8 00000002
            Case  ==  00000001
                Set *Var8 00000003
            Case  ==  00000002
                Set *Var8 00000004
        EndSwitch
        % Next determine if challenge mode (or any other power mutipliers) are on and add accordingly
        % If Challenge mode, add 2 to attack
        If *GF_HardMode == .True
            Add *Var8 00000002
            %Add extra attack for normal and super rank
            Switch *Var9
            Case  ==  00000000
                Add *Var8 00000002
            Case  ==  00000001
                Add *Var8 00000001
        EndSwitch
        EndIf
        % Next determine if challenge mode (or any other power mutipliers) are on and add accordingly
        % Add extra damage for Kitchen Sink mode
        If *GB_FileCodeMode == 8`
            Add *Var8 00000002
        EndIf
        % Now run rest of attack with *Var8 as default attack strength

        % Call a Random Int to determine if Attack will be Fire, Electric, or Ice
        Call  RandInt   ( 000003E8 *Var0 )
  100:  If  *Var0  <  0000012C % If pass the random number check, do Electric Attack
                Wait  2`
                Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:IgnoreDefense|Electric 0000FFFF 00000000 *Var8 00000020 )
            Goto  0 % %Skip to the End (Label 0) after determining which attack is done
        Else 
            %Do another random Int for Ice Check
            Call  RandInt   ( 000003E8 *Var0 )
            If *Var0  <  0000012C % If pass the random number check, do Ice Attack
                Call  GetActorVar   ( .Actor:Self 00000001 *Var9 )
    68C:  		Wait  2`
                Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Ice 0000FFFF 00000000 *Var8 00000020 )
                Call	BoostAttack		( .Actor:Player FFFFFFFF ) % Boost Mario's Attack by Negative 1
                Wait  10`
                Goto  0 % %Skip to the End (Label 0) after determining which attack is done
            % Otherwise do the Fire Attack    
            Else
                %In hard mode Make the first attack to 3 and the second attack does 2 less than a normal strike
                If *GF_HardMode == .True
                    Add *Var8 -2
                    %Resume normal attack call
                    Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Fire 0000FFFF 00000000 00000003 00000020 )
                    Wait  7`
                    Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Fire 0000FFFF 00000000 *Var8 00000020 )
                    Call  GetActorVar   ( .Actor:Self 00000001 *Var9 )
                    Goto  0
                % Otherwise, first Attack does 2 and second attack does 1 less than a normal strike
                Else
                    %Start by subtracting 1 from *Var8 since fire is divided between two attacks
                    Add *Var8 -1
                    %Resume normal attack call
                    Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Fire 0000FFFF 00000000 00000002 00000020 )
                    Wait  7`
                    Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Fire 0000FFFF 00000000 *Var8 00000020 )
                    Call  GetActorVar   ( .Actor:Self 00000001 *Var9 )
                    Goto  0
                EndIf
            EndIf
  124:  EndIf
        Label  0
  748:  Switch  *Var0
  754:  	CaseOR  ==  .HitResult:Hit % 0
  760:  	CaseOR  ==  .HitResult:QuakeImmune % 2
  76C:  		Call  UseBattleCamPreset    ( 00000002 )
  77C:  		Call  $Function_802196A4    ( 00000001 )
  78C:  		Call  $Function_80219658    ( 00000001 )
  79C:  		Call  AddGoalPos    ( .Actor:Self  25`  10`  0` )
  7B8:  		Call  FlyToGoal     ( .Actor:Self  15`  -10` .Easing:CosInOut )
  7D4:  		Wait  15`
  7E0:  		Call  YieldTurn ( )
  7EC:  		Call  SetGoalToHome ( .Actor:Self )
  7FC:  		Call  SetAnimation  ( .Actor:Self 00000001 000E0003 )
  814:  		Call  FlyToGoal     ( .Actor:Self  30`  0` .Easing:CosInOut )
  830:  		Call  SetAnimation  ( .Actor:Self 00000001 000E0001 )
  848:  	EndCaseGroup
  850:  EndSwitch
  858:  Call  UseIdleAnimation  ( .Actor:Self .True )
  86C:  Return
  874:  End
}

%Lee's Int script as Chai. Run one of two Take Turn functions depending on "Mod's difficulty"
@ $Script_Init_Sushie
{
        Call  BindTakeTurn  ( .Actor:Self $Script_TakeTurn_802270BC ) % Hard mode differences are handled right in the take turn script (and new healing script) now
   14:  Call  BindIdle      ( .Actor:Self $Script_Idle_80226B44 )
   28:  Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_80226B54 )
   3C:  Call  BindNextTurn  ( .Actor:Self $Script_NextTurn_8022831C )
   50:  Call  SetActorVar   ( .Actor:Self 00000002 00000001 )
   68:  Return
   70:  End
}

%Lee's turn as Chai...
@ $Script_TakeTurn_802270BC
{
    
    
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   28:  Call  UseBattleCamPreset    ( 0000003F )
   38:  Call  BattleCamTargetActor  ( .Actor:Self )
   48:  Call  8024ECF8  ( FFFFFFFF 00000001 00000000 )
   60:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
   74:  Call  SetGoalToTarget   ( .Actor:Self )
   84:  Call  AddGoalPos        ( .Actor:Self  70`  0`  0` )
   A0:  Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
   BC:  Call  GetGoalPos        ( .Actor:Self *Var3 *Var4 *Var5 )
   D8:  Sub   *Var3  *Var0
   E8:  Div   *Var3  *Fixed[3.0]
   F8:  Set   *VarA  *Var3
  108:  If  *VarA  <  00000000
  118:  	Mul   *VarA  FFFFFFFF
  128:  EndIf
  130:  Call  MoveBattleCamOver ( *VarA )
  140:  Call  SetAnimation      ( .Actor:Self 00000001 000F0003 )
  158:  Call  RunToGoal ( .Actor:Self *VarA .False )
  170:  Call  SetAnimation      ( .Actor:Self 00000001 000F0001 )
  188:  Wait  10`
  194:  Call  UseBattleCamPreset    ( 00000008 )
  1A4:  Call  BattleCamTargetActor  ( .Actor:Self )
  1B4:  Call  AddBattleCamZoom  (  -50` )
  1C4:  Call  MoveBattleCamOver (  30` )
  1D4:  Call  8024ECF8  ( 00000001 00000001 00000001 )
  1EC:  Call  SetAnimation      ( .Actor:Self 00000001 000F0004 )
  204:  Wait  15`
  210:  Call  SetAnimation      ( .Actor:Self 00000001 000F0008 )
  228:  Wait  15`
  234:  Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000001 00000010 )
  258:  Switch  *Var0
  264:  	CaseOR  ==  .HitResult:Miss % 6
  270:  	CaseOR  ==  .HitResult:Lucky % 5
  27C:  		Set   *VarA  *Var0
  28C:  		Call  UseBattleCamPreset    ( 00000002 )
  29C:  		Call  MoveBattleCamOver     (  20` )
  2AC:  		Call  SetAnimation  ( .Actor:Self 00000001 000F0005 )
  2C4:  		Thread
  2CC:  			Call  SetActorRotationOffset    ( .Actor:Self 00000000 0000000C 00000000 )
  2E8:  			Set   *Var0  00000000
  2F8:  			Loop  0000000A
  304:  				Add   *Var0  00000024
  314:  				Call  SetActorRotation  ( .Actor:Self 00000000 00000000 *Var0 )
  330:  				Wait  1`
  33C:  			EndLoop
  344:  			Call  SetActorRotation  ( .Actor:Self 00000000 00000000 00000014 )
  360:  		EndThread
  368:  		Thread
  370:  			Call  GetActorVar   ( .Actor:Self 00000001 *Var0 )
  388:  			Switch  *Var0
  394:  				Case  ==  00000000
  3A0:  					Wait  13`
  3AC:  					Call  SetPartScale  ( .Actor:Self 00000001 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  3CC:  					Wait  1`
  3D8:  					Call  SetPartScale  ( .Actor:Self 00000001 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  3F8:  					Wait  1`
  404:  					Call  SetPartScale  ( .Actor:Self 00000001 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  424:  					Wait  1`
  430:  					Call  SetPartScale  ( .Actor:Self 00000001 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  450:  					Wait  1`
  45C:  					Call  SetPartScale  ( .Actor:Self 00000001 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  47C:  				Case  ==  00000001
  488:  					Wait  13`
  494:  					Call  SetPartScale  ( .Actor:Self 00000001 *Fixed[1.05] *Fixed[1.05] *Fixed[1.05] )
  4B4:  					Wait  1`
  4C0:  					Call  SetPartScale  ( .Actor:Self 00000001 *Fixed[1.1] *Fixed[1.1] *Fixed[1.1] )
  4E0:  					Wait  1`
  4EC:  					Call  SetPartScale  ( .Actor:Self 00000001 *Fixed[1.15] *Fixed[1.15] *Fixed[1.15] )
  50C:  					Wait  1`
  518:  					Call  SetPartScale  ( .Actor:Self 00000001 *Fixed[1.2] *Fixed[1.2] *Fixed[1.2] )
  538:  					Wait  1`
  544:  					Call  SetPartScale  ( .Actor:Self 00000001 *Fixed[1.25] *Fixed[1.25] *Fixed[1.25] )
  564:  				Case  ==  00000002
  570:  					Wait  13`
  57C:  					Call  SetPartScale  ( .Actor:Self 00000001 *Fixed[1.1] *Fixed[1.1] *Fixed[1.1] )
  59C:  					Wait  1`
  5A8:  					Call  SetPartScale  ( .Actor:Self 00000001 *Fixed[1.2] *Fixed[1.2] *Fixed[1.2] )
  5C8:  					Wait  1`
  5D4:  					Call  SetPartScale  ( .Actor:Self 00000001 *Fixed[1.3] *Fixed[1.3] *Fixed[1.3] )
  5F4:  					Wait  1`
  600:  					Call  SetPartScale  ( .Actor:Self 00000001 *Fixed[1.4] *Fixed[1.4] *Fixed[1.4] )
  620:  					Wait  1`
  62C:  					Call  SetPartScale  ( .Actor:Self 00000001 *Fixed[1.5] *Fixed[1.5] *Fixed[1.5] )
  64C:  			EndSwitch
  654:  		EndThread
  65C:  		Call  SetActorSounds    ( .Actor:Self .ActorSound:Jump 00000000 00000000 )
  678:  		Call  PlaySoundAtActor  ( .Actor:Self 00002034 )
  68C:  		Call  SetGoalToTarget   ( .Actor:Self )
  69C:  		Thread
  6A4:  			Call  SetAnimation  ( .Actor:Self 00000001 000F0005 )
  6BC:  			Wait  10`
  6C8:  			Call  SetAnimation  ( .Actor:Self 00000001 000F0006 )
  6E0:  		EndThread
  6E8:  		Call  SetActorJumpGravity       ( .Actor:Self *Fixed[1.0] )
  6FC:  		Call  JumpToGoal    ( .Actor:Self  20` .False .True .False )
  71C:  		Call  SetAnimation  ( .Actor:Self 00000001 000F0007 )
  734:  		Call  SetActorRotation  ( .Actor:Self 00000000 00000000 00000000 )
  750:  		Call  SetActorRotationOffset    ( .Actor:Self 00000000 00000000 00000000 )
  76C:  		Call  SetPartScale  ( .Actor:Self 00000001 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  78C:  		Call  LandJump      ( .Actor:Self )
  79C:  		Call  PlaySoundAtActor  ( .Actor:Self 0000029A )
  7B0:  		Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  7CC:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  7E8:  		Call  AddGoalPos    ( .Actor:Self  -15`  0`  0` )
  804:  		Call  JumpToGoal    ( .Actor:Self  20` .False .True .False )
  824:  		Call  PlaySoundAtActor  ( .Actor:Self 0000029A )
  838:  		Call  AddGoalPos    ( .Actor:Self  -10`  0`  0` )
  854:  		Call  JumpToGoal    ( .Actor:Self  10` .False .True .False )
  874:  		Call  PlaySoundAtActor  ( .Actor:Self 0000029A )
  888:  		If  *VarA  ==  .HitResult:Lucky % 5
  898:  			Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
  8BC:  		EndIf
  8C4:  		Wait  10`
  8D0:  		Call  UseBattleCamPreset    ( 00000002 )
  8E0:  		Call  YieldTurn ( )
  8EC:  		Call  SetAnimation      ( .Actor:Self 00000001 000F0003 )
  904:  		Call  SetGoalToHome     ( .Actor:Self )
  914:  		Call  SetActorSpeed     ( .Actor:Self *Fixed[4.0] )
  928:  		Call  RunToGoal ( .Actor:Self  0` .False )
  940:  		Call  EnableIdleScript  ( .Actor:Self 00000001 )
  954:  		Call  UseIdleAnimation  ( .Actor:Self .True )
  968:  		Return
  970:  	EndCaseGroup
  978:  EndSwitch
  980:  Call  UseBattleCamPreset    ( 00000002 )
  990:  Call  MoveBattleCamOver     (  10` )
  9A0:  Call  SetAnimation  ( .Actor:Self 00000001 000F0005 )
  9B8:  Thread
  9C0:  	Call  SetActorRotationOffset    ( .Actor:Self 00000000 0000000C 00000000 )
  9DC:  	Set   *Var0  00000000
  9EC:  	Loop  0000000A
  9F8:  		Add   *Var0  00000024
  A08:  		Call  SetActorRotation  ( .Actor:Self 00000000 00000000 *Var0 )
  A24:  		Wait  1`
  A30:  	EndLoop
  A38:  	Call  SetActorRotation  ( .Actor:Self 00000000 00000000 00000014 )
  A54:  EndThread
  A5C:  Thread
  A64:  	Call  GetActorVar   ( .Actor:Self 00000001 *Var0 )
  A7C:  	Switch  *Var0
  A88:  		Case  ==  00000000
  A94:  			Wait  13`
  AA0:  			Call  SetPartScale  ( .Actor:Self 00000001 *Fixed[1.1] *Fixed[1.1] *Fixed[1.1] )
  AC0:  			Wait  1`
  ACC:  			Call  SetPartScale  ( .Actor:Self 00000001 *Fixed[1.1] *Fixed[1.1] *Fixed[1.1] )
  AEC:  			Wait  1`
  AF8:  			Call  SetPartScale  ( .Actor:Self 00000001 *Fixed[1.2] *Fixed[1.2] *Fixed[1.2] )
  B18:  			Wait  1`
  B24:  			Call  SetPartScale  ( .Actor:Self 00000001 *Fixed[1.2] *Fixed[1.2] *Fixed[1.2] )
  B44:  			Wait  1`
  B50:  			Call  SetPartScale  ( .Actor:Self 00000001 *Fixed[1.3] *Fixed[1.3] *Fixed[1.3] )
  B70:  		Case  ==  00000001
  B7C:  			Wait  13`
  B88:  			Call  SetPartScale  ( .Actor:Self 00000001 *Fixed[1.15] *Fixed[1.15] *Fixed[1.15] )
  BA8:  			Wait  1`
  BB4:  			Call  SetPartScale  ( .Actor:Self 00000001 *Fixed[1.2] *Fixed[1.2] *Fixed[1.2] )
  BD4:  			Wait  1`
  BE0:  			Call  SetPartScale  ( .Actor:Self 00000001 *Fixed[1.35] *Fixed[1.35] *Fixed[1.35] )
  C00:  			Wait  1`
  C0C:  			Call  SetPartScale  ( .Actor:Self 00000001 *Fixed[1.4] *Fixed[1.4] *Fixed[1.4] )
  C2C:  			Wait  1`
  C38:  			Call  SetPartScale  ( .Actor:Self 00000001 *Fixed[1.55] *Fixed[1.55] *Fixed[1.55] )
  C58:  		Case  ==  00000002
  C64:  			Wait  13`
  C70:  			Call  SetPartScale  ( .Actor:Self 00000001 *Fixed[1.2] *Fixed[1.2] *Fixed[1.2] )
  C90:  			Wait  1`
  C9C:  			Call  SetPartScale  ( .Actor:Self 00000001 *Fixed[1.3] *Fixed[1.3] *Fixed[1.3] )
  CBC:  			Wait  1`
  CC8:  			Call  SetPartScale  ( .Actor:Self 00000001 *Fixed[1.5] *Fixed[1.5] *Fixed[1.5] )
  CE8:  			Wait  1`
  CF4:  			Call  SetPartScale  ( .Actor:Self 00000001 *Fixed[1.6] *Fixed[1.6] *Fixed[1.6] )
  D14:  			Wait  1`
  D20:  			Call  SetPartScale  ( .Actor:Self 00000001 *Fixed[1.8] *Fixed[1.8] *Fixed[1.8] )
  D40:  	EndSwitch
  D48:  EndThread
  D50:  Call  SetActorSounds    ( .Actor:Self .ActorSound:Jump 00000000 00000000 )
  D6C:  Call  PlaySoundAtActor  ( .Actor:Self 00002034 )
  D80:  Call  SetGoalToTarget   ( .Actor:Self )
  D90:  Thread
  D98:  	Call  SetAnimation  ( .Actor:Self 00000001 000F0005 )
  DB0:  	Wait  10`
  DBC:  	Call  SetAnimation  ( .Actor:Self 00000001 000F0006 )
  DD4:  EndThread
  DDC:  Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.6] )
  DF0:  Call  JumpToGoal    ( .Actor:Self  20` .False .True .False )
  E10:  Call  SetAnimation  ( .Actor:Self 00000001 000F0007 )
  E28:  Call  SetActorRotation      ( .Actor:Self 00000000 00000000 00000000 )
  E44:  Call  SetActorRotationOffset    ( .Actor:Self 00000000 00000000 00000000 )
  E60:  Thread
  E68:  	Wait  3`
  E74:  	Call  SetPartScale  ( .Actor:Self 00000001 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  E94:  EndThread
  % Determine Base power of Attack and Store as *Var8
        % First determine's partner's rank...
        Call  GetActorVar   ( .Actor:Self 00000001 *Var9 )
        Switch *Var9
            Case  ==  00000000
                Set *Var8 00000002
            Case  ==  00000001
                Set *Var8 00000003
            Case  ==  00000002
                Set *Var8 00000004
        EndSwitch
        % Next determine if challenge mode (or any other power mutipliers) are on and add accordingly
        % If Challenge mode, add 2 to attack
        If *GF_HardMode == .True
            Add *Var8 00000002
            %Add extra attack for normal and super rank so that he doesn't get weaker if party member is downgraded
            Switch *Var9
            Case  ==  00000000
                Add *Var8 00000002
            Case  ==  00000001
                Add *Var8 00000001
        EndSwitch
        EndIf
        % Next determine if challenge mode (or any other power mutipliers) are on and add accordingly
        % Add extra damage for Kitchen Sink mode
        If *GB_FileCodeMode == 8`
            Add *Var8 00000000 
            % Not going to raise attack in kitchen sink mode since healing increases as Chai...
            %it should still do at least one damage to Mario, expect maybe in a perfect defensive set up...
            % But even if the player can have a zero damage set-up with Chai, Lee will more than make up for it when swapping back to Rush.
        EndIf
                Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000000 *Var8 00000020 )
        /%
  E9C:  Call  GetActorVar   ( .Actor:Self 00000001 *VarA )
  EB4:  Switch  *VarA
  EC0:  	Case  ==  00000000
  ECC:  		Wait  2`
  ED8:  		Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000000 00000002 00000020 )
  F00:  	Case  ==  00000001
  F0C:  		Wait  2`
  F18:  		Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000000 00000003 00000020 )
  F40:  	Case  ==  00000002
  F4C:  		Wait  2`
  F58:  		Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000000 00000004 00000020 )
  F80:  EndSwitch
        %/
  F88:  Switch  *Var0
  F94:  	CaseOR  ==  .HitResult:Hit % 0
  FA0:  	CaseOR  ==  .HitResult:QuakeImmune % 2
  FAC:  		Call  SetAnimation  ( .Actor:Self 00000001 000F0006 )
  FC4:  		Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  FE0:  		Add   *Var0  0000003C
  FF0:  		Set   *Var1  00000000
 1000:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.4] )
 1014:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
 1030:  		Call  JumpToGoal    ( .Actor:Self  20` .False .True .False )
 1050:  		Call  PlaySoundAtActor  ( .Actor:Self 0000029A )
 1064:  		Add   *Var0  0000001E
 1074:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
 1090:  		Call  JumpToGoal    ( .Actor:Self  8` .False .True .False )
 10B0:  		Call  PlaySoundAtActor  ( .Actor:Self 0000029A )
 10C4:  		Add   *Var0  00000014
 10D4:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
 10F0:  		Call  JumpToGoal    ( .Actor:Self  6` .False .True .False )
 1110:  		Call  PlaySoundAtActor  ( .Actor:Self 0000029A )
 1124:  		Add   *Var0  0000000A
 1134:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
 1150:  		Call  JumpToGoal    ( .Actor:Self  4` .False .True .False )
 1170:  		Call  PlaySoundAtActor  ( .Actor:Self 0000029A )
 1184:  		Call  SetAnimation  ( .Actor:Self 00000001 000F0001 )
 119C:  		Wait  15`
 11A8:  		Call  UseBattleCamPreset    ( 00000002 )
 11B8:  		Call  YieldTurn ( )
 11C4:  		Call  SetAnimation  ( .Actor:Self 00000001 000F0003 )
 11DC:  		Call  SetGoalToHome ( .Actor:Self )
 11EC:  		Call  SetActorSpeed ( .Actor:Self *Fixed[4.0] )
 1200:  		Call  RunToGoal     ( .Actor:Self  0` .False )
 1218:  	EndCaseGroup
 1220:  EndSwitch

        % Heal either 1 or 5 HP depending on if Challenge mode is on
        ExecWait $Script_LeeHeal
 1228:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
 123C:  Call  UseIdleAnimation  ( .Actor:Self .True )
 1250:  Return
 1258:  End
}


/%
% Orginally I sepearated the different attacks to make the script easier to read, 
        %but it was easier to make it work just by including this code directly into RushLee's TakeTurn script
#new:Script $Script_RushElectric
{
        110:  	Call  GetActorVar   ( .Actor:Self 00000001 *Var9 )
        674:      Switch  *Var9
        680:  	    Case  ==  00000000
        68C:  		    Wait  2`
        698:  		    Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:IgnoreDefense|Electric 0000FFFF 00000000 00000002 00000020 )
        6C0:  	    Case  ==  00000001
        6CC:  		    Wait  2`
        6D8:  		    Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:IgnoreDefense|Electric 0000FFFF 00000000 00000003 00000020 )
        700:  	    Case  ==  00000002
        70C:  		    Wait  2`
        718:  		    Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:IgnoreDefense|Electric 0000FFFF 00000000 00000004 00000020 )
        740:      EndSwitch
        11C:  	  Return
                  End
}
#new:Script $Script_RushFire 
{
    Call  GetActorVar   ( .Actor:Self 00000001 *Var9 )
    Switch  *Var9
    680:  	Case  ==  00000000
    68C:  		Wait  2`
                Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Fire 0000FFFF 00000000 00000002 00000020 )
                Wait  7`
    698:  		Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Fire 0000FFFF 00000000 00000001 00000020 )
    6C0:  	Case  ==  00000001
    6CC:  		Wait  2`
                Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Fire 0000FFFF 00000000 00000003 00000020 )
                Wait  7`
                Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Fire 0000FFFF 00000000 00000001 00000020 )
    700:  	Case  ==  00000002
                Wait  2`
                Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Fire 0000FFFF 00000000 00000004 00000020 )
                Wait  7`
                Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Fire 0000FFFF 00000000 00000001 00000020 )
    740:  EndSwitch
    Return
    End
}
#new:Script $Script_RushIce
{
    Call  GetActorVar   ( .Actor:Self 00000001 *Var9 )
    Switch  *Var9
    680:  	Case  ==  00000000
    68C:  		Wait  2`
                Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Fire 0000FFFF 00000000 00000002 00000020 )
                Call  $Function_ChillWaveEffect    ( *Var0 *Var1 *Var2 )
                Call     $Function_ChillTarget ( )
                Wait  10`
    6C0:  	Case  ==  00000001
    6CC:  		Wait  2`
                Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Fire 0000FFFF 00000000 00000003 00000020 )
                Call  $Function_ChillWaveEffect    ( *Var0 *Var1 *Var2 )
                Call     $Function_ChillTarget ( )
                Wait  10`
    700:  	Case  ==  00000002
                Wait  2`
                Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Fire 0000FFFF 00000000 00000004 00000020 )
                Call  $Function_ChillWaveEffect    ( *Var0 *Var1 *Var2 )
                Call  $Function_ChillTarget ( )
                Wait  10`
    740:  EndSwitch
    Return
    End
}


/%

%---- Fire Attack---
%Fail safe in case the attack for whatever reason does less than 2 damage (before defense calc)
If *VarF < 2 %If attack is 1 or less, just do a single attack.
    Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:Fire 0000008D 00000000 *VarF 00000070 )
%As long as Rush's attack is at least 2, continue like normal...
Else
    %Decrease Rush's attack by 1 to put into the second attack....
    SubF *VarF 1
    %Call the two attacks
    Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:Fire 0000008D 00000000 *VarF 00000070 )
    Wait  7`
    Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:NoContact|Fire 0000008D 00000000 00000001 00000070 )
EndIf

--- Ice Attack ----
Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:Ice 0000008D 00000000 *VarF 00000070 )
                         %"Chill" the target if they aren't already chill
                              Call     $Function_CheckChill ( ) %0 = immune to chill out
                              If  *Var[0]  ==  00000001 
                                   Call  GetActorPos       ( .Actor:Partner *Var0 *Var1 *Var2 )
                                   Call  $Function_ChillWaveEffect    ( *Var0 *Var1 *Var2 )
                                   Call     $Function_ChillTarget ( )
                                   Wait  10`
                              EndIf  

%

%/

%Attack Drop effects carried over from Rush

%Rush's battle style is changed to better reflect her fast pased, short tempered nature.
	%Especially with the tenative "Sugar Rush" ability

%Import the functions that let partners Chill from Dark Star to implement in the ice version of Sugar Rush....
#new:Function $Function_CheckChill %chill out fails against targets with certain flags
{
    0:  ADDIU		SP, SP, FFE0
    4:  SW			S2, 18 (SP)
    8:  COPY		S2, A0
    C:  SW			RA, 1C (SP)
   10:  SW			S1, 14 (SP)
   14:  SW			S0, 10 (SP)
   18:  JAL			~Func:get_actor		%get mario
   1C:  LW			A0, 148 (S2)
   20:  COPY		S0, V0
   24:  JAL			~Func:get_actor		%get target
   28:  LH			A0, 428 (S0)
   2C:  COPY		S1, V0
   30:  LB			A1, 426 (S0)
   34:  JAL			~Func:get_actor_part	%get part of target
   38:  COPY		A0, S1
   3C:  SW			R0, 84 (S2)
          %Ensure that chill out is not already enabled
          LB			T0, 224 (S1)	%duration
          SLTI		T0, T0, 1
          BEQ			T0, R0, .oA0
          NOP
   40:  LW			S1, 0 (S1)		%Actor flags
   44:  COPY		V1, V0			%Part pointer
   48:  ANDI		V0, S1, 4000 	%check flag 4000 (target only)
   4C:  BNE			V0, R0, .oA0
   50:  ADDIU		V0, R0, 2
   54:  LUI			V0, 40			%check flag 400000 (not targettable)
   58:  AND			V0, S1, V0
   5C:  BNE			V0, R0, .oA0
   60:  ADDIU		V0, R0, 2
   64:  ANDI		V0, S1, 2000	%check flag 2000 (???)
   68:  BNE			V0, R0, .oA0
   6C:  ADDIU		V0, R0, 2
   70:  LW			V1, 7C (V1)		%Part event flags
   74:  LUI			V0, 4			%check flag 40000 (normal star rod)
   78:  AND			V0, V1, V0
   7C:  BNE			V0, R0, .oA0
   80:  ADDIU		V0, R0, 2
   84:  LUI			V0, 8			%check flag 80000 (final star rod)
   88:  AND			V0, V1, V0
   8C:  BNE			V0, R0, .oA0
   90:  ADDIU		V0, R0, 2
   94:  ADDIU		V0, R0, 1
   98:  SW			V0, 84 (S2)		%Store 1 into Var0 (used by checker functions later)
   9C:  ADDIU		V0, R0, 2
        .oA0
          ADDIU		V0, R0, 2
   A0:  LW			RA, 1C (SP)
   A4:  LW			S2, 18 (SP)
   A8:  LW			S1, 14 (SP)
   AC:  LW			S0, 10 (SP)
   B0:  JR			RA
   B4:  ADDIU		SP, SP, 20
}


#new:Function $Function_ChillTarget
{
    0:  ADDIU		SP, SP, FFE0
    4:  SW			RA, 1C (SP)
    8:  SW			S0, 18 (SP)
    C:  JAL			~Func:get_actor
   10:  LW			A0, 148 (A0)
   14:  COPY		S0, V0
   18:  JAL			~Func:get_actor
   1C:  LH			A0, 428 (S0)
   20:  LB			A1, 426 (S0)
   24:  COPY		S0, V0
   28:  JAL			~Func:get_actor_part
   2C:  COPY		A0, S0
   30:  LW			V1, 0 (S0)
   34:  COPY		A0, V0
   38:  ANDI		V0, V1, 4000 %star rod flag
   3C:  BNE			V0, R0, .o1E4
   40:  ADDIU		V0, R0, 2
   44:  LUI			V0, 40
   48:  AND			V0, V1, V0
   4C:  BEQ			V0, R0, .o5C
   50:  ANDI		V0, V1, 2000
   54:  BEQ			R0, R0, .o1E4
   58:  ADDIU		V0, R0, 2
        .o5C
   5C:  BNE			V0, R0, .o1E4
   60:  ADDIU		V0, R0, 2
   64:  LW			V1, 7C (A0)
   68:  LUI			V0, 4
   6C:  AND			V0, V1, V0
   70:  BNE			V0, R0, .o1E4
   74:  ADDIU		V0, R0, 2
   78:  LUI			V0, 8
   7C:  AND			V0, V1, V0
   80:  BNE			V0, R0, .o1E4
   84:  ADDIU		V0, R0, 2
   88:  COPY		A0, S0
   8C:  CLEAR		A1
   90:  ADDIU		A2, R0, A
   94:  ADDIU		V0, R0, 1		%duration?
   98:  SB			V0, 224 (S0)
   9C:  ADDIU		V0, R0, 1		%attack reduction
   %A0:  JAL			802788F8						this event is already called, so don't do this!
   A4:  SB			V0, 223 (S0)
   A8:  LH			V0, 150 (S0)
   AC:  LWC1		F0, 144 (S0)
   B0:  LW			V1, 0 (S0)
   B4:  MTC1		V0, F2
   B8:  NOP
   BC:  CVT.S.W		F2, F2
   C0:  LBU			V0, 190 (S0)
   C4:  ADD.S		F0, F0, F2
   C8:  SRL			V0, V0, 1
   CC:  MTC1		V0, F2
   D0:  NOP
   D4:  CVT.S.W		F2, F2
   D8:  ANDI		V0, V1, 800
   DC:  BEQ			V0, R0, .o114
   E0:  ADD.S		F4, F0, F2
   E4:  LH			V0, 152 (S0)
   E8:  LWC1		F0, 148 (S0)
   EC:  MTC1		V0, F2
   F0:  NOP
   F4:  CVT.S.W		F2, F2
   F8:  LBU			V0, 191 (S0)
   FC:  ADD.S		F0, F0, F2
  100:  MTC1		V0, F2
  104:  NOP
  108:  CVT.S.W		F2, F2
  10C:  BEQ			R0, R0, .o180
  110:  SUB.S		F0, F0, F2
        .o114
  114:  ANDI		V0, V1, 8000
  118:  BNE			V0, R0, .o150
  11C:  NOP
  120:  LH			V0, 152 (S0)
  124:  LWC1		F0, 148 (S0)
  128:  MTC1		V0, F2
  12C:  NOP
  130:  CVT.S.W		F2, F2
  134:  LBU			V0, 191 (S0)
  138:  ADD.S		F0, F0, F2
  13C:  MTC1		V0, F2
  140:  NOP
  144:  CVT.S.W		F2, F2
  148:  BEQ			R0, R0, .o180
  14C:  ADD.S		F0, F2, F0
        .o150
  150:  LH			V0, 152 (S0)
  154:  LWC1		F2, 148 (S0)
  158:  MTC1		V0, F0
  15C:  NOP
  160:  CVT.S.W		F0, F0
  164:  LBU			V0, 191 (S0)
  168:  ADD.S		F2, F2, F0
  16C:  SLL			V0, V0, 1
  170:  MTC1		V0, F0
  174:  NOP
  178:  CVT.S.W		F0, F0
  17C:  ADD.S		F0, F2, F0
        .o180
  180:  LH			V0, 154 (S0)
  184:  MFC1		A2, F0
  188:  LWC1		F0, 14C (S0)
  18C:  MTC1		V0, F2
  190:  NOP
  194:  CVT.S.W		F2, F2
  198:  ADD.S		F0, F0, F2
  19C:  LIF			F2, 5.0
  1A4:  ADDIU		A0, R0, 3		%damage icon (5 -> 3)
  1A8:  ADD.S		F0, F0, F2
  1AC:  MFC1		A1, F4
  1B0:  LIF			F4, 1.0
  1B8:  MFC1		A3, F0
  1BC:  ADDIU		V0, R0, 3C
  1C0:  SW			V0, 14 (SP)
  1C4:  JAL			800718D0
  1C8:  SWC1		F4, 10 (SP)
  1CC:  JAL			~Func:sfx_play_sound
  1D0:  ADDIU		A0, R0, 2106
  1D4:  ADDIU		V0, R0, 2
  1D8:  ADDIU		V1, R0, 1
  1DC:  SAW			V1, $End[0]
        .o1E4
  1E4:  LW			RA, 1C (SP)
  1E8:  LW			S0, 18 (SP)
  1EC:  JR			RA
  1F0:  ADDIU		SP, SP, 20
}


%more blue than Frigid Stomp

%uses 3 vars for positions
#new:Function $Function_ChillWaveEffect
{
    0:  ADDIU     SP, SP, FFD8
    4:  SW        S1, 1C (SP)
    8:  COPY      S1, A0
    C:  SW        RA, 24 (SP)
   10:  SW        S2, 20 (SP)
   14:  SW        S0, 18 (SP)
   18:  LW        S0, C (S1)
   1C:  LW        A1, 0 (S0)
   20:  JAL       ~Func:get_variable
   24:  ADDIU     S0, S0, 4
   28:  LW        A1, 0 (S0)
   2C:  ADDIU     S0, S0, 4
   30:  COPY      A0, S1
   34:  JAL       ~Func:get_variable
   38:  COPY      S2, V0
   3C:  COPY      A0, S1
   40:  LW        A1, 0 (S0)
   44:  JAL       ~Func:get_variable
   48:  COPY      S0, V0
   4C:  LW        V1, AC (S1)
   50:  BNE       V1, R0, .o90
   54:  CLEAR     A0
   58:  MTC1      S2, F0
   5C:  NOP
   60:  CVT.S.W   F0, F0
   64:  MFC1      A1, F0
   68:  MTC1      S0, F0
   6C:  NOP
   70:  CVT.S.W   F0, F0
   74:  MFC1      A2, F0
   78:  MTC1      V0, F0
   7C:  NOP
   80:  CVT.S.W   F0, F0
   84:  MFC1      A3, F0
   88:  BEQ       R0, R0, .oC0
   8C:  LI        A0, 1
        .o90
   90:  MTC1      S2, F0
   94:  NOP
   98:  CVT.S.W   F0, F0
   9C:  MFC1      A1, F0
   A0:  MTC1      S0, F0
   A4:  NOP
   A8:  CVT.S.W   F0, F0
   AC:  MFC1      A2, F0
   B0:  MTC1      V0, F0
   B4:  NOP
   B8:  CVT.S.W   F0, F0
   BC:  MFC1      A3, F0
        .oC0
   C0:  JAL       80070B50
   C4:  SW        R0, 10 (SP)
          LW			V1, C (V0)
          ADDIU		A1, R0, 00			%R
          SB			A1, 50 (V1)
          LW			V1, C (V0)
          ADDIU		A1, R0, 60			%G
          SB			A1, 51 (V1)
          LW			V1, C (V0)
          ADDIU		A1, R0, FF			%B
          SB			A1, 52 (V1)
          LW			A0, C (V0)
          ADDIU		V1, R0, D0			%R 2
          SB			V1, 53 (A0)
          LW			A0, C (V0)
          ADDIU		V1, R0, DC			%G 2
          SB			V1, 54 (A0)
          LW			V1, C (V0)
          ADDIU		A1, R0, FF			%B 2
          SB			A1, 55 (V1)		
   C8:  LW        RA, 24 (SP)
   CC:  LW        S2, 20 (SP)
   D0:  LW        S1, 1C (SP)
   D4:  LW        S0, 18 (SP)
   D8:  LI        V0, 2
   DC:  JR        RA
   E0:  ADDIU     SP, SP, 28
}

% ---- Master Mode scripts ----

% Defense table for Master 1
    % Make him start with 1 defense but 0 defense to all elements....
@ $DefenseTable_8022A2AC
{
	.Element:Normal 00000001
    .Element:Water 00000000
    .Element:Ice 00000000
    .Element:Fire 00000000
    .Element:Shock 00000000
    .Element:Throw 00000000
	.Element:End
}

% Master Status table
@ $StatusTable_8022A2B8
{
	.Status:Normal     50`
	.Status:Default    50`
	.Status:Sleep      40`
	.Status:Poison     50`
	.Status:Frozen      0`
	.Status:Dizzy      40`
	.Status:Fear        0`
	.Status:Static      0`
	.Status:Paralyze   50`
	.Status:Shrink     60`
	.Status:Stop       70`
	.Status:DefaultTurnMod    0`
	.Status:SleepTurnMod     -1`
	.Status:PoisonTurnMod     0`
	.Status:FrozenTurnMod     0`
	.Status:DizzyTurnMod     -1`
	.Status:FearTurnMod       0`
	.Status:StaticTurnMod    -1`
	.Status:ParalyzeTurnMod  -1`
	.Status:ShrinkTurnMod    -1`
	.Status:StopTurnMod      -1`
	.Status:End
}

%Give More HP to Each Master (Minus the one already at 99)
@ $TheMaster1
{
	% stats
    [MaxHP]        .HPTheMaster1 %50 HP in normal & 60 HP in hard
	[PowerBounce]  10`b % No power bounce in this mod, but I bumped it down anyways
}

% Hard Master1, same as Master1 but with more HP....
#new:Actor $TheMaster1_hard
{
	% stats
	[Index]        7Ab
	[Level]         0`b
	[MaxHP]        60`b
	[Coins]         0`b
	[Flags]       00000000
	[StatusTable] $StatusTable_8022A2B8
	% ai
	[PartsCount]    1`s
	[PartsTable]  $PartsTable_8022A364
	[Script]      $Script_Init_8022A3B0
	% move effectiveness
	[Escape]      100`b
	[Item]          0`b
	[AirLift]       0`b
	[Hurricane]     0`b % Bow's "Spook" as well
	[UpAndAway]     0`b
	[PowerBounce]  80`b
	[SpinSmash]     0`b % weight (0-4)
	% ui positions
	[Size]         30`b  35`b % width height
	[HealthBar]     0`b   0`b % dx dy
	[StatusTurn]  -10`b  30`b % dx dy
	[StatusIcon]   10`b  30`b % dx dy
}

% Master 1's attack script
    % Minor tweek to increase damage in Hard and All Sinks mode
@ $Script_TakeTurn_8022AA54
{
    % Determine damage
    Set *VarC 00000006
    % Add damage for hard mode
    If *GF_HardMode == .True
        Add *VarC 00000001
    EndIf
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   28:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
   3C:  Call  UseBattleCamPreset    ( 0000003F )
   4C:  Call  BattleCamTargetActor  ( .Actor:Self )
   5C:  Call  8024ECF8  ( FFFFFFFF 00000001 00000000 )
   74:  Call  SetAnimation      ( .Actor:Self 00000001 00A20007 )
   8C:  Call  SetGoalToTarget   ( .Actor:Self )
   9C:  Call  AddGoalPos        ( .Actor:Self  30`  0`  0` )
   B8:  Call  SetActorSpeed     ( .Actor:Self *Fixed[4.6] )
   CC:  Call  RunToGoal ( .Actor:Self  0` .False )
   E4:  Call  SetAnimation      ( .Actor:Self 00000001 00A20002 )
   FC:  Wait  10`
  108:  Thread
  110:  	Call  PlaySoundAtActor  ( .Actor:Self 000020BB )
  124:  	Wait  5`
  130:  	Call  PlaySoundAtActor  ( .Actor:Self 000020BB )
  144:  EndThread
  14C:  Call  SetAnimation  ( .Actor:Self 00000001 00A20010 )
  164:  Wait  10`
  170:  Thread
  178:  	Call  SetAnimation  ( .Actor:Self 00000001 00A20011 )
  190:  	Wait  7`
  19C:  	Call  SetAnimation  ( .Actor:Self 00000001 00A20012 )
  1B4:  EndThread
  1BC:  Call  SetGoalToTarget   ( .Actor:Self )
  1CC:  Call  RunToGoal ( .Actor:Self  8` .True )
  1E4:  Call  EnemyTestTarget   ( .Actor:Self *VarA ~Flags:DamageType:0 00000000 00000000 00000010 )
  208:  Switch  *VarA
  214:  	CaseOR  ==  .HitResult:Miss % 6
  220:  	CaseOR  ==  .HitResult:Lucky % 5
  22C:  		Call  UseBattleCamPreset    ( 00000002 )
  23C:  		Wait  10`
  248:  		Call  SetGoalToTarget       ( .Actor:Self )
  258:  		Call  GetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  274:  		Add   *Var0  00000014
  284:  		Set   *Var1  00000000
  294:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20007 )
  2AC:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  2C8:  		Call  RunToGoal     ( .Actor:Self  10` .True )
  2E0:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20002 )
  2F8:  		Wait  3`
  304:  		If  *VarA  ==  .HitResult:Lucky % 5
  314:  			Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
  338:  		EndIf
  340:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20002 )
  358:  		Call  SetGoalToHome ( .Actor:Self )
  368:  		Call  SetActorSpeed ( .Actor:Self *Fixed[3.8] )
  37C:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20007 )
  394:  		Call  RunToGoal     ( .Actor:Self  0` .False )
  3AC:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20002 )
  3C4:  		Call  EnableIdleScript  ( .Actor:Self 00000001 )
  3D8:  		Call  UseIdleAnimation  ( .Actor:Self .True )
  3EC:  		Return
  3F4:  	EndCaseGroup
  3FC:  EndSwitch
  404:  Call  PlaySoundAtActor  ( .Actor:Self 000003ED )
  418:  Wait  2`
  424:  Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000000 *VarC 00000030 )

        % Since it was fun with Chan lets have an encore of the All Sink exclusive gimmick where the foe attacks twice at 5 or higher...
            % If only to assure the player takes some damage even with Last Stand
            % But what if we made it 4 hp or greater? Master normally does 2 damage with P-down D-Up/Last Stand 
            %so this would only trigger if all defense badges are equipped AND Rush drops attack... make them reconsider other options than just dropping attack as much as possible.
        If *GB_FileCodeMode == 8`
            % Do a second attack if Mario is 5 hp or above
            Call  GetActorHP    ( .Actor:Player *VarD  )
            If *VarD > 00000003 % 4 HP or more
                % Buff the attack (*VarC) and do the attack again
                Add *VarC 00000002 % Increase by 2
                Call  UseIdleAnimation  ( .Actor:Self .False )
   14:          Call  EnableIdleScript  ( .Actor:Self 00000000 )
   28:          Call  SetTargetActor    ( .Actor:Self .Actor:Player )
   3C:          Call  UseBattleCamPreset    ( 0000003F )
   4C:          Call  BattleCamTargetActor  ( .Actor:Self )
   5C:          Call  8024ECF8  ( FFFFFFFF 00000001 00000000 )
   74:          Call  SetAnimation      ( .Actor:Self 00000001 00A20007 )
   8C:          Call  SetGoalToTarget   ( .Actor:Self )
   9C:          Call  AddGoalPos        ( .Actor:Self  30`  0`  0` )
   B8:          Call  SetActorSpeed     ( .Actor:Self *Fixed[4.6] )
   CC:          Call  RunToGoal ( .Actor:Self  0` .False )
   E4:          Call  SetAnimation      ( .Actor:Self 00000001 00A20002 )
   FC:          Wait  10`
  108:          Thread
  110:  	        Call  PlaySoundAtActor  ( .Actor:Self 000020BB )
  124:  	        Wait  5`
  130:  	        Call  PlaySoundAtActor  ( .Actor:Self 000020BB )
  144:          EndThread
  14C:          Call  SetAnimation  ( .Actor:Self 00000001 00A20010 )
  164:          Wait  10`
  170:          Thread
  178:  	    Call  SetAnimation  ( .Actor:Self 00000001 00A20011 )
  190:  	    Wait  7`
  19C:  	    Call  SetAnimation  ( .Actor:Self 00000001 00A20012 )
  1B4:          EndThread
  1BC:          Call  SetGoalToTarget   ( .Actor:Self )
  1CC:          Call  RunToGoal ( .Actor:Self  8` .True )
  1E4:          Call  EnemyTestTarget   ( .Actor:Self *VarA ~Flags:DamageType:0 00000000 00000000 00000010 )
  404:          Call  PlaySoundAtActor  ( .Actor:Self 000003ED )
  418:          Wait  2`
  424:          Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000000 *VarC 00000030 )
  % End of Second Attack...
            EndIf
        EndIf
  
        % Resume normal attack    
  44C:  Switch  *Var0
  458:  	CaseOR  ==  .HitResult:Hit % 0
  464:  	CaseOR  ==  .HitResult:QuakeImmune % 2
  470:  		Call  UseBattleCamPreset    ( 00000002 )
  480:  		Call  SetGoalToTarget       ( .Actor:Self )
  490:  		Call  GetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  4AC:  		Add   *Var0  00000014
  4BC:  		Set   *Var1  00000000
  4CC:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20007 )
  4E4:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  500:  		Call  RunToGoal     ( .Actor:Self  10` .True )
  518:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20002 )
  530:  		Wait  20`
  53C:  	EndCaseGroup
  544:  EndSwitch
  54C:  Call  UseBattleCamPreset    ( 00000002 )
  55C:  Call  SetAnimation  ( .Actor:Self 00000001 00A20002 )
  574:  Call  SetGoalToHome ( .Actor:Self )
  584:  Call  SetActorSpeed ( .Actor:Self *Fixed[6.0] )
  598:  Call  SetAnimation  ( .Actor:Self 00000001 00A20007 )
  5B0:  Call  RunToGoal     ( .Actor:Self  0` .False )
  5C8:  Call  SetAnimation  ( .Actor:Self 00000001 00A20002 )
  5E0:  Call  EnableIdleScript      ( .Actor:Self 00000001 )
  5F4:  Call  UseIdleAnimation      ( .Actor:Self .True )
  608:  Return
  610:  End
}

% Master 1 next turn script: Added If statements to stop the "I must finish you" dialouge if playing on a 5 HP mode...
@ $Script_NextTurn_8022B06C
{
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   28:  Call  GetBattlePhase    ( *Var0 )
   38:  Switch  *Var0
   44:  	Case  ==  0000000A
   50:  		Call  GetActorVar   ( .Actor:Self 00000000 *Var0 )
   68:  		If  *Var0  ==  00000000
   78:  			Call  UseBattleCamPreset    ( 00000002 )
   88:  			Call  MoveBattleCamOver (  10` )
   98:  			Call  ActorSpeak        ( 0002002E .Actor:Self 00000001 00A20009 00A20005 ) % To battle!!
   B8:  			Call  SetActorVar       ( .Actor:Self 00000000 00000001 )
   D0:  		EndIf
   D8:  	Case  ==  0000000C
   E4:  		Call  GetStatusFlags    ( .Actor:Self *Var0 )
   F8:  		If  *Var0  &  ~Flags:StatusFlags:Sleep|Paralyze|Dizzy|Stone|Stop % 351000
  108:  			BreakCase
  110:  		EndIf
                % Skip HP check dialouge in Danger & All Sinks mode since the player will always be at 5 HP or less...
                If *GF_DangerMode == .False % Only play these dialouge outside of "Danger modes"
  118:  		    Call  GetActorHP    ( .Actor:Self *Var0 )
  12C:  		    Call  GetEnemyMaxHP ( .Actor:Self *Var1 )
  140:  		    Div   *Var1  00000002
  150:  		    If  *Var0  <=  *Var1
  160:  			    Call  UseBattleCamPreset    ( 00000002 )
  170:  			    Call  MoveBattleCamOver     (  10` )
  180:  			    Call  ActorSpeak    ( 00020031 .Actor:Self 00000001 00A20009 00A20005 ) % You have natural talent.
  1A0:  			    BreakCase
  1A8:  		    EndIf
  1B0:  		    Call  GetPlayerHP   ( *Var0 )
  1C0:  		    If  *Var0  <=  00000005
  1D0:  			    Call  UseBattleCamPreset    ( 00000002 )
  1E0:  			    Call  MoveBattleCamOver     (  10` )
  1F0:  			    Call  ActorSpeak    ( 00020032 .Actor:Self 00000001 00A20009 00A20005 ) % Mario, I'm afraid I must finish you.
  210:  			    BreakCase
  218:  		    EndIf
                EndIf
  220:  EndSwitch
  228:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  23C:  Call  UseIdleAnimation  ( .Actor:Self .True )
  250:  Return
  258:  End
}

%---- These tables and functions are shared between the Master 2 & 3 fights-----

%Master 2's defense table...
    % As part of his training he gains resistance to elements based on his attacks
@ $DefenseTable_8022B6D8
{
	.Element:Normal 00000000
	.Element:End
}

% Ice is resistant against Water, but weak to Fire (Also has normal defense)
#new:DefenseTable $DefenseTable_MasterIce
{
	.Element:Normal 00000001
    .Element:Ice           1`
    .Element:Water         0
    .Element:Fire       -1`
    .Element:Shock       0`
	.Element:End
}

% Heat Master is resistant against fire and ice but weak to water
#new:DefenseTable $DefenseTable_MasterFire
{
	.Element:Normal 00000000
    .Element:Water           -1`
    .Element:Ice              1`
    .Element:Fire             1`
	.Element:End
}

% Water Master is extra resistant against water and fire but weak to electric
#new:DefenseTable $DefenseTable_MasterWater
{
	.Element:Normal 00000000
    .Element:Shock           -1`
    .Element:Water            2`
	.Element:End
}

% Thunder Master is extra reistant against electric but weak to ice (Not sure if this will work with Rush's Attack naturally precising defense but still...)
#new:DefenseTable $DefenseTable_MasterElectric
{
	.Element:Normal 00000000
    .Element:Ice           -1`
    .Element:Shock          2`
	.Element:End
}

% Called everytime the Master Swaps his Element in Master 2 Fight
    % Like Rush, he Alternates between a pattern every time it's called...
    % Ice  --> Fire  --> Water --> Electric and back to Ice
#new:Script $SwapToNextElement_Master
{
    % Add to "swap"
    Add   *GB_Master_Element  00000001
    % If number is higher than number of elements he can use set the var back to 0...
    If *GB_Master_Element > 00000003
        Set *GB_Master_Element 00000000
    EndIf
    % Now that the "element" is set, it's up to the attack function to take the gamebyte to determine the attack
    Return
    End
}

% Used to determine the Master's elemental defenses based on element value...
#new:Script $SetElementDefense_Master
{
    Switch *GB_Master_Element
        % Ice Attack
        Case == 00000000
            Call  SetDefenseTable   ( .Actor:Self 00000001 $DefenseTable_MasterIce )
        % Fire Attack
        Case == 00000001
            Call  SetDefenseTable   ( .Actor:Self 00000001 $DefenseTable_MasterFire )
        % Water Attack
        Case == 00000002
            Call  SetDefenseTable   ( .Actor:Self 00000001 $DefenseTable_MasterWater )
            % Would it be a funny gimmick to make him heal more if he ends his attack on water??? Maybe, if so add an "AddTeaCount" call here...
        % Electric Attack
        Case == 00000003
            Call  SetDefenseTable   ( .Actor:Self 00000001 $DefenseTable_MasterElectric )
        % This should never be called but for testing purposes, set to Master 2's normal defense
        Default
            Call  SetDefenseTable   ( .Actor:Self 00000001 $DefenseTable_8022B6D8 )
        EndSwitch

        Return
        End
}

% Since healing each time a water attack triggers messes up animation, it needs to happen after the attack is over.
    % So for Master 3 where he changes element mutiple times a turn, use this to keep track how many times he does the water attack
    % Realistically, there will never be more than one water attack a turn, but I'll make a byte rather than a flag just in case...
    #new:Script $AddWaterCount
    {
        Add *GB_Master_WaterCount  00000001
        Return
        End
    }

    % Revert back to 0 at the start of every turn to assure there's no carry over
        % Such as if the previous turn was ended prematurity from something like Mario being Electrified
    #new:Script $WaterCountReset
    {
        Set *GB_Master_WaterCount  00000000
        Return
        End
    }

% A hard mode exclusive secondary effect that each of the Mater's water attacks deal (Heal 3 HP every time it's called. 
    %May need adjusting after playtests 
#new:Script $TeaHeal_Master
{
    % Check for hard mode flag, if hard mode is on, heal 3 HP....
    If *GF_HardMode == .True
        % Heal the Master based on how many Water Attacks happened
        Switch *GB_Master_WaterCount
            Case > 1 % 2 or more attacks: Heal 6 HP...
                % Play a sound effect
                Wait  5`
                Thread
    208:  	    Call  PlaySoundAtActor  ( .Actor:Self  0000206D )
    21C:  	    Call  PlaySoundAtActor  ( .Actor:Self  00000214 )
    23C:  	    Call  PlaySoundAtActor  ( .Actor:Self 0000025C )
    250:        EndThread
                Thread
                    Call  8026BF48  ( 00000001 )
                    Call  HealActor ( .Actor:Self 00000006 .False )
                    Call  8026BF48  ( 00000000 )
                EndThread
                Call  WaitForBuffDone ( )
            Case == 1 % 1 water attack: Heal 3 HP
                % Play a sound effect
                Wait  5`
                Thread
    208:  	    Call  PlaySoundAtActor  ( .Actor:Self  0000206D )
    21C:  	    Call  PlaySoundAtActor  ( .Actor:Self  00000214 )
    23C:  	    Call  PlaySoundAtActor  ( .Actor:Self 0000025C )
    250:        EndThread
                Thread
                    Call  8026BF48  ( 00000001 )
                    Call  HealActor ( .Actor:Self 00000003 .False )
                    Call  8026BF48  ( 00000000 )
                EndThread
                Call  WaitForBuffDone ( )
            % Default: If there's no water attacks, don't heal
        EndSwitch
    EndIf
    % Reset Water Move Count to zero after the heal is done....
    ExecWait $WaterCountReset
    Return
    End
}

% Script that adds decoration onto the Master based on his element....
    % Such as the visual cue for his special status attack...
    #new:Script $PowerUp_Master
    {
        %Check which element the Master is and apply decorations accordingly
        Switch *GB_Master_Element
            % Ice Attack
            Case == 00000000
                Call  PlayEffect    ( ~FX:EmitterVolume:Snowflakes *Var0 *Var1 *Var2 00000014 FFFFFFEC *Fixed[1.0] 00000005 0000001E 00000000 00000000 00000000 00000000 )
                Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Whirlwind)
            % Fire Attack
            Case == 00000001
                Call  AddActorDecoration    ( .Actor:Self 00000000 00000000 .Decoration:RedFlames )
            % Water Attack
            Case == 00000002
                %Call  PlayEffect        ( ~FX:WaterFall *Var0 *Var1 *Var2 *Fixed[1.0] 00000032 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
                Call  PlayEffect        ( ~FX:WaterFall *Var0 *Var1 *Var2 00000014 FFFFFFEC *Fixed[1.0] 00000005 0000001E 00000000 00000000 00000000 00000000 )
                Call  PlaySoundAtActor  ( .Actor:Self 00002035 )
            % Electric Attack
            Case == 00000003
                % Since Master has golden Flames already, let's play the thunder effect instead...
                Call	$Function_ThunderFX ( ) % This was a Watt/Rush exclusive effect, but lets use it here too
            % This should never be called but for testing purposes, set to Master 2's normal defense
            Default
                % Apply nothing
            EndSwitch

        Return
        End
    }

    % Used to remove decorations off the Master after certan attacks
    #new:Script $PowerDown_Master
    {
        %Remove All decorators (except Golden Flame if possible
        Call  RemoveActorDecoration ( .Actor:Self 00000000 00000000 )
        Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )

        % Keep in case I need to apply a specfic action to each one
        /%
        %Check which element the Master is and apply decorations accordingly
        Switch *GB_Master_Element
            % Ice Attack
            Case == 00000000
                
            % Fire Attack
            Case == 00000001
                
            % Water Attack
            Case == 00000002
                
            % Electric Attack
            Case == 00000003
                
            % This should never be called but for testing purposes, set to Master 2's normal defense
            Default
                
            EndSwitch
            %/

            % If it does get remove I suppose I could just readd it...
            %Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:GoldenFlames)
            Return
            End
        Return
        End
    }



%------ Master 2 Stats and move changes...------

% Now immune to sleep and Parlyized for one less turn
% Master 2 Status table
@ $StatusTable_8022B6E4
{
	.Status:Normal     50`
	.Status:Default    50`
	.Status:Sleep      0`
	.Status:Poison     50`
	.Status:Frozen      0`
	.Status:Dizzy      30`
	.Status:Fear        0`
	.Status:Static      0`
	.Status:Paralyze   50`
	.Status:Shrink     40`
	.Status:Stop       50`
	.Status:DefaultTurnMod    0`
	.Status:SleepTurnMod     -2`
	.Status:PoisonTurnMod     0`
	.Status:FrozenTurnMod     0`
	.Status:DizzyTurnMod     -1`
	.Status:FearTurnMod       0`
	.Status:StaticTurnMod    -1`
	.Status:ParalyzeTurnMod  -2`
	.Status:ShrinkTurnMod    -1`
	.Status:StopTurnMod      -1`
	.Status:End
}

@ $TheMaster2
{
	% stats
	[Index]        7Bb
	[Level]         0`b
    [MaxHP]        75`b
	[Coins]         0`b
	[Flags]       00000000
	[StatusTable] $StatusTable_8022B6E4
	% ai
	[PartsCount]    1`s
	[PartsTable]  $PartsTable_8022B790
	[Script]      $Script_Init_8022B7DC
	% move effectiveness
	[Escape]      100`b
	[Item]          0`b
	[AirLift]       0`b
	[Hurricane]     0`b % Bow's "Spook" as well
	[UpAndAway]     0`b
	[PowerBounce]  10`b
	[SpinSmash]     0`b % weight (0-4)
	% ui positions
	[Size]         30`b  35`b % width height
	[HealthBar]     0`b   0`b % dx dy
	[StatusTurn]  -10`b  30`b % dx dy
	[StatusIcon]   10`b  30`b % dx dy
}

% Master 2 turn... update defense table and tea heal here to insure they get updated even if shocked
    % This works, but I still have the issue of electrified stopping the attack before the swap can happen...
    % Might half to go back to setting defense before the first strike... 
    %(not sure how I'll get around that with tea heal... I might have to accept skipping healing as a "reward" for abusing electrified)
@ $Script_TakeTurn_8022CF48
{
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   % Reset Water Count to 0 (in case the previous turn ended before doing so)
   ExecWait $WaterCountReset
   % Call element swap and defense update before attacking in case Mario is Electrified
   ExecWait $SwapToNextElement_Master
   ExecWait $SetElementDefense_Master
   28:  
        % In hard mode have statusStrike replace Single strike if he gets down to 10 HP or less
        If *GF_HardMode == .True
            Call  GetActorHP    ( .Actor:Self *Var0 )
   64:  	If  *Var0  <  00000011
                Call  RandInt   ( 00000064 *Var0 )
    3C:         Switch  *Var0
    48:  	        Case  <  00000014
    54:  		        ExecWait  $Script_StatusStrike
    60:  	        Default
    68:  		        ExecWait  $Script_DoubleStrike2
                    EndSwitch
            % Above 10 HP behave like normal
            Else
                Call  RandInt   ( 00000064 *Var0 )
   3C:              Switch  *Var0
   48:  	        Case  <  00000014
   54:  		        ExecWait  $Script_DoubleStrike2
   60:  	        Default
   68:  		        ExecWait  $Script_SingleStrike2
   74:              EndSwitch
            EndIf
        % In normal mode randomly choose between single and double strike like normal
        Else
            Call  RandInt   ( 00000064 *Var0 )
   3C:      Switch  *Var0
   48:  	    Case  <  00000014
   54:  		    ExecWait  $Script_DoubleStrike2
   60:  	    Default
   68:  		    ExecWait  $Script_SingleStrike2
   74:      EndSwitch
        EndIf
   7C:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
   90:  Call  UseIdleAnimation  ( .Actor:Self .True )
   % At the very end of the turn, update the Master's defense table (Based on element) and heal HP if water attacks are done in hard mode...
   %Set the Master's defense table based on the last attack done...
    ExecWait $SetElementDefense_Master
    ExecWait $TeaHeal_Master % Heal the master if Challenge Mode is on and his element is currently water
   A4:  Return
   AC:  End
}

% Master 2 Next Turn Script: Adjust to remove ceratin dialouge in low max HP modes...
@ $Script_NextTurn_8022CFFC
{
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   28:  Call  GetBattlePhase    ( *Var0 )
   38:  Switch  *Var0
   44:  	Case  ==  0000000A
   50:  		Call  GetActorVar   ( .Actor:Self 00000000 *Var0 )
   68:  		If  *Var0  ==  00000000
   78:  			Call  UseBattleCamPreset    ( 0000000D )
   88:  			Call  BattleCamTargetActor  ( .Actor:Self )
   98:  			Call  SetTargetActor        ( .Actor:Self .Actor:Player )
   AC:  			Wait  10`
   B8:  			Call  ActorSpeak    ( 0002002E .Actor:Self 00000001 00A20009 00A20005 ) % To battle!!
   D8:  			Call  SetActorVar   ( .Actor:Self 00000000 00000001 )
   F0:  			Call  SetAnimation  ( .Actor:Self 00000001 00A2000D )
  108:  			Wait  15`
  114:  			Call  SetAnimation  ( .Actor:Self 00000001 00A2000C )
  12C:  			Wait  5`
  138:  			Call  PlaySoundAtActor      ( .Actor:Self 000020B8 )
  14C:  			Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  168:  			Add   *Var1  00000014
  178:  			Call  PlayEffect    ( 00000013 00000001 *Var0 *Var1 *Var2 *Fixed[1.0] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  1BC:  			Set   *Var0  00000000
  1CC:  			Call  SetAnimation  ( .Actor:Self 00000001 00A20000 )
  1E4:  			Loop  0000000F
  1F0:  				Add   *Var0  00000018
  200:  				Call  SetActorRotation  ( .Actor:Self 00000000 *Var0 00000000 )
  21C:  				Wait  1`
  228:  			EndLoop
  230:  			Set   *Var0  00000000
  240:  			Call  SetAnimation  ( .Actor:Self 00000001 00A20000 )
  258:  			Loop  00000005
  264:  				Add   *Var0  00000012
  274:  				Call  SetActorRotation  ( .Actor:Self 00000000 *Var0 00000000 )
  290:  				Wait  1`
  29C:  			EndLoop
  2A4:  			Call  PlaySoundAtActor  ( .Actor:Self .Sound:SmokeBurst )
  2B8:  			Thread
  2C0:  				Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  2DC:  				Add   *Var1  00000003
  2EC:  				Loop  00000003
  2F8:  					Call  PlayEffect    ( ~FX:BigSmokePuff *Var0 *Var1 *Var2 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  33C:  					Wait  3`
  348:  				EndLoop
  350:  			EndThread
  358:  			Call  SetAnimation  ( .Actor:Self 00000001 00A20000 )
  370:  			Loop  00000005
  37C:  				Add   *Var0  00000024
  38C:  				Call  SetActorRotation  ( .Actor:Self 00000000 *Var0 00000000 )
  3A8:  				Wait  1`
  3B4:  			EndLoop
  3BC:  			Call  SetAnimation  ( .Actor:Self 00000001 00A20001 )
  3D4:  			Loop  00000005
  3E0:  				Add   *Var0  00000012
  3F0:  				Call  SetActorRotation  ( .Actor:Self 00000000 *Var0 00000000 )
  40C:  				Wait  1`
  418:  			EndLoop
  420:  			Wait  15`
  42C:  			Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8022B68C )
  444:  			Call  SetAnimation      ( .Actor:Self 00000001 00A20008 )
  45C:  			Wait  15`
  468:  			Call  UseBattleCamPreset    ( 00000002 )
  478:  			Call  MoveBattleCamOver (  10` )
  488:  			Call  ActorSpeak        ( 00020033 .Actor:Self 00000001 00A2000A 00A20006 ) % Mario, you will fall!
  4A8:  		EndIf
  4B0:  	Case  ==  0000000C
  4BC:  		Call  GetStatusFlags    ( .Actor:Self *Var0 )
  4D0:  		If  *Var0  &  ~Flags:StatusFlags:Sleep|Paralyze|Dizzy|Stone|Stop % 351000
  4E0:  			BreakCase
  4E8:  		EndIf
                % Skip these dialouges if in a mode where max HP is 5
                If *GF_DangerMode == .False
  4F0:  		    Call  GetActorHP    ( .Actor:Self *Var0 )
  504:  		    Call  GetEnemyMaxHP ( .Actor:Self *Var1 )
  518:  		    Div   *Var1  00000002
  528:  		    If  *Var0  <=  *Var1
  538:  			    Call  UseBattleCamPreset    ( 00000002 )
  548:  			    Call  MoveBattleCamOver     (  10` )
  558:  			    Call  ActorSpeak    ( 00020036 .Actor:Self 00000001 00A2000A 00A20006 ) % Don't lose your concentration. I have yet to truly ...
  578:  			    BreakCase
  580:  		    EndIf
  588:  		    Call  GetPlayerHP   ( *Var0 )
  598:  		    If  *Var0  <=  00000005
  5A8:  			    Call  UseBattleCamPreset    ( 00000002 )
  5B8:  			    Call  MoveBattleCamOver     (  10` )
  5C8:  			    Call  ActorSpeak    ( 00020037 .Actor:Self 00000001 00A2000A 00A20006 ) % Mario! Is this your best?!
  5E8:  			    BreakCase
  5F0:  		    EndIf
                EndIf
  5F8:  EndSwitch
  600:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  614:  Call  UseIdleAnimation  ( .Actor:Self .True )
  628:  Return
  630:  End
}


% Adjust the Master's Attack to change Elements both damage and his defense...
@ $Script_SingleStrike2
{
    0:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
   14:  Call  UseBattleCamPreset    ( 0000003F )
   24:  Call  BattleCamTargetActor  ( .Actor:Self )
   34:  Call  8024ECF8  ( FFFFFFFF 00000001 00000000 )
   4C:  Call  SetAnimation      ( .Actor:Self 00000001 00A20008 )
   64:  Call  SetGoalToTarget   ( .Actor:Self )
   74:  Call  AddGoalPos        ( .Actor:Self  50`  0`  0` )
   90:  Call  SetActorSpeed     ( .Actor:Self *Fixed[3.8] )
   A4:  Call  RunToGoal ( .Actor:Self  0` .False )
   BC:  Call  SetAnimation      ( .Actor:Self 00000001 00A20003 )
   D4:  Wait  10`
   E0:  Call  PlaySoundAtActor  ( .Actor:Self 000020BD )
   F4:  Thread
   FC:  	Wait  15`
  108:  	Call  PlaySoundAtActor  ( .Actor:Self 000020BD )
  11C:  EndThread
  124:  Call  SetAnimation      ( .Actor:Self 00000001 00A2000E )
  13C:  Wait  30`
  148:  Call  SetAnimation      ( .Actor:Self 00000001 00A2000F )
  160:  Call  PlaySoundAtActor  ( .Actor:Self 000020BC )
  174:  Call  PlaySoundAtActor  ( .Actor:Self 000020BB )
  188:  Call  EnemyTestTarget   ( .Actor:Self *VarA ~Flags:DamageType:0 00000000 00000000 00000010 )
  1AC:  Switch  *VarA
  1B8:  	CaseOR  ==  .HitResult:Miss % 6
  1C4:  	CaseOR  ==  .HitResult:Lucky % 5
  1D0:  		Call  UseBattleCamPreset    ( 00000002 )
  1E0:  		Call  EnableActorBlur   ( .Actor:Self 00000001 )
  1F4:  		Call  SetGoalToTarget   ( .Actor:Self )
  204:  		Call  AddGoalPos        ( .Actor:Self  -50`  0`  0` )
  220:  		Call  RunToGoal ( .Actor:Self  10` .False )
  238:  		Call  SetAnimation      ( .Actor:Self 00000001 00A20003 )
  250:  		Call  EnableActorBlur   ( .Actor:Self 00000000 )
  264:  		Wait  10`
  270:  		If  *VarA  ==  .HitResult:Lucky % 5
  280:  			Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
  2A4:  		EndIf
  2AC:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20003 )
  2C4:  		Call  SetGoalToHome ( .Actor:Self )
  2D4:  		Call  SetActorSpeed ( .Actor:Self *Fixed[8.0] )
  2E8:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20008 )
  300:  		Call  RunToGoal     ( .Actor:Self  0` .False )
  318:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20003 )
  330:  		Return
  338:  	EndCaseGroup
  340:  EndSwitch
  348:  Call  EnableActorBlur   ( .Actor:Self 00000001 )
  35C:  Call  SetGoalToTarget   ( .Actor:Self )
  36C:  Call  AddGoalPos        ( .Actor:Self  0`  0`  0` )
  388:  Call  RunToGoal ( .Actor:Self  5` .False )
  3A0:  Call  EnableActorBlur   ( .Actor:Self 00000000 )
  3B4:  Call  PlaySoundAtActor  ( .Actor:Self 000003ED )
  3C8:  Call  PlaySoundAtActor  ( .Actor:Self 000020BB )
  3DC:  Wait  2`
  3E8:  ExecWait $ElementSet_SingleStrike2 % Determines Element and then attacks
  410:  Switch  *Var0
  41C:  	CaseOR  ==  .HitResult:Hit % 0
  428:  	CaseOR  ==  .HitResult:QuakeImmune % 2
  434:  		Call  UseBattleCamPreset    ( 00000002 )
  444:  		Call  PlaySoundAtActor      ( .Actor:Self 000020BB )
  458:  		Thread
  460:  			Call  SetActorRotationOffset    ( .Actor:Self 00000000 00000014 00000000 )
  47C:  			Set   *Var0  00000000
  48C:  			Loop  0000000A
  498:  				Add   *Var0  00000024
  4A8:  				Call  SetActorRotation  ( .Actor:Self 00000000 00000000 *Var0 )
  4C4:  				Wait  1`
  4D0:  			EndLoop
  4D8:  		EndThread
  4E0:  		Call  SetGoalToTarget       ( .Actor:Self )
  4F0:  		Call  GetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  50C:  		Add   *Var0  00000032
  51C:  		Set   *Var1  00000000
  52C:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.2] )
  540:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20021 )
  558:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  574:  		Call  JumpToGoal    ( .Actor:Self  15` .False .True .False )
  594:  		Call  PlaySoundAtActor      ( .Actor:Self 000020BA )
  5A8:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20023 )
  5C0:  		Call  SetActorRotationOffset    ( .Actor:Self 00000000 00000000 00000000 )
  5DC:  		Wait  3`
  5E8:  		Add   *Var0  00000014
  5F8:  		Set   *Var1  00000000
  608:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20021 )
  620:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  63C:  		Call  JumpToGoal    ( .Actor:Self  5` .False .True .False )
  65C:  		Call  PlaySoundAtActor      ( .Actor:Self 000003B4 )
  670:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20023 )
  688:  		Wait  20`
  694:  	EndCaseGroup
  69C:  EndSwitch
  6A4:  Call  SetAnimation  ( .Actor:Self 00000001 00A20003 )
  6BC:  Call  SetGoalToHome ( .Actor:Self )
  6CC:  Call  SetActorSpeed ( .Actor:Self *Fixed[3.8] )
  6E0:  Call  SetAnimation  ( .Actor:Self 00000001 00A20008 )
  6F8:  Call  RunToGoal     ( .Actor:Self  0` .False )
  710:  Call  SetAnimation  ( .Actor:Self 00000001 00A20003 )
  728:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  73C:  Call  UseIdleAnimation  ( .Actor:Self .True )
  750:  Return
  758:  End
}


% This script determines what element the Master 2 single attack will do...
#new:Script $ElementSet_SingleStrike2
{
    % First swap elements
    %ExecWait $SwapToNextElement_Master Not needed as element swap happens at the start
    Switch *GB_Master_Element
        % Ice Attack
        Case == 00000000
            Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Ice 00000000 00000000 00000008 00000030 )
        % Fire Attack
        Case == 00000001
            Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Fire 00000000 00000000 00000008 00000030 )
        % Water Attack
        Case == 00000002
            Exec $AddWaterCount % Add to water count for hard Mode Heal
            Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Water 00000000 00000000 00000008 00000030 )
        % Ice Attack
        Case == 00000003
            Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Electric 00000000 00000000 00000008 00000030 )
        % If no element gets called, set to do normal damage (Failsafe)
        Default
            Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000000 00000008 00000030 )
    EndSwitch
    
    Return
    End
}



% Master strikes with two elemental attacks....
    % For Master 2 fight the element will stay the same for both attacks...
    % Still crashes on console when Mario is electricfied and I'm not sure why... Only thing that's different is the dynamaic element change,
    % It'd take up a lot of space but maybe I can make a double Strike for each element and call based on attack instead??
    % Bad news... the crash isn't console exclusive...

    % Also happens with Master 3 fight so I think it's something with electrified and muti-hit strikes in general (at least with the changes I made that is...)
@ $Script_DoubleStrike2
{
    0:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
   14:  Call  UseBattleCamPreset    ( 00000008 )
   24:  Call  BattleCamTargetActor  ( .Actor:Self )
   34:  Call  SetBattleCamZoom  (  200` )
   44:  Call  SetBattleCamOffsetZ   (  13` )
   54:  Call  MoveBattleCamOver (  60` )
   64:  Call  SetAnimation      ( .Actor:Self 00000001 00A20015 )
   7C:  Wait  40`
   88:  Call  SetGoalToTarget   ( .Actor:Self )
   98:  Call  UseBattleCamPreset    ( 00000007 )
   A8:  Call  BattleCamTargetActor  ( .Actor:Self )
   B8:  Call  MoveBattleCamOver (  1` )
   C8:  Wait  10`
   D4:  Call  PlaySoundAtActor  ( .Actor:Self 000003B9 )
   E8:  Call  PlaySoundAtActor  ( .Actor:Self 000020BB )
   FC:  Call  EnemyTestTarget   ( .Actor:Self *VarA ~Flags:DamageType:0 00000000 00000000 00000010 )
  120:  Switch  *VarA
  12C:  	CaseOR  ==  .HitResult:Miss % 6
  138:  	CaseOR  ==  .HitResult:Lucky % 5
  144:  		Call  UseBattleCamPreset    ( 00000002 )
  154:  		Call  EnableActorBlur   ( .Actor:Self 00000001 )
  168:  		Call  SetGoalToTarget   ( .Actor:Self )
  178:  		Call  AddGoalPos        ( .Actor:Self  -50`  0`  0` )
  194:  		Call  SetAnimation      ( .Actor:Self 00000001 00A20013 )
  1AC:  		Call  RunToGoal ( .Actor:Self  10` .False )
  1C4:  		Call  SetAnimation      ( .Actor:Self 00000001 00A20003 )
  1DC:  		Call  EnableActorBlur   ( .Actor:Self 00000000 )
  1F0:  		Wait  10`
  1FC:  		If  *VarA  ==  .HitResult:Lucky % 5
  20C:  			Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
  230:  		EndIf
  238:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20003 )
  250:  		Call  SetGoalToHome ( .Actor:Self )
  260:  		Call  SetActorSpeed ( .Actor:Self *Fixed[8.0] )
  274:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20008 )
  28C:  		Call  RunToGoal     ( .Actor:Self  0` .False )
  2A4:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20003 )
  2BC:  		Return
  2C4:  	EndCaseGroup
            % Since Static crashes the game normally, trigger a flag if there's static so we can detour around the crash
            Case  ==  .HitResult:HitStatic % 7
            648:  		Call  GetStatusFlags    ( .Actor:Self *Var0 )
            65C:  		If  *Var0  &  ~Flags:StatusFlags:Static % 2000
            66C:  			Set   *Flag[00]  .False 
            67C:  		Else
            684:  			Set   *Flag[00]  .True 
            694:  		EndIf
  2CC:  EndSwitch
      
  2D4:  Call  EnableActorBlur   ( .Actor:Self 00000001 )
  2E8:  Call  SetGoalToTarget   ( .Actor:Self )
  2F8:  Call  AddGoalPos        ( .Actor:Self  0`  0`  0` )
  314:  Call  SetAnimation      ( .Actor:Self 00000001 00A20013 )
  32C:  Call  RunToGoal ( .Actor:Self  5` .False )
% End attack early if static to (hopefully) avoid crashing the game
If  *Flag[00]  ==  .True 
    % Do one elemental Attack, then stop (It can do slightly more damage s)...
    % Determine Element attack.
    Switch *GB_Master_Element
    % Ice Attack
    Case == 00000000
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Ice 00000000 00000000 00000007 00000010 )
    % Fire Attack
    Case == 00000001
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Fire 00000000 00000000 00000007 00000010 )
    % Water Attack
    Case == 00000002
        Exec $AddWaterCount % Add to water count for hard Mode Heal_Master % Heal the master if Challenge Mode is on...
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Water 00000000 00000000 00000007 00000010 )
        
    % Electric Attack
    Case == 00000003
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Electric 00000000 00000000 00000007 00000010 )
    % If no element gets called, set to do normal damage (Failsafe)
    Default
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000000 00000007 00000010 )
    EndSwitch
    Return
EndIf
  344:  Call  EnableActorBlur   ( .Actor:Self 00000000 )
  358:  Thread
  360:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[1.0] )
  37C:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[4.0] )
  398:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[3.0] )
  3B4:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[2.0] )
  3D0:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[1.0] )
  3EC:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[0.5] )
  408:  EndThread

  410:  Call  PlaySoundAtActor  ( .Actor:Self 000003ED )
  424:  Call  PlaySoundAtActor  ( .Actor:Self 000020BB )
  438:  Wait  2`
  444:    Thread
    % If the master will hit Mario then swap elements and do elemental damage....
%ExecWait $SwapToNextElement_Master % Not needed as element swap happens at the start of the attack
% Determine Element attack.
Switch *GB_Master_Element
    % Ice Attack
    Case == 00000000
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Ice 00000000 00000000 00000005 00000010 )
    % Fire Attack
    Case == 00000001
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Fire 00000000 00000000 00000005 00000010 )
    % Water Attack
    Case == 00000002
        Exec $AddWaterCount % Add to water count for hard Mode Heal_Master % Heal the master if Challenge Mode is on...
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Water 00000000 00000000 00000005 00000010 )
        
    % Electric Attack
    Case == 00000003
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Electric 00000000 00000000 00000005 00000010 )
    % If no element gets called, set to do normal damage (Failsafe)
    Default
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000000 00000005 00000010 )
EndSwitch

EndThread
  46C:  Wait  15`
  478:  Call  UseBattleCamPreset    ( 00000002 )
  488:  Thread
  490:  	Call  PlaySoundAtActor  ( .Actor:Self .Sound:Jump )
  4A4:  	Call  EnableActorBlur   ( .Actor:Self 00000001 )
  4B8:  	Call  SetAnimation      ( .Actor:Self 00000001 00A20014 )
  4D0:  	Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.9] )
  4E4:  	Call  JumpToGoal        ( .Actor:Self  25` .False .True .False )
  504:  	Call  EnableActorBlur   ( .Actor:Self 00000000 )
  518:  EndThread
  520:  Thread
  528:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[0.5] )
  544:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[1.5] )
  560:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[0.5] )
  57C:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[0.2] )
  598:  EndThread
  5A0:  Wait  2`
  5AC:  Call  PlaySoundAtActor  ( .Actor:Self 000003ED )
  5C0:  Call  PlaySoundAtActor  ( .Actor:Self 000020BB )
  5D4:  Wait  2`
  5E0:  % Determine Element of Attack.
Thread
% Determine Element ( No swap mid attack for Master 2)
Switch *GB_Master_Element
    % Ice Attack
    Case == 00000000
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Ice 00000000 00000000 00000006 00000020 )
    % Fire Attack
    Case == 00000001
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Fire 00000000 00000000 00000006 00000020 )
    % Water Attack
    Case == 00000002
        % Since it's guarnteed to be double water, skip the second count. It wouldn't make sense if Master 2 healed more than Master 3
        %Exec $AddWaterCount % Add to water count for hard Mode Heal_Master % Heal the master if Challenge Mode is on...
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Water 00000000 00000000 00000006 00000020 )
        
    % Electric Attack
    Case == 00000003
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Electric 00000000 00000000 00000006 00000020 )
    % If no element gets called, set to do normal damage (Failsafe)
    Default
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000000 00000006 00000020 )
EndSwitch
EndThread
  608:  Wait  15`
  614:  Switch  *Var0
  620:  	CaseOR  ==  .HitResult:Hit % 0
  62C:  	CaseOR  ==  .HitResult:QuakeImmune % 2
  638:  		Call  UseBattleCamPreset    ( 00000002 )
  648:  		Call  PlaySoundAtActor      ( .Actor:Self 000020BE )
  65C:  		Call  PlaySoundAtActor      ( .Actor:Self 000020BB )
  670:  		Thread
  678:  			Call  SetActorRotationOffset    ( .Actor:Self 00000000 0000000A 00000000 )
  694:  			Set   *Var0  00000000
  6A4:  			Loop  0000000A
  6B0:  				Add   *Var0  00000024
  6C0:  				Call  SetActorRotation  ( .Actor:Self 00000000 00000000 *Var0 )
  6DC:  				Wait  1`
  6E8:  			EndLoop
  6F0:  		EndThread
  6F8:  		Call  SetGoalToTarget       ( .Actor:Self )
  708:  		Call  GetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  724:  		Add   *Var0  00000032
  734:  		Set   *Var1  00000000
  744:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.8] )
  758:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20021 )
  770:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  78C:  		Call  JumpToGoal    ( .Actor:Self  30` .False .True .False )
  7AC:  		Call  PlaySoundAtActor      ( .Actor:Self 000020BA )
  7C0:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20023 )
  7D8:  		Call  SetActorRotationOffset    ( .Actor:Self 00000000 00000000 00000000 )
  7F4:  		Wait  3`
  800:  		Add   *Var0  00000014
  810:  		Set   *Var1  00000000
  820:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20021 )
  838:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  854:  		Call  JumpToGoal    ( .Actor:Self  10` .False .True .False )
  874:  		Call  PlaySoundAtActor      ( .Actor:Self 000003B4 )
  888:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20023 )
  8A0:  		Wait  20`
  8AC:  	EndCaseGroup
  8B4:  EndSwitch
  8BC:  Call  SetAnimation  ( .Actor:Self 00000001 00A20003 )
  8D4:  Call  SetGoalToHome ( .Actor:Self )
  8E4:  Call  SetActorSpeed ( .Actor:Self *Fixed[3.8] )
  8F8:  Call  SetAnimation  ( .Actor:Self 00000001 00A20008 )
  910:  Call  RunToGoal     ( .Actor:Self  0` .False )
  928:  Call  SetAnimation  ( .Actor:Self 00000001 00A20003 )
  940:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  954:  Call  UseIdleAnimation  ( .Actor:Self .True )
  % All Sinks Mode addition:
/% % Messes up animations so I'm leaving it out for now.
% Just to assure it's impossible to get through the attack without take at least 1 damage do a stronger attack if they somehow still have 5 HP...
If *GB_FileCodeMode == 8`
    % Do a second attack if Mario is 5 hp or above
    Call  GetActorHP    ( .Actor:Player *VarD  )
    If *VarD > 00000004 % 5 HP or more
        ExecWait  $Script_ExtraStrike3 % Do one extra blow...
    EndIf
EndIf
%/
  968:  Return
  970:  End
}

% ----Master 3 -----

% Make Master 3 immune to sleep; paraylize and Dizzy lasts one last turn
    % Would make him immune to Paraylize too but you're giving a static leaf right before the fight, 
        %even if the purpose of that is purely to have static, it might confuse players if they can't use the full mechanic of the item they just got...
        % So it's probably better to just nerf turn count rather than make him flat out immune to it for this... 
@ $StatusTable_8022DA44
{
	.Status:Normal     50`
	.Status:Default    50`
	.Status:Sleep      0`
	.Status:Poison     50`
	.Status:Frozen      0`
	.Status:Dizzy       0`
	.Status:Fear        0`
	.Status:Static      0`
	.Status:Paralyze   50` %
	.Status:Shrink     20`
	.Status:Stop       50`
	.Status:DefaultTurnMod    0`
	.Status:SleepTurnMod     -2`
	.Status:PoisonTurnMod     0`
	.Status:FrozenTurnMod     0`
	.Status:DizzyTurnMod     -2`
	.Status:FearTurnMod       0`
	.Status:StaticTurnMod    -2`
	.Status:ParalyzeTurnMod  -2`
	.Status:ShrinkTurnMod    -1`
	.Status:StopTurnMod      -1`
	.Status:End
}

@ $TheMaster3
{
	% stats
	[Index]        7Cb
	[Level]         0`b
    [MaxHP]        99`b
	[Coins]         0`b
	[Flags]       00000000
	[StatusTable] $StatusTable_8022DA44
	% ai
	[PartsCount]    2`s
	[PartsTable]  $PartsTable_8022DAF0
	[Script]      $Script_Init_8022DB60
	% move effectiveness
	[Escape]      100`b
	[Item]          0`b
	[AirLift]       0`b
	[Hurricane]     0`b % Bow's "Spook" as well
	[UpAndAway]     0`b
	[PowerBounce]  10`b
	[SpinSmash]     0`b % weight (0-4)
	% ui positions
	[Size]         30`b  35`b % width height
	[HealthBar]     0`b   0`b % dx dy
	[StatusTurn]  -10`b  30`b % dx dy
	[StatusIcon]   10`b  30`b % dx dy
}

% Master 3's turn: 
    % Add Tea heal and setting current defense table based on element....
    % This works, but I still have the issue of electrified stopping the attack before the swap can happen...
    % Might half to go back to setting defense before the first strike... 
    %(not sure how I'll get around that with tea heal... I might have to accept skipping healing as a "reward" for abusing electrified)
@ $Script_TakeTurn_80230B20
{
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   % Reset Water Count to 0 (in case the previous turn ended before doing so)
   ExecWait $WaterCountReset

        %Call element swap and defense update before attacking in case Mario is Electrified
        ExecWait $SwapToNextElement_Master
        ExecWait $SetElementDefense_Master
   28:  Call  GetActorVar       ( .Actor:Self 00000001 *Var0 )
   40:  If  *Var0  ==  00000000
   50:  	Call  GetActorHP    ( .Actor:Self *Var0 )
   64:  	If  *Var0  <  00000000
   74:  		ExecWait  $Script_80230240
   80:  	Else
                % If the Master gets to less than 10 HP, immediately go for the triple strike
                If  *Var0  <  00000010
                    ExecWait  $Script_TripleStrike3
                    % Skip to end...
                    Goto 0
                EndIf
                % When less than 20 HP randomly choose between the status strike and triple strike
   9C:  		If  *Var0  <  00000014
                    Call  RandInt   ( 00000064 *Var0 )
    C0:  			Switch  *Var0
    E4:  				Case  <  00000032
    F0:  					ExecWait $Script_StatusStrike
    FC:  				Default
   104:  					ExecWait  $Script_TripleStrike3
   110:  			EndSwitch
  118:  		Else
  120:  			Call  RandInt   ( 00000064 *Var0 )
  134:  			Switch  *Var0
  140:  				Case  <  00000032
  14C:  					ExecWait  $Script_DoubleStrike3
  158:  				Default
                            % If hard mode is on, single strike gets completly replaced by status strike
                            If *GF_HardMode == .True
                                ExecWait  $Script_StatusStrike
                            Else
  160:  					    ExecWait  $Script_SingleStrike3
                            EndIf
  16C:  			EndSwitch
  174:  		EndIf
  17C:  	EndIf
            
  184:  Else
  18C:  	Call  RandInt   ( 00000064 *Var0 )
  1A0:  	Switch  *Var0
  1AC:  		Case  <  00000064
  1B8:  			ExecWait  $Script_80230914
  1C4:  		Case  <  00000032
  1D0:  			ExecWait  $Script_8023059C
  1DC:  	EndSwitch
  1E4:  EndIf
        Label 0
  1EC:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  200:  Call  UseIdleAnimation  ( .Actor:Self .True )
        % Set defense and tea heal
        ExecWait $SetElementDefense_Master
        ExecWait $TeaHeal_Master
  214:  Return
  21C:  End
}

% Master Attacks

@ $Script_SingleStrike3
{
    0:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
   14:  Call  UseBattleCamPreset    ( 0000003F )
   24:  Call  BattleCamTargetActor  ( .Actor:Self )
   34:  Call  8024ECF8  ( FFFFFFFF 00000001 00000000 )
   4C:  Call  SetAnimation      ( .Actor:Self 00000001 00A20008 )
   64:  Call  SetGoalToTarget   ( .Actor:Self )
   74:  Call  AddGoalPos        ( .Actor:Self  50`  0`  0` )
   90:  Call  SetActorSpeed     ( .Actor:Self *Fixed[3.8] )
   A4:  Call  RunToGoal ( .Actor:Self  0` .False )
   BC:  Call  SetAnimation      ( .Actor:Self 00000001 00A20003 )
   D4:  Wait  10`
   E0:  Call  PlaySoundAtActor  ( .Actor:Self 000020BD )
   F4:  Thread
   FC:  	Wait  15`
  108:  	Call  PlaySoundAtActor  ( .Actor:Self 000020BD )
  11C:  EndThread
  124:  Call  SetAnimation      ( .Actor:Self 00000001 00A2000E )
  13C:  Wait  30`
  148:  Call  SetAnimation      ( .Actor:Self 00000001 00A2000F )
  160:  Call  PlaySoundAtActor  ( .Actor:Self 000020BC )
  174:  Call  PlaySoundAtActor  ( .Actor:Self 000020BB )
  188:  Call  EnemyTestTarget   ( .Actor:Self *VarA ~Flags:DamageType:0 00000000 00000000 00000010 )
  1AC:  Switch  *VarA
  1B8:  	CaseOR  ==  .HitResult:Miss % 6
  1C4:  	CaseOR  ==  .HitResult:Lucky % 5
  1D0:  		Call  UseBattleCamPreset    ( 00000002 )
  1E0:  		Call  EnableActorBlur   ( .Actor:Self 00000001 )
  1F4:  		Call  SetGoalToTarget   ( .Actor:Self )
  204:  		Call  AddGoalPos        ( .Actor:Self  -50`  0`  0` )
  220:  		Call  RunToGoal ( .Actor:Self  10` .False )
  238:  		Call  SetAnimation      ( .Actor:Self 00000001 00A20003 )
  250:  		Call  EnableActorBlur   ( .Actor:Self 00000000 )
  264:  		Wait  10`
  270:  		If  *VarA  ==  .HitResult:Lucky % 5
  280:  			Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
  2A4:  		EndIf
  2AC:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20003 )
  2C4:  		Call  SetGoalToHome ( .Actor:Self )
  2D4:  		Call  SetActorSpeed ( .Actor:Self *Fixed[8.0] )
  2E8:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20008 )
  300:  		Call  RunToGoal     ( .Actor:Self  0` .False )
  318:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20003 )
  330:  		Return
  338:  	EndCaseGroup
  340:  EndSwitch
  348:  Call  EnableActorBlur   ( .Actor:Self 00000001 )
  35C:  Call  SetGoalToTarget   ( .Actor:Self )
  36C:  Call  AddGoalPos        ( .Actor:Self  0`  0`  0` )
  388:  Call  RunToGoal ( .Actor:Self  5` .False )
  3A0:  Call  EnableActorBlur   ( .Actor:Self 00000000 )
  3B4:  Call  PlaySoundAtActor  ( .Actor:Self 000003ED )
  3C8:  Call  PlaySoundAtActor  ( .Actor:Self 000020BB )
  3DC:  Wait  2`
  %Test for each element Master can do...
  Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:Fire|Water|Ice|Electric 00000000 00000000 00000000 )
    % If the master will hit Mario then swap elements and do elemental damage....
% First swap elements (Var B will store the damage type flag for the actual attack)
%ExecWait $SwapToNextElement_Master (Element swap is now done directly in the Take Turn function in case of electrified)

%Add Damage based on challenge mode
% Determine damage of attack based on game mode *VarC
Set *VarC 0000000A
If *GB_FileCodeMode == 8`
    Add *VarC 00000000
EndIf

% Determine Element attack
Switch *GB_Master_Element
    % Ice Attack
    Case == 00000000
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Ice 00000000 00000000 *VarC 00000030 )
    % Fire Attack
    Case == 00000001
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Fire 00000000 00000000 *VarC 00000030 )
    % Water Attack
    Case == 00000002
        Exec $AddWaterCount % Add to water count for hard Mode Heal_Master % Heal the master if Challenge Mode is on...
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Water 00000000 00000000 *VarC 00000030 )
        
    % Electric Attack
    Case == 00000003
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Electric 00000000 00000000 *VarC 00000030 )
    % If no element gets called, set to do normal damage (Failsafe)
    Default
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000000 *VarC 00000030 )
EndSwitch
  410:  Switch  *Var0
  41C:  	CaseOR  ==  .HitResult:Hit % 0
  428:  	CaseOR  ==  .HitResult:QuakeImmune % 2
  434:  		Call  UseBattleCamPreset    ( 00000002 )
  444:  		Call  PlaySoundAtActor      ( .Actor:Self 000020BB )
  458:  		Thread
  460:  			Call  SetActorRotationOffset    ( .Actor:Self 00000000 00000014 00000000 )
  47C:  			Set   *Var0  00000000
  48C:  			Loop  0000000A
  498:  				Add   *Var0  00000024
  4A8:  				Call  SetActorRotation  ( .Actor:Self 00000000 00000000 *Var0 )
  4C4:  				Wait  1`
  4D0:  			EndLoop
  4D8:  		EndThread
  4E0:  		Call  SetGoalToTarget       ( .Actor:Self )
  4F0:  		Call  GetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  50C:  		Add   *Var0  00000032
  51C:  		Set   *Var1  00000000
  52C:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.2] )
  540:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20021 )
  558:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  574:  		Call  JumpToGoal    ( .Actor:Self  15` .False .True .False )
  594:  		Call  PlaySoundAtActor      ( .Actor:Self 000020BA )
  5A8:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20023 )
  5C0:  		Call  SetActorRotationOffset    ( .Actor:Self 00000000 00000000 00000000 )
  5DC:  		Wait  3`
  5E8:  		Add   *Var0  00000014
  5F8:  		Set   *Var1  00000000
  608:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20021 )
  620:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  63C:  		Call  JumpToGoal    ( .Actor:Self  5` .False .True .False )
  65C:  		Call  PlaySoundAtActor      ( .Actor:Self 000003B4 )
  670:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20023 )
  688:  		Wait  20`
  694:  	EndCaseGroup
  69C:  EndSwitch
  6A4:  Call  SetAnimation  ( .Actor:Self 00000001 00A20003 )
  6BC:  Call  SetGoalToHome ( .Actor:Self )
  6CC:  Call  SetActorSpeed ( .Actor:Self *Fixed[3.8] )
  6E0:  Call  SetAnimation  ( .Actor:Self 00000001 00A20008 )
  6F8:  Call  RunToGoal     ( .Actor:Self  0` .False )
  710:  Call  SetAnimation  ( .Actor:Self 00000001 00A20003 )
  728:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  73C:  Call  UseIdleAnimation  ( .Actor:Self .True )
  750:  Return
  758:  End
}

@ $Script_DoubleStrike3
{
    0:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
   14:  Call  UseBattleCamPreset    ( 00000008 )
   24:  Call  BattleCamTargetActor  ( .Actor:Self )
   34:  Call  SetBattleCamZoom  (  200` )
   44:  Call  SetBattleCamOffsetZ   (  13` )
   54:  Call  MoveBattleCamOver (  60` )
   64:  Call  SetAnimation      ( .Actor:Self 00000001 00A20015 )
   7C:  Wait  40`
   88:  Call  SetGoalToTarget   ( .Actor:Self )
   98:  Call  UseBattleCamPreset    ( 00000007 )
   A8:  Call  BattleCamTargetActor  ( .Actor:Self )
   B8:  Call  MoveBattleCamOver (  1` )
   C8:  Wait  10`
   D4:  Call  PlaySoundAtActor  ( .Actor:Self 000003B9 )
   E8:  Call  PlaySoundAtActor  ( .Actor:Self 000020BB )
   FC:  Call  EnemyTestTarget   ( .Actor:Self *VarA ~Flags:DamageType:0 00000000 00000000 00000010 )
  120:  Switch  *VarA
  12C:  	CaseOR  ==  .HitResult:Miss % 6
  138:  	CaseOR  ==  .HitResult:Lucky % 5
  144:  		Call  UseBattleCamPreset    ( 00000002 )
  154:  		Call  EnableActorBlur   ( .Actor:Self 00000001 )
  168:  		Call  SetGoalToTarget   ( .Actor:Self )
  178:  		Call  AddGoalPos        ( .Actor:Self  -50`  0`  0` )
  194:  		Call  SetAnimation      ( .Actor:Self 00000001 00A20013 )
  1AC:  		Call  RunToGoal ( .Actor:Self  10` .False )
  1C4:  		Call  SetAnimation      ( .Actor:Self 00000001 00A20003 )
  1DC:  		Call  EnableActorBlur   ( .Actor:Self 00000000 )
  1F0:  		Wait  10`
  1FC:  		If  *VarA  ==  .HitResult:Lucky % 5
  20C:  			Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
  230:  		EndIf
  238:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20003 )
  250:  		Call  SetGoalToHome ( .Actor:Self )
  260:  		Call  SetActorSpeed ( .Actor:Self *Fixed[8.0] )
  274:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20008 )
  28C:  		Call  RunToGoal     ( .Actor:Self  0` .False )
  2A4:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20003 )
  2BC:  		Return
  2C4:  	EndCaseGroup
            % Since Static crashes the game normally, trigger a flag if there's static so we can detour around the crash
            Case  ==  .HitResult:HitStatic % 7
            648:  		Call  GetStatusFlags    ( .Actor:Self *Var0 )
            65C:  		If  *Var0  &  ~Flags:StatusFlags:Static % 2000
            66C:  			Set   *Flag[00]  .False 
            67C:  		Else
            684:  			Set   *Flag[00]  .True 
            694:  		EndIf
  2CC:  EndSwitch
  2D4:  Call  EnableActorBlur   ( .Actor:Self 00000001 )
  2E8:  Call  SetGoalToTarget   ( .Actor:Self )
  2F8:  Call  AddGoalPos        ( .Actor:Self  0`  0`  0` )
  314:  Call  SetAnimation      ( .Actor:Self 00000001 00A20013 )
  32C:  Call  RunToGoal ( .Actor:Self  5` .False )
% End attack early if static to (hopefully) avoid crashing the game
If  *Flag[00]  ==  .True 
    % Do one elemental Attack, then stop (It can do slightly more damage s)...
    % Determine Element attack.
    Switch *GB_Master_Element
    % Ice Attack
    Case == 00000000
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Ice 00000000 00000000 00000007 00000010 )
    % Fire Attack
    Case == 00000001
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Fire 00000000 00000000 00000007 00000010 )
    % Water Attack
    Case == 00000002
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Water 00000000 00000000 00000007 00000010 )
    % Electric Attack
    Case == 00000003
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Electric 00000000 00000000 00000007 00000010 )
    % If no element gets called, set to do normal damage (Failsafe)
    Default
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000000 00000007 00000010 )
    EndSwitch
    Return
EndIf
  344:  Call  EnableActorBlur   ( .Actor:Self 00000000 )
  358:  Thread
  360:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[1.0] )
  37C:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[4.0] )
  398:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[3.0] )
  3B4:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[2.0] )
  3D0:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[1.0] )
  3EC:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[0.5] )
  408:  EndThread
  410:  Call  PlaySoundAtActor  ( .Actor:Self 000003ED )
  424:  Call  PlaySoundAtActor  ( .Actor:Self 000020BB )
  438:  Wait  2`
  444:    Thread
    % If the master will hit Mario then swap elements and do elemental damage....
%ExecWait $SwapToNextElement_Master (First element swap is now done directly in the Take Turn function in case of electrified)

%Add Damage based on challenge mode
% Determine damage of attack based on game mode *VarC
Set *VarC 00000006
If *GB_FileCodeMode == 8`
    Set *VarC 00000006
EndIf

% Determine Element attack
Switch *GB_Master_Element
    % Ice Attack
    Case == 00000000
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Ice 00000000 00000000 *VarC 00000010 )
    % Fire Attack
    Case == 00000001
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Fire 00000000 00000000 *VarC 00000010 )
    % Water Attack
    Case == 00000002
        Exec $AddWaterCount % Add to water count for hard Mode Heal_Master % Heal the master if Challenge Mode is on...
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Water 00000000 00000000 *VarC 00000010 )
        
    % Electric Attack
    Case == 00000003
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Electric 00000000 00000000 *VarC 00000010 )
    % If no element gets called, set to do normal damage (Failsafe)
    Default
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000000 *VarC 00000010 )
EndSwitch
EndThread
  46C:  Wait  15`
  478:  Call  UseBattleCamPreset    ( 00000002 )
  488:  Thread
  490:  	Call  PlaySoundAtActor  ( .Actor:Self .Sound:Jump )
  4A4:  	Call  EnableActorBlur   ( .Actor:Self 00000001 )
  4B8:  	Call  SetAnimation      ( .Actor:Self 00000001 00A20014 )
  4D0:  	Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.9] )
  4E4:  	Call  JumpToGoal        ( .Actor:Self  25` .False .True .False )
  504:  	Call  EnableActorBlur   ( .Actor:Self 00000000 )
  518:  EndThread
  520:  Thread
  528:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[0.5] )
  544:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[1.5] )
  560:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[0.5] )
  57C:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[0.2] )
  598:  EndThread
  5A0:  Wait  2`
  5AC:  Call  PlaySoundAtActor  ( .Actor:Self 000003ED )
  5C0:  Call  PlaySoundAtActor  ( .Actor:Self 000020BB )
  5D4:  Wait  2`
  Thread
    % If the master will hit Mario then swap elements and do elemental damage....
% First swap elements (Var B will store the damage type flag for the actual attack)
ExecWait $SwapToNextElement_Master

%Add Damage based on challenge mode
% Determine damage of attack based on game mode *VarC
Set *VarC 00000007

% In all Sinks mode, make sure the player takes some damage by greatly increasing the damage if Mario is still at 5 HP...
If *GB_FileCodeMode == 8`
    Set *VarC 00000006 %Drop down to 6 normally but bump up to 9 if still at 5 HP
    % Do a second attack if Mario is 5 hp or above
    Call  GetActorHP    ( .Actor:Player *VarD  )
    If *VarD > 00000004 % 5 HP or more
        Set *VarC 00000008 %Drop down to 6 normally but bump up to 9 if still at 5 HP
    EndIf
EndIf

% Determine Element attack
Switch *GB_Master_Element
    % Ice Attack
    Case == 00000000
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Ice 00000000 00000000 *VarC 00000020 )
    % Fire Attack
    Case == 00000001
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Fire 00000000 00000000 *VarC 00000020 )
    % Water Attack
    Case == 00000002
        Exec $AddWaterCount % Add to water count for hard Mode Heal_Master % Heal the master if Challenge Mode is on...
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Water 00000000 00000000 *VarC 00000020 )
    % Electric Attack
    Case == 00000003
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Electric 00000000 00000000 *VarC 00000020 )
    % If no element gets called, set to do normal damage (Failsafe)
    Default
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000000 *VarC 00000020 )
EndSwitch
EndThread
Wait  15`
Switch  *Var0
    B0C:  	CaseOR  ==  .HitResult:Hit % 0
    B18:  	CaseOR  ==  .HitResult:QuakeImmune % 2
    B24:  		Call  UseBattleCamPreset    ( 00000002 )
    B34:  		Call  PlaySoundAtActor      ( .Actor:Self 000020BE )
    B48:  		Call  PlaySoundAtActor      ( .Actor:Self 000020BB )
    B5C:  		Thread
    B64:  			Call  SetActorRotationOffset    ( .Actor:Self 00000000 0000000A 00000000 )
    B80:  			Set   *Var0  00000000
    B90:  			Loop  0000000A
    B9C:  				Add   *Var0  00000024
    BAC:  				Call  SetActorRotation  ( .Actor:Self 00000000 00000000 *Var0 )
    BC8:  				Wait  1`
    BD4:  			EndLoop
    BDC:  		EndThread
    BE4:  		Call  SetGoalToTarget       ( .Actor:Self )
    BF4:  		Call  GetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
    C10:  		Add   *Var0  00000032
    C20:  		Set   *Var1  00000000
    C30:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.8] )
    C44:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20021 )
    C5C:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
    C78:  		Call  JumpToGoal    ( .Actor:Self  30` .False .True .False )
    C98:  		Call  PlaySoundAtActor      ( .Actor:Self 000020BA )
    CAC:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20023 )
    CC4:  		Call  SetActorRotationOffset    ( .Actor:Self 00000000 00000000 00000000 )
    CE0:  		Wait  3`
    CEC:  		Add   *Var0  00000014
    CFC:  		Set   *Var1  00000000
    D0C:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20021 )
    D24:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
    D40:  		Call  JumpToGoal    ( .Actor:Self  10` .False .True .False )
    D60:  		Call  PlaySoundAtActor      ( .Actor:Self 000003B4 )
    D74:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20023 )
    D8C:  		Wait  20`
    D98:  	EndCaseGroup
    DA0:  EndSwitch
    DA8:  Call  SetAnimation  ( .Actor:Self 00000001 00A20003 )
    DC0:  Call  SetGoalToHome ( .Actor:Self )
    DD0:  Call  SetActorSpeed ( .Actor:Self *Fixed[3.8] )
    DE4:  Call  SetAnimation  ( .Actor:Self 00000001 00A20008 )
    DFC:  Call  RunToGoal     ( .Actor:Self  0` .False )
    E14:  Call  SetAnimation  ( .Actor:Self 00000001 00A20003 )
    E2C:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
    E40:  Call  UseIdleAnimation  ( .Actor:Self .True )
  968:  Return
  970:  End
}


%Master Attacks attacks three times. The pattern will always be fire, ice, electric; regardless of the Master's current element.
    % If my theory is correct, there's a console crash cause by swapping the element three times in a row, if that's the case this should fix that.
    % Actually, first test if it's tied to the defense table, if so I only need to call that once and I can do it at the end of the attack...
@ $Script_TripleStrike3
{
    %Add Damage based on challenge mode
    % Determine damage of attack based on game mode *VarC
    Set *VarC 00000005
    % Do a check to see if the Master's final attack should status (Done here so it can be applied even if Mario is Electrified)
    % In hard mode, check for status on Mario to avoid looping status effects (Store check in *VarB)
If *GF_HardMode == .True
    %Since I can't figure out how to make it work in a switch, just run each check as an if statement and turn on
    Call  GetStatusFlags    ( .Actor:Player *VarA )
    % Freeze check
    If *VarA  !& ~Flags:StatusFlags:Frozen
        Set *VarB .True
    EndIf
    %Paralyze check
    If *VarA  !& 00010002
        Set *VarB .True
    EndIf
    %Poison check
    If *VarA  !& ~Flags:StatusFlags:Poison
        Set *VarB .True
    EndIf
EndIf
% Resume the main script
    0:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
   14:  Call  UseBattleCamPreset    ( 00000008 )
   24:  Call  BattleCamTargetActor  ( .Actor:Self )
   34:  Call  SetBattleCamZoom  (  200` )
   44:  Call  SetBattleCamOffsetZ   (  13` )
   54:  Call  MoveBattleCamOver (  60` )
   64:  Call  SetAnimation      ( .Actor:Self 00000001 00A20015 )
   7C:  Wait  20`
   88:  Call  ActorSpeak        ( 0002003C .Actor:Self 00000001 00A2000A 00A20006 ) % Hyaaahhhh!!! Mario! Survive this if you can!!!!
   A8:  Call  SetGoalToTarget   ( .Actor:Self )
   B8:  Call  UseBattleCamPreset    ( 00000007 )
   C8:  Call  BattleCamTargetActor  ( .Actor:Self )
   D8:  Call  MoveBattleCamOver (  1` )
   E8:  Wait  10`
   F4:  Call  PlaySoundAtActor  ( .Actor:Self 000003B9 )
  108:  Call  PlaySoundAtActor  ( .Actor:Self 000020BB )
  11C:  Call  EnemyTestTarget   ( .Actor:Self *VarA ~Flags:DamageType:0 00000000 00000000 00000010 )
  140:  Switch  *VarA
  14C:  	CaseOR  ==  .HitResult:Miss % 6
  158:  	CaseOR  ==  .HitResult:Lucky % 5
  164:  		Call  UseBattleCamPreset    ( 00000002 )
  174:  		Call  EnableActorBlur   ( .Actor:Self 00000001 )
  188:  		Call  SetGoalToTarget   ( .Actor:Self )
  198:  		Call  AddGoalPos        ( .Actor:Self  -50`  0`  0` )
  1B4:  		Call  SetAnimation      ( .Actor:Self 00000001 00A20013 )
  1CC:  		Call  RunToGoal ( .Actor:Self  10` .False )
  1E4:  		Call  SetAnimation      ( .Actor:Self 00000001 00A20003 )
  1FC:  		Call  EnableActorBlur   ( .Actor:Self 00000000 )
  210:  		Wait  10`
  21C:  		If  *VarA  ==  .HitResult:Lucky % 5
  22C:  			Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
  250:  		EndIf
  258:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20003 )
  270:  		Call  SetGoalToHome ( .Actor:Self )
  280:  		Call  SetActorSpeed ( .Actor:Self *Fixed[8.0] )
  294:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20008 )
  2AC:  		Call  RunToGoal     ( .Actor:Self  0` .False )
  2C4:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20003 )
  2DC:  		Return
  2E4:  	EndCaseGroup
            % Since Static crashes the game normally, trigger a flag if there's static so we can detour around the crash
            Case  ==  .HitResult:HitStatic % 7
    648:  		Call  GetStatusFlags    ( .Actor:Self *Var0 )
    65C:  		If  *Var0  &  ~Flags:StatusFlags:Static % 2000
    66C:  			Set   *Flag[00]  .False 
    67C:  		Else
    684:  			Set   *Flag[00]  .True 
    694:  		EndIf
  2EC:  EndSwitch
  2F4:  Call  EnableActorBlur   ( .Actor:Self 00000001 )
  308:  Call  SetGoalToTarget   ( .Actor:Self )
  318:  Call  AddGoalPos        ( .Actor:Self  0`  0`  0` )
  334:  Call  SetAnimation      ( .Actor:Self 00000001 00A20013 )
  34C:  Call  RunToGoal ( .Actor:Self  5` .False )
% End attack early if static to (hopefully) avoid crashing the game
If  *Flag[00]  ==  .True 
    % Skip right to the final strike, implementing both the extra damage and status condition 
        %(It'd be a shame for players to miss out on the hard mode gimmick just because they did the optimal strat of staticing Mario)
    Switch *GB_Master_Element
    % Ice Attack
    Case == 00000000
            %If Mario isn't already Status then Freeze him (In hard mode)
            If  *VarB == .True
                Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Ice|StatusAlwaysHits 00000000 ~DebuffType:Frozen:2:50` 00000007 00000020 )
            Else
                Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Ice 00000000 00000000 00000007 00000020 )
            EndIf
    % Fire Attack
    Case == 00000001
        %If Mario isn't already Status then Poison him (In hard mode)
        If  *VarB == .True
            Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Fire|StatusAlwaysHits 00000000 ~DebuffType:Poison:2:50` 00000005 00000020 ) %Fire does less damage because of poison
        Else
            Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Fire 00000000 00000000 00000007 00000020 )
        EndIf
        
    % Water Attack
    Case == 00000002
        Exec $AddWaterCount % Add to water count for hard Mode Heal_Master % Heal the master if Challenge Mode is on...
        Exec $AddWaterCount % Double heal if Master ends on water
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Water 00000000 00000000 00000007 00000020 )
        
    % Electric Attack
    Case == 00000003
        %If Mario isn't already Status then Paraylze him (In hard mode)
        If  *VarB == .True
            Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Electric|StatusAlwaysHits 00000000 00010001 00000007 00000020 )
        Else
            Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Electric 00000000 00000000 00000007 00000020 )
        EndIf
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Electric 00000000 00000000 00000007 00000020 )
    % If no element gets called, set to do normal damage (Failsafe)
    Default
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000000 00000007 00000020 )
    EndSwitch
    % Immideately end the attack...
    Return
EndIf
% Resume attack as normal if not static...
  364:  Call  EnableActorBlur   ( .Actor:Self 00000000 )
  378:  Thread
  380:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[1.0] )
  39C:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[4.0] )
  3B8:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[3.0] )
  3D4:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[2.0] )
  3F0:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[1.0] )
  40C:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[0.5] )
  428:  EndThread
  430:  Call  PlaySoundAtActor  ( .Actor:Self 000003ED )
  444:  Call  PlaySoundAtActor  ( .Actor:Self 000020BB )
  458:  Wait  2`
  Thread

%Add Damage based on challenge mode
% Determine damage of attack based on game mode *VarC
Set *VarC 00000006
If *GB_FileCodeMode == 8`
    Set *VarC 00000005
EndIf

    % If the master will hit Mario then swap elements and do elemental damage....
% Determine Element attack
Switch *GB_Master_Element
    % Ice Attack
    Case == 00000000
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Ice 00000000 00000000 *VarC 00000010 )
    % Fire Attack
    Case == 00000001
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Fire 00000000 00000000 *VarC 00000010 )
    % Water Attack
    Case == 00000002
        Exec $AddWaterCount % Add to water count for hard Mode Heal_Master % Heal the master if Challenge Mode is on...
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Water 00000000 00000000 *VarC 00000010 )
        
    % Electric Attack
    Case == 00000003
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Electric 00000000 00000000 *VarC 00000010 )
    % If no element gets called, set to do normal damage (Failsafe)
    Default
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000000 *VarC 00000010 )
EndSwitch
EndThread
  48C:  Wait  15`
  498:  Call  UseBattleCamPreset    ( 00000002 )
  4A8:  Thread
  4B0:  	Call  EnableActorBlur   ( .Actor:Self 00000001 )
  4C4:  	Wait  5`
  4D0:  	Call  PlaySoundAtActor  ( .Actor:Self .Sound:Jump )
  4E4:  	Call  SetAnimation      ( .Actor:Self 00000001 00A20014 )
  4FC:  	Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.5] )
  510:  	Call  JumpToGoal        ( .Actor:Self  25` .False .True .False )
  530:  	Call  EnableActorBlur   ( .Actor:Self 00000000 )
  544:  EndThread
  54C:  Thread
  554:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[0.5] )
  570:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[1.5] )
  58C:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[0.5] )
  5A8:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[0.2] )
  5C4:  EndThread
  5CC:  Wait  2`
  5D8:  Call  PlaySoundAtActor  ( .Actor:Self 000003ED )
  5EC:  Call  PlaySoundAtActor  ( .Actor:Self 000020BB )
  600:  Wait  2`
% Determine damage of attack based on game mode *VarC
Set *VarC 00000007
If *GB_FileCodeMode == 8`
    Set *VarC 00000005

EndIf
  Thread
    % If the master will hit Mario then swap elements and do elemental damage....
% First swap elements (Var B will store the damage type flag for the actual attack)
ExecWait $SwapToNextElement_Master
% Determine Element damage
    % "Fun" little thing to make hard mode more distinct, have the last attack of triple attack do a status based on the element
Switch *GB_Master_Element
    % Ice Attack
    Case == 00000000
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Ice 00000000 00000000 *VarC 00000000 )
    % Fire Attack
    Case == 00000001
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Fire 00000000 00000000 *VarC 00000000 )
    % Water Attack
    Case == 00000002
        Exec $AddWaterCount % Add to water count for hard Mode Heal_Master % Heal the master if Challenge Mode is on...
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Water 00000000 00000000 *VarC 00000000 )
        
    % Electric Attack
    Case == 00000003
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Electric 00000000 00000000 *VarC 00000000 )
    % If no element gets called, set to do normal damage (Failsafe)
    Default
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000000 *VarC 00000000 )
EndSwitch
EndThread
  634:  Thread
  63C:  	Wait  5`
  648:  	Call  EnablePlayerBlur  ( 00000001 )
  658:  	Call  SetActorJumpGravity   ( .Actor:Player *Fixed[0.3] )
  66C:  	Call  GetActorPos       ( .Actor:Player *Var0 *Var1 *Var2 )
  688:  	Call  SetJumpAnimations ( .Actor:Player 00000000 00010017 00010017 00010017 )
  6A8:  	Call  SetGoalPos        ( .Actor:Player *Var0 *Var1 *Var2 )
  6C4:  	Call  80273444  ( 00000032 00000000 00000000 )
  6DC:  	Call  EnablePlayerBlur  ( 00000000 )
  6EC:  EndThread
  6F4:  Wait  15`
  700:  Call  SetGoalToTarget   ( .Actor:Self )
  710:  Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  72C:  Add   *Var0  00000032
  73C:  Set   *Var1  00000000
  74C:  Call  SetActorJumpGravity       ( .Actor:Self *Fixed[0.8] )
  760:  Call  SetAnimation      ( .Actor:Self 00000001 00A20021 )
  778:  Call  SetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  794:  Call  JumpToGoal        ( .Actor:Self  30` .False .True .False )
  7B4:  Call  PlaySoundAtActor  ( .Actor:Self 000020BA )
  7C8:  Call  SetAnimation      ( .Actor:Self 00000001 00A20023 )
  7E0:  Call  SetActorRotationOffset    ( .Actor:Self 00000000 00000000 00000000 )
  7FC:  Wait  3`
  808:  Add   *Var0  00000014
  818:  Set   *Var1  00000000
  828:  Thread
  830:  	Wait  5`
  83C:  	Call  PlaySoundAtActor  ( .Actor:Self 000020BD )
  850:  	Wait  10`
  85C:  	Call  PlaySoundAtActor  ( .Actor:Self 000020BD )
  870:  EndThread
  878:  Call  SetAnimation  ( .Actor:Self 00000001 00A2000E )
  890:  Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  8AC:  Call  JumpToGoal    ( .Actor:Self  10` .False .True .False )
  8CC:  Call  PlaySoundAtActor  ( .Actor:Self 000003B4 )
  8E0:  Wait  10`
  8EC:  Call  SetAnimation  ( .Actor:Self 00000001 00A2000F )
  904:  Call  EnableActorBlur   ( .Actor:Self 00000001 )
  918:  Call  SetGoalToTarget   ( .Actor:Self )
  928:  Call  AddGoalPos    ( .Actor:Self  0`  0`  0` )
  944:  Call  RunToGoal     ( .Actor:Self  3` .False )
  95C:  Call  EnableActorBlur   ( .Actor:Self 00000000 )
  970:  Thread
  978:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[1.0] )
  994:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[3.0] )
  9B0:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[6.0] )
  9CC:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[5.0] )
  9E8:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[4.0] )
  A04:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[3.0] )
  A20:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[2.0] )
  A3C:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[1.0] )
  A58:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[0.5] )
  A74:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[0.2] )
  A90:  EndThread
  A98:  Call  PlaySoundAtActor  ( .Actor:Self 000003EE )
  AAC:  Call  PlaySoundAtActor  ( .Actor:Self 000020BB )
  AC0:  Wait  2`
  Thread
/% % This is too confusing to follow... wasted too much time trying to make this for a scenario that should never show up anyways.
% In All sinks mode if the player still manages to have 5 HP, increase the damage to ensure they loose at least one
If *GB_FileCodeMode == 8`
    Call  GetPlayerHP   ( *VarD )
    % If HP is 5 or greater play a sound and increase attack by 1
    If *VarD >= 00000005
        Call  PlaySoundAtActor  ( .Actor:Self 0000020B )
        Add *VarC 00000001
    EndIf
EndIf
%/
If *GB_FileCodeMode == 8`
    Set *VarC 00000005

EndIf
% Determine Element damage (if hard mode is on have the attack inflict a status as well.)
Switch *GB_Master_Element
    % Ice Attack
    Case == 00000000
            %If Mario isn't already Status then Freeze him (In hard mode)
            If  *VarB == .True
                Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Ice|StatusAlwaysHits 00000000 ~DebuffType:Frozen:2:50` *VarC 00000020 )
            Else
                Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Ice 00000000 00000000 *VarC 00000020 )
            EndIf
    % Fire Attack
    Case == 00000001
        %Subtract 2 for poison effect 
        If *GB_FileCodeMode == 8`
        % (Don't do this in All Sinks, it makes the damage inconsistant)
        Else
        Sub *VarC 00000002
        EndIf

        %If Mario isn't already Status then Poison him (In hard mode)
        If  *VarB == .True
            Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Fire|StatusAlwaysHits 00000000 ~DebuffType:Poison:2:50` *VarC 00000020 ) % Fire does less damage because of poison
        Else
            Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Fire 00000000 00000000 *VarC 00000020 )
        EndIf
        
    % Water Attack
    Case == 00000002
        Exec $AddWaterCount % Add to water count for hard Mode Heal_Master % Heal the master if Challenge Mode is on...
        Exec $AddWaterCount % Double heal if Master ends on water
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Water 00000000 00000000 *VarC 00000020 )
        
    % Electric Attack
    Case == 00000003
        %If Mario isn't already Status then Paraylze him (In hard mode)
        If  *VarB == .True
            Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Electric|StatusAlwaysHits 00000000 00010001 *VarC 00000020 )
        Else
            Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Electric 00000000 00000000 *VarC 00000020 )
        EndIf
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Electric 00000000 00000000 *VarC 00000020 )
    % If no element gets called, set to do normal damage (Failsafe)
    Default
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000000 *VarC 00000020 )
EndSwitch
EndThread
  AF4:  Wait  15`
  B00:  Switch  *Var0
  B0C:  	CaseOR  ==  .HitResult:Hit % 0
  B18:  	CaseOR  ==  .HitResult:QuakeImmune % 2
  B24:  		Call  UseBattleCamPreset    ( 00000002 )
  B34:  		Call  PlaySoundAtActor      ( .Actor:Self 000020BE )
  B48:  		Call  PlaySoundAtActor      ( .Actor:Self 000020BB )
  B5C:  		Thread
  B64:  			Call  SetActorRotationOffset    ( .Actor:Self 00000000 0000000A 00000000 )
  B80:  			Set   *Var0  00000000
  B90:  			Loop  0000000A
  B9C:  				Add   *Var0  00000024
  BAC:  				Call  SetActorRotation  ( .Actor:Self 00000000 00000000 *Var0 )
  BC8:  				Wait  1`
  BD4:  			EndLoop
  BDC:  		EndThread
  BE4:  		Call  SetGoalToTarget       ( .Actor:Self )
  BF4:  		Call  GetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  C10:  		Add   *Var0  00000032
  C20:  		Set   *Var1  00000000
  C30:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.8] )
  C44:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20021 )
  C5C:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  C78:  		Call  JumpToGoal    ( .Actor:Self  30` .False .True .False )
  C98:  		Call  PlaySoundAtActor      ( .Actor:Self 000020BA )
  CAC:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20023 )
  CC4:  		Call  SetActorRotationOffset    ( .Actor:Self 00000000 00000000 00000000 )
  CE0:  		Wait  3`
  CEC:  		Add   *Var0  00000014
  CFC:  		Set   *Var1  00000000
  D0C:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20021 )
  D24:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  D40:  		Call  JumpToGoal    ( .Actor:Self  10` .False .True .False )
  D60:  		Call  PlaySoundAtActor      ( .Actor:Self 000003B4 )
  D74:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20023 )
  D8C:  		Wait  20`
  D98:  	EndCaseGroup
  DA0:  EndSwitch
  DA8:  Call  SetAnimation  ( .Actor:Self 00000001 00A20003 )
  DC0:  Call  SetGoalToHome ( .Actor:Self )
  DD0:  Call  SetActorSpeed ( .Actor:Self *Fixed[3.8] )
  DE4:  Call  SetAnimation  ( .Actor:Self 00000001 00A20008 )
  DFC:  Call  RunToGoal     ( .Actor:Self  0` .False )
  E14:  Call  SetAnimation  ( .Actor:Self 00000001 00A20003 )
  E2C:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  E40:  Call  UseIdleAnimation  ( .Actor:Self .True )
  Wait  15`
  E54:  Return
  E5C:  End
}

% I want to attempt to make my own custom attack to make up for lack of status condition in normal version of fight....
    %It'll run similar to the normal strike but it'll need some sort of visual cue to singal that it's different...
    % It'll only trigger in the "low health phase", If you don't block it you'll get status based on the element of the attack, similar to the triple strike....
#new:Script $Script_StatusStrike
{
    % Determine damage of attack based on game mode *VarC
    Set *VarC 00000008
    If *GB_FileCodeMode == 8`
        Add *VarC 00000000
    EndIf
    0:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
  124:  Call  SetAnimation      ( .Actor:Self 00000001 00A2001D ) % Different sprite to indicate change

  Switch *GB_Master_Element
    % Ice Attack
    Case == 00000000
        Call  PlayEffect    ( ~FX:EmitterVolume:Snowflakes *Var0 *Var1 *Var2 00000014 FFFFFFEC *Fixed[1.0] 00000005 0000001E 00000000 00000000 00000000 00000000 )
        Call  AddActorDecoration    ( .Actor:Self 00000001 00000001 .Decoration:Whirlwind)
        Call  PlaySoundAtActor  ( .Actor:Self 0000208F )
    % Fire Attack
    Case == 00000001
        Call  AddActorDecoration    ( .Actor:Self 00000001 00000001 .Decoration:RedFlames )
        Call  PlaySoundAtActor  ( .Actor:Self 0000208F )
    % Water Attack
    Case == 00000002
        Call  PlayEffect        ( ~FX:WaterFall *Var0 *Var1 *Var2 *Fixed[1.0] 00000032 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
        Call  PlaySoundAtActor  ( .Actor:Self 00002035 )
    % Electric Attack
    Case == 00000003
        Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
   5C:  Set   *Var3  00000014
   6C:  Call  MultiplyByActorScale  ( *Var3 )
   7C:  Add   *Var1  *Var3
   8C:  SetF  *Var3  *Fixed[1.0]
   9C:  Call  MultiplyByActorScale  ( *Var3 )
   AC:  Call  PlayEffect    ( ~FX:SnakingStatic *Var0 *Var1 *Var2 *Var3 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
        %Call  PlayEffect    ( ~FX:RadialFlowIn:ElectricalWaves *Var0 *Var1 *Var2 *Fixed[1.3] 0000005A 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
        %Call  PlayEffect    ( ~FX:SnakingStatic *Var0 *Var1 *Var2 *Var3 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
        Call  PlaySoundAtActor  ( .Actor:Self 00000379 )
    % This should never be called but for testing purposes, set to Master 2's normal defense
    Default
        % Apply nothing
    EndSwitch
        Wait  50`
        Call  RemoveActorDecoration ( .Actor:Self 00000001 00000001 )
        Call  SetAnimation      ( .Actor:Self 00000001 00A20015 )
        Call  PlaySoundAtActor      ( .Actor:Self 000003B4 )
        A8:  Call  SetGoalToTarget   ( .Actor:Self )
        F4:  Call  PlaySoundAtActor  ( .Actor:Self 000003B9 )
       108:  Call  PlaySoundAtActor  ( .Actor:Self 000020BB )
  188:  Call  EnemyTestTarget   ( .Actor:Self *VarA ~Flags:DamageType:0 00000000 00000000 00000010 )
  1AC:  Switch  *VarA
  1B8:  	CaseOR  ==  .HitResult:Miss % 6
  1C4:  	CaseOR  ==  .HitResult:Lucky % 5
  1D0:  		Call  UseBattleCamPreset    ( 00000002 )
  1E0:  		Call  EnableActorBlur   ( .Actor:Self 00000001 )
  1F4:  		Call  SetGoalToTarget   ( .Actor:Self )
  204:  		Call  AddGoalPos        ( .Actor:Self  -50`  0`  0` )
  220:  		Call  RunToGoal ( .Actor:Self  10` .False )
  238:  		Call  SetAnimation      ( .Actor:Self 00000001 00A20003 )
  250:  		Call  EnableActorBlur   ( .Actor:Self 00000000 )
  264:  		Wait  10`
  270:  		If  *VarA  ==  .HitResult:Lucky % 5
  280:  			Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
  2A4:  		EndIf
  2AC:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20003 )
  2C4:  		Call  SetGoalToHome ( .Actor:Self )
  2D4:  		Call  SetActorSpeed ( .Actor:Self *Fixed[8.0] )
  2E8:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20008 )
  300:  		Call  RunToGoal     ( .Actor:Self  0` .False )
  318:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20003 )
  330:  		Return
  338:  	EndCaseGroup
  340:  EndSwitch
  348:  Call  EnableActorBlur   ( .Actor:Self 00000001 )
  308:  Call  SetGoalToTarget   ( .Actor:Self )
  318:  Call  AddGoalPos        ( .Actor:Self  0`  0`  0` )
  334:  Call  SetAnimation      ( .Actor:Self 00000001 00A20013 )
  34C:  Call  RunToGoal ( .Actor:Self  5` .False )
  364:  Call  EnableActorBlur   ( .Actor:Self 00000000 )
  378:  Thread
  380:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[1.0] )
  39C:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[4.0] )
  3B8:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[3.0] )
  3D4:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[2.0] )
  3F0:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[1.0] )
  40C:  	Call  ShakeCam  ( .Cam:Battle 00000000  2` *Fixed[0.5] )
  428:  EndThread
  430:  Call  PlaySoundAtActor  ( .Actor:Self 000003ED )
  444:  Call  PlaySoundAtActor  ( .Actor:Self 000020BB )
  458:  Wait  2`
        %ExecWait $PowerDown_Master % Turn off extra decorators
        % Do the attack that inflicts a status condition, damage included
        %run each check as an if statement and turn on
Call  GetStatusFlags    ( .Actor:Player *VarA )
% Freeze check
If *VarA  !& ~Flags:StatusFlags:Frozen
    Set *VarB .True
EndIf
%Paralyze check
If *VarA  !& 00010002
    Set *VarB .True
EndIf
%Poison check
If *VarA  !& ~Flags:StatusFlags:Poison
    Set *VarB .True
EndIf

% Determine Element damage (if hard mode is on have the attack inflict a status as well.)
Switch *GB_Master_Element
    % Ice Attack
    Case == 00000000
            %If Mario isn't already Status then Freeze him (In hard mode)
            If  *VarB == .True
                Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Ice|StatusAlwaysHits 00000000 ~DebuffType:Frozen:2:50` *VarC 00000020 )
            Else
                Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Ice 00000000 00000000 *VarC 00000020 )
            EndIf
    % Fire Attack
    Case == 00000001
        %[Subtract two from attack because of poison damage]
        Sub *VarC 00000002
        %If Mario isn't already Status then Poison him (In hard mode)
        If  *VarB == .True
            Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Fire|StatusAlwaysHits 00000000 ~DebuffType:Poison:2:50` *VarC 00000020 ) % Fire does less damage because of poison
        Else
            Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Fire 00000000 00000000 *VarC 00000020 )
        EndIf
        
    % Water Attack
    Case == 00000002
        Exec $AddWaterCount % Add to water count for hard Mode Heal_Master % Heal the master if Challenge Mode is on...
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Water 00000000 00000000 *VarC 00000020 )
        %Cure Status Conditions, probably won't matter since poison is the only time he can hit Mario status but just so it does something special in normal mode
        Call $CureTarget(.Actor:Self)
        
    % Electric Attack
    Case == 00000003
        %If Mario isn't already Status then Paraylze him (In hard mode)
        If  *VarB == .True
            Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Electric|StatusAlwaysHits 00000000 00010001 *VarC 00000020 )
        Else
            Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Electric 00000000 00000000 *VarC 00000020 )
        EndIf
    % If no element gets called, set to do normal damage (Failsafe)
    Default
        Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000000 *VarC 00000020 )
EndSwitch
  410:  Switch  *Var0
  41C:  	CaseOR  ==  .HitResult:Hit % 0
  428:  	CaseOR  ==  .HitResult:QuakeImmune % 2
  434:  		Call  UseBattleCamPreset    ( 00000002 )
  444:  		Call  PlaySoundAtActor      ( .Actor:Self 000020BB )
  458:  		Thread
  460:  			Call  SetActorRotationOffset    ( .Actor:Self 00000000 00000014 00000000 )
  47C:  			Set   *Var0  00000000
  48C:  			Loop  0000000A
  498:  				Add   *Var0  00000024
  4A8:  				Call  SetActorRotation  ( .Actor:Self 00000000 00000000 *Var0 )
  4C4:  				Wait  1`
  4D0:  			EndLoop
  4D8:  		EndThread
  4E0:  		Call  SetGoalToTarget       ( .Actor:Self )
  4F0:  		Call  GetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  50C:  		Add   *Var0  00000032
  51C:  		Set   *Var1  00000000
  52C:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.2] )
  540:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20021 )
  558:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  574:  		Call  JumpToGoal    ( .Actor:Self  15` .False .True .False )
  594:  		Call  PlaySoundAtActor      ( .Actor:Self 000020BA )
  5A8:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20023 )
  5C0:  		Call  SetActorRotationOffset    ( .Actor:Self 00000000 00000000 00000000 )
  5DC:  		Wait  3`
  5E8:  		Add   *Var0  00000014
  5F8:  		Set   *Var1  00000000
  608:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20021 )
  620:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  63C:  		Call  JumpToGoal    ( .Actor:Self  5` .False .True .False )
  65C:  		Call  PlaySoundAtActor      ( .Actor:Self 000003B4 )
  670:  		Call  SetAnimation  ( .Actor:Self 00000001 00A20023 )
  688:  		Wait  20`
  694:  	EndCaseGroup
  69C:  EndSwitch
  6A4:  Call  SetAnimation  ( .Actor:Self 00000001 00A20003 )
  6BC:  Call  SetGoalToHome ( .Actor:Self )
  6CC:  Call  SetActorSpeed ( .Actor:Self *Fixed[3.8] )
  6E0:  Call  SetAnimation  ( .Actor:Self 00000001 00A20008 )
  6F8:  Call  RunToGoal     ( .Actor:Self  0` .False )
  710:  Call  SetAnimation  ( .Actor:Self 00000001 00A20003 )
  728:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  73C:  Call  UseIdleAnimation  ( .Actor:Self .True )
  750:  Return
  758:  End
}

% Master 3 Next Turn: Update to remove certain dialouge in low hp modes.
@ $Script_NextTurn_80230D44
{
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   28:  Call  GetBattlePhase    ( *Var0 )
   38:  Switch  *Var0
   44:  	Case  ==  0000000A
   50:  		Call  GetActorVar   ( .Actor:Self 00000000 *Var0 )
   68:  		If  *Var0  ==  00000000
   78:  			Call  UseBattleCamPreset    ( 0000000D )
   88:  			Call  BattleCamTargetActor  ( .Actor:Self )
   98:  			Call  SetTargetActor        ( .Actor:Self .Actor:Player )
   AC:  			Wait  10`
   B8:  			Call  ActorSpeak    ( 0002002E .Actor:Self 00000001 00A20009 00A20005 ) % To battle!!
   D8:  			Call  SetActorVar   ( .Actor:Self 00000000 00000001 )
   F0:  			Call  SetAnimation  ( .Actor:Self 00000001 00A2000D )
  108:  			Wait  15`
  114:  			Call  SetAnimation  ( .Actor:Self 00000001 00A2000C )
  12C:  			Wait  5`
  138:  			Call  PlaySoundAtActor      ( .Actor:Self 000020B8 )
  14C:  			Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  168:  			Add   *Var1  00000014
  178:  			Call  PlayEffect    ( 00000013 00000001 *Var0 *Var1 *Var2 *Fixed[1.0] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  1BC:  			Set   *Var0  00000000
  1CC:  			Call  SetAnimation  ( .Actor:Self 00000001 00A20000 )
  1E4:  			Loop  0000000F
  1F0:  				Add   *Var0  00000018
  200:  				Call  SetActorRotation  ( .Actor:Self 00000000 *Var0 00000000 )
  21C:  				Wait  1`
  228:  			EndLoop
  230:  			Set   *Var0  00000000
  240:  			Call  SetAnimation  ( .Actor:Self 00000001 00A20000 )
  258:  			Loop  00000005
  264:  				Add   *Var0  00000012
  274:  				Call  SetActorRotation  ( .Actor:Self 00000000 *Var0 00000000 )
  290:  				Wait  1`
  29C:  			EndLoop
  2A4:  			Call  PlaySoundAtActor  ( .Actor:Self .Sound:SmokeBurst )
  2B8:  			Thread
  2C0:  				Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  2DC:  				Add   *Var1  00000003
  2EC:  				Loop  00000003
  2F8:  					Call  PlayEffect    ( ~FX:BigSmokePuff *Var0 *Var1 *Var2 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  33C:  					Wait  3`
  348:  				EndLoop
  350:  			EndThread
  358:  			Call  SetAnimation  ( .Actor:Self 00000001 00A20000 )
  370:  			Loop  00000005
  37C:  				Add   *Var0  00000024
  38C:  				Call  SetActorRotation  ( .Actor:Self 00000000 *Var0 00000000 )
  3A8:  				Wait  1`
  3B4:  			EndLoop
  3BC:  			Call  SetAnimation  ( .Actor:Self 00000001 00A20001 )
  3D4:  			Loop  00000005
  3E0:  				Add   *Var0  00000012
  3F0:  				Call  SetActorRotation  ( .Actor:Self 00000000 *Var0 00000000 )
  40C:  				Wait  1`
  418:  			EndLoop
  420:  			Wait  15`
  42C:  			Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8022D9EC )
  444:  			Call  SetAnimation      ( .Actor:Self 00000001 00A20008 )
  45C:  			Call  SetAnimation      ( .Actor:Self 00000001 00A20014 )
  474:  			Wait  2`
  480:  			Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:GoldenFlames )
  49C:  			Wait  1`
  4A8:  			Call  ModifyActorDecoration ( .Actor:Self 00000001 00000000 00000032 00000032 00000000 00000000 )
  4D0:  			Wait  15`
  4DC:  			Call  SetAnimation      ( .Actor:Self 00000001 00A20003 )
  4F4:  			Call  UseBattleCamPreset    ( 00000002 )
  504:  			Call  MoveBattleCamOver (  10` )
  514:  			Call  ActorSpeak        ( 00020038 .Actor:Self 00000001 00A2000A 00A20006 ) % Kwaaaaa! Behold my fury, Mario!!
  534:  		EndIf
  53C:  	Case  ==  0000000C
  548:  		Call  GetStatusFlags    ( .Actor:Self *Var0 )
  55C:  		If  *Var0  &  ~Flags:StatusFlags:Sleep|Paralyze|Dizzy|Stone|Stop % 351000
  56C:  			BreakCase
  574:  		EndIf
                    % Get HP for checks
                    Call  GetActorHP    ( .Actor:Self *Var0 )
  590:  		    Call  GetEnemyMaxHP ( .Actor:Self *Var1 )

                % In fact add a new one for less than 10 HP where he starts exclusively using the triple attack...
                If  *Var0  <  0000000A
                    5C4:  			    Call  UseBattleCamPreset    ( 00000002 )
                    5D4:  			    Call  MoveBattleCamOver     (  10` )
                    5E4:  			    Call  ActorSpeak    ( 002F0345 .Actor:Self 00000001 00A2000A 00A20006 ) % No! I've come too far to give up!
                    604:  			    BreakCase
                EndIf
                
                % Play this regardless of mode now that it's not tied to player HP...
                % This happens once the Master is below 20 HP and can start doing his triple attack...
                If  *Var0  <  00000014
                    5C4:  			    Call  UseBattleCamPreset    ( 00000002 )
                    5D4:  			    Call  MoveBattleCamOver     (  10` )
                    5E4:  			    Call  ActorSpeak    ( 002F0344 .Actor:Self 00000001 00A2000A 00A20006 ) % I see your strength has only grown as well ...
                    604:  			    BreakCase
                EndIf

                % If in a max 5 hp mode, don't play these dialouges
                If *GF_DangerMode == .False
  57C:  		    Call  GetActorHP    ( .Actor:Self *Var0 )
  590:  		    Call  GetEnemyMaxHP ( .Actor:Self *Var1 )
  5A4:  		    Div   *Var1  00000002
  614:  		    Call  GetPlayerHP   ( *Var0 )
  624:  		    If  *Var0  <=  0000000A
  634:  			    Call  UseBattleCamPreset    ( 00000002 )
  644:  			    Call  MoveBattleCamOver     (  10` )
  654:  			    Call  ActorSpeak    ( 0002003D .Actor:Self 00000001 00A2000A 00A20006 ) % You underestimate me, Mario! Did you really think  ...
  674:  			    BreakCase
  67C:  		    EndIf
                EndIf

  684:  EndSwitch
  68C:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  6A0:  Call  UseIdleAnimation  ( .Actor:Self .True )
  6B4:  Return
  6BC:  End
}