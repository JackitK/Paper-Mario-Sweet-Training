%Adjustments to Sushi's movepool to behave like new partner
%Moves reflect her more reserved, timid, supportive nature by specializing in status effects over strong damage

/%
%This was from back when Toxitea lowered stats if done well enough, I've since replaced this with more poison turns...

%Chill functions taken from Dark Star's Shell Shot for Hearty Flop and Toxicitea
#new:Function $Function_CheckChill_Def %chill out fails against targets with certain flags
{
    0:  ADDIU		SP, SP, FFE0
    4:  SW			S2, 18 (SP)
    8:  COPY		S2, A0
    C:  SW			RA, 1C (SP)
   10:  SW			S1, 14 (SP)
   14:  SW			S0, 10 (SP)
   18:  JAL			~Func:get_actor
   1C:  LW			A0, 148 (S2)
   20:  COPY		S0, V0
   24:  JAL			~Func:get_actor
   28:  LH			A0, 428 (S0)
   2C:  COPY		S1, V0
   30:  LB			A1, 426 (S0)
   34:  JAL			~Func:get_actor_part
   38:  COPY		A0, S1
   3C:  SW			R0, 84 (S2)
		%Ensure that def down is not already enabled
		LB			T0, 226 (S1)	%duration
		SLTI		T0, T0, 1
		BEQ			T0, R0, .oA0
		NOP
   40:  LW			S1, 0 (S1)
   44:  COPY		V1, V0
   48:  ANDI		V0, S1, 4000 %check flag 4000 (normal star rod)
   4C:  BNE			V0, R0, .oA0
   50:  ADDIU		V0, R0, 2
   54:  LUI			V0, 40
   58:  AND			V0, S1, V0
   5C:  BNE			V0, R0, .oA0
   60:  ADDIU		V0, R0, 2
   64:  ANDI		V0, S1, 2000
   68:  BNE			V0, R0, .oA0
   6C:  ADDIU		V0, R0, 2
   70:  LW			V1, 7C (V1)
   74:  LUI			V0, 4
   78:  AND			V0, V1, V0
   7C:  BNE			V0, R0, .oA0
   80:  ADDIU		V0, R0, 2
   84:  LUI			V0, 8
   88:  AND			V0, V1, V0
   8C:  BNE			V0, R0, .oA0
   90:  ADDIU		V0, R0, 2
   94:  ADDIU		V0, R0, 1
   98:  SW			V0, 84 (S2)
   9C:  ADDIU		V0, R0, 2
        .oA0
		ADDIU		V0, R0, 2
   A0:  LW			RA, 1C (SP)
   A4:  LW			S2, 18 (SP)
   A8:  LW			S1, 14 (SP)
   AC:  LW			S0, 10 (SP)
   B0:  JR			RA
   B4:  ADDIU		SP, SP, 20
}

#new:Function $Function_ChillTarget_def
{
    0:  ADDIU		SP, SP, FFE0
    4:  SW			RA, 1C (SP)
    8:  SW			S0, 18 (SP)
    C:  JAL			~Func:get_actor
   10:  LW			A0, 148 (A0)
   14:  COPY		S0, V0
   18:  JAL			~Func:get_actor
   1C:  LH			A0, 428 (S0)
   20:  LB			A1, 426 (S0)
   24:  COPY		S0, V0
   28:  JAL			~Func:get_actor_part
   2C:  COPY		A0, S0
   30:  LW			V1, 0 (S0)
   34:  COPY		A0, V0
   38:  ANDI		V0, V1, 4000 %star rod flag
   3C:  BNE			V0, R0, .o1E4
   40:  ADDIU		V0, R0, 2
   44:  LUI			V0, 40
   48:  AND			V0, V1, V0
   4C:  BEQ			V0, R0, .o5C
   50:  ANDI		V0, V1, 2000
   54:  BEQ			R0, R0, .o1E4
   58:  ADDIU		V0, R0, 2
        .o5C
   5C:  BNE			V0, R0, .o1E4
   60:  ADDIU		V0, R0, 2
   64:  LW			V1, 7C (A0)
   68:  LUI			V0, 4
   6C:  AND			V0, V1, V0
   70:  BNE			V0, R0, .o1E4
   74:  ADDIU		V0, R0, 2
   78:  LUI			V0, 8
   7C:  AND			V0, V1, V0
   80:  BNE			V0, R0, .o1E4
   84:  ADDIU		V0, R0, 2
   88:  COPY		A0, S0
   8C:  CLEAR		A1
   90:  ADDIU		A2, R0, A
   94:  ADDIU		V0, R0, 1		%duration
   98:  SB			V0, 226 (S0)	%def duration
   9C:  ADDIU		V0, R0, 1		%amount				-1 with a 0 def cap
   %A0:  JAL			802788F8						this event is already called, so don't do this!
   A4:  SB			V0, 225 (S0)	%def reduction
   A8:  LH			V0, 150 (S0)
   AC:  LWC1		F0, 144 (S0)
   B0:  LW			V1, 0 (S0)
   B4:  MTC1		V0, F2
   B8:  NOP
   BC:  CVT.S.W		F2, F2
   C0:  LBU			V0, 190 (S0)
   C4:  ADD.S		F0, F0, F2
   C8:  SRL			V0, V0, 1
   CC:  MTC1		V0, F2
   D0:  NOP
   D4:  CVT.S.W		F2, F2
   D8:  ANDI		V0, V1, 800
   DC:  BEQ			V0, R0, .o114
   E0:  ADD.S		F4, F0, F2
   E4:  LH			V0, 152 (S0)
   E8:  LWC1		F0, 148 (S0)
   EC:  MTC1		V0, F2
   F0:  NOP
   F4:  CVT.S.W		F2, F2
   F8:  LBU			V0, 191 (S0)
   FC:  ADD.S		F0, F0, F2
  100:  MTC1		V0, F2
  104:  NOP
  108:  CVT.S.W		F2, F2
  10C:  BEQ			R0, R0, .o180
  110:  SUB.S		F0, F0, F2
        .o114
  114:  ANDI		V0, V1, 8000
  118:  BNE			V0, R0, .o150
  11C:  NOP
  120:  LH			V0, 152 (S0)
  124:  LWC1		F0, 148 (S0)
  128:  MTC1		V0, F2
  12C:  NOP
  130:  CVT.S.W		F2, F2
  134:  LBU			V0, 191 (S0)
  138:  ADD.S		F0, F0, F2
  13C:  MTC1		V0, F2
  140:  NOP
  144:  CVT.S.W		F2, F2
  148:  BEQ			R0, R0, .o180
  14C:  ADD.S		F0, F2, F0
        .o150
  150:  LH			V0, 152 (S0)
  154:  LWC1		F2, 148 (S0)
  158:  MTC1		V0, F0
  15C:  NOP
  160:  CVT.S.W		F0, F0
  164:  LBU			V0, 191 (S0)
  168:  ADD.S		F2, F2, F0
  16C:  SLL			V0, V0, 1
  170:  MTC1		V0, F0
  174:  NOP
  178:  CVT.S.W		F0, F0
  17C:  ADD.S		F0, F2, F0
        .o180
  180:  LH			V0, 154 (S0)
  184:  MFC1		A2, F0
  188:  LWC1		F0, 14C (S0)
  18C:  MTC1		V0, F2
  190:  NOP
  194:  CVT.S.W		F2, F2
  198:  ADD.S		F0, F0, F2
  19C:  LIF			F2, 5.0
  1A4:  ADDIU		A0, R0, 3		%damage icon (5 -> 3) (aka -1)
  1A8:  ADD.S		F0, F0, F2
  1AC:  MFC1		A1, F4
  1B0:  LIF			F4, 1.0
  1B8:  MFC1		A3, F0
  1BC:  ADDIU		V0, R0, 3C
  1C0:  SW			V0, 14 (SP)
  1C4:  JAL			800718D0
  1C8:  SWC1		F4, 10 (SP)
  1CC:  JAL			~Func:sfx_play_sound
  1D0:  ADDIU		A0, R0, 210C			%def down sound from ddown moves?
  1D4:  ADDIU		V0, R0, 2
  1D8:  ADDIU		V1, R0, 1
  1DC:  SAW			V1, $End[0]
        .o1E4
  1E4:  LW			RA, 1C (SP)
  1E8:  LW			S0, 18 (SP)
  1EC:  JR			RA
  1F0:  ADDIU		SP, SP, 20
}

%darker than curse effect color, for consistency but also to convey that this effect is weaker

%new advances in effect programming mean I can add some more cool effects
%curse effect: 	8DFF95000000
%				64B26A000000


%set var5, var6, var7 to correct position
#new:Function $Function_DebuffEffect2
{
    0:  ADDIU     SP, SP, FFE8
    4:  COPY      V0, A0
    8:  SW        RA, 10 (SP)
    C:  LWC1      F0, 98 (V0)				%84 (var0) -> 98 (var5)
   10:  CVT.S.W   F0, F0
   14:  MFC1      A1, F0
   18:  LWC1      F0, 9C (V0)
   1C:  CVT.S.W   F0, F0
   20:  MFC1      A2, F0
   24:  LWC1      F0, A0 (V0)
   28:  CVT.S.W   F0, F0
   2C:  MFC1      A3, F0
   30:  JAL       80070AF0
   34:  ADDIU     A0, R0, 2   
   38:  LW        A0, C (V0)
		ADDIU     V1, R0, 64  
   40:  SB        V1, 38 (A0)						%color byte 1?
   44:  LW        A0, C (V0)
		ADDIU     V1, R0, B2
   4C:  SB        V1, 39 (A0)						%color byte 2?
   50:  LW        V1, C (V0)
		ADDIU     A0, R0, 6A
   54:  SB        A0, 3A (V1)						%color byte 3?
   58:  LW        A0, C (V0)
		ADDIU     V1, R0, 0
   60:  SB        V1, 3B (A0)						%color byte 4? (unused?)
   64:  LW        A0, C (V0)
		%ADDIU     V1, R0, 0  
   6C:  SB        V1, 3C (A0)						%color byte 5?
   70:  LW        V1, C (V0)
   74:  SB        R0, 3D (V1)						%color byte 6?
   78:  LW        RA, 10 (SP)
   7C:  ADDIU     V0, R0, 2   						%return 2
   80:  JR        RA
   84:  ADDIU     SP, SP, 18
}

%new advances in effect programming mean I can add some more cool effects
%8DFF95000000

%set var5, var6, var7 to correct position
#new:Function $Function_DebuffEffect2_Def
{
    0:  ADDIU     SP, SP, FFE8
    4:  COPY      V0, A0
    8:  SW        RA, 10 (SP)
    C:  LWC1      F0, 98 (V0)				%84 (var0) -> 98 (var5)
   10:  CVT.S.W   F0, F0
   14:  MFC1      A1, F0
   18:  LWC1      F0, 9C (V0)
   1C:  CVT.S.W   F0, F0
   20:  MFC1      A2, F0
   24:  LWC1      F0, A0 (V0)
   28:  CVT.S.W   F0, F0
   2C:  MFC1      A3, F0
   30:  JAL       80070AF0
   34:  ADDIU     A0, R0, 2   
   38:  LW        A0, C (V0)
		ADDIU     V1, R0, 8D  
   40:  SB        V1, 38 (A0)						%color byte 1?
   44:  LW        A0, C (V0)
		ADDIU     V1, R0, FF
   4C:  SB        V1, 39 (A0)						%color byte 2?
   50:  LW        V1, C (V0)
		ADDIU     A0, R0, 95
   54:  SB        A0, 3A (V1)						%color byte 3?
   58:  LW        A0, C (V0)
		ADDIU     V1, R0, 0
   60:  SB        V1, 3B (A0)						%color byte 4? (unused?)
   64:  LW        A0, C (V0)
		%ADDIU     V1, R0, 0  
   6C:  SB        V1, 3C (A0)						%color byte 5?
   70:  LW        V1, C (V0)
   74:  SB        R0, 3D (V1)						%color byte 6?
   78:  LW        RA, 10 (SP)
   7C:  ADDIU     V0, R0, 2   						%return 2
   80:  JR        RA
   84:  ADDIU     SP, SP, 18
}

%For Attack Chill
#new:Function $Function_CheckChill %chill out fails against targets with certain flags
{
    0:  ADDIU		SP, SP, FFE0
    4:  SW			S2, 18 (SP)
    8:  COPY		S2, A0
    C:  SW			RA, 1C (SP)
   10:  SW			S1, 14 (SP)
   14:  SW			S0, 10 (SP)
   18:  JAL			~Func:get_actor		%get mario
   1C:  LW			A0, 148 (S2)
   20:  COPY		S0, V0
   24:  JAL			~Func:get_actor		%get target
   28:  LH			A0, 428 (S0)
   2C:  COPY		S1, V0
   30:  LB			A1, 426 (S0)
   34:  JAL			~Func:get_actor_part	%get part of target
   38:  COPY		A0, S1
   3C:  SW			R0, 84 (S2)
		%Ensure that chill out is not already enabled
		LB			T0, 224 (S1)	%duration
		SLTI		T0, T0, 1
		BEQ			T0, R0, .oA0
		NOP
   40:  LW			S1, 0 (S1)		%Actor flags
   44:  COPY		V1, V0			%Part pointer
   48:  ANDI		V0, S1, 4000 	%check flag 4000 (target only)
   4C:  BNE			V0, R0, .oA0
   50:  ADDIU		V0, R0, 2
   54:  LUI			V0, 40			%check flag 400000 (not targettable)
   58:  AND			V0, S1, V0
   5C:  BNE			V0, R0, .oA0
   60:  ADDIU		V0, R0, 2
   64:  ANDI		V0, S1, 2000	%check flag 2000 (???)
   68:  BNE			V0, R0, .oA0
   6C:  ADDIU		V0, R0, 2
   70:  LW			V1, 7C (V1)		%Part event flags
   74:  LUI			V0, 4			%check flag 40000 (normal star rod)
   78:  AND			V0, V1, V0
   7C:  BNE			V0, R0, .oA0
   80:  ADDIU		V0, R0, 2
   84:  LUI			V0, 8			%check flag 80000 (final star rod)
   88:  AND			V0, V1, V0
   8C:  BNE			V0, R0, .oA0
   90:  ADDIU		V0, R0, 2
   94:  ADDIU		V0, R0, 1
   98:  SW			V0, 84 (S2)		%Store 1 into Var0 (used by checker functions later)
   9C:  ADDIU		V0, R0, 2
        .oA0
		ADDIU		V0, R0, 2
   A0:  LW			RA, 1C (SP)
   A4:  LW			S2, 18 (SP)
   A8:  LW			S1, 14 (SP)
   AC:  LW			S0, 10 (SP)
   B0:  JR			RA
   B4:  ADDIU		SP, SP, 20
}

#new:Function $Function_ChillTarget
{
    0:  ADDIU		SP, SP, FFE0
    4:  SW			RA, 1C (SP)
    8:  SW			S0, 18 (SP)
    C:  JAL			~Func:get_actor
   10:  LW			A0, 148 (A0)
   14:  COPY		S0, V0
   18:  JAL			~Func:get_actor
   1C:  LH			A0, 428 (S0)
   20:  LB			A1, 426 (S0)
   24:  COPY		S0, V0
   28:  JAL			~Func:get_actor_part
   2C:  COPY		A0, S0
   30:  LW			V1, 0 (S0)
   34:  COPY		A0, V0
   38:  ANDI		V0, V1, 4000 %star rod flag
   3C:  BNE			V0, R0, .o1E4
   40:  ADDIU		V0, R0, 2
   44:  LUI			V0, 40
   48:  AND			V0, V1, V0
   4C:  BEQ			V0, R0, .o5C
   50:  ANDI		V0, V1, 2000
   54:  BEQ			R0, R0, .o1E4
   58:  ADDIU		V0, R0, 2
        .o5C
   5C:  BNE			V0, R0, .o1E4
   60:  ADDIU		V0, R0, 2
   64:  LW			V1, 7C (A0)
   68:  LUI			V0, 4
   6C:  AND			V0, V1, V0
   70:  BNE			V0, R0, .o1E4
   74:  ADDIU		V0, R0, 2
   78:  LUI			V0, 8
   7C:  AND			V0, V1, V0
   80:  BNE			V0, R0, .o1E4
   84:  ADDIU		V0, R0, 2
   88:  COPY		A0, S0
   8C:  CLEAR		A1
   90:  ADDIU		A2, R0, A
   94:  ADDIU		V0, R0, 1		%duration?
   98:  SB			V0, 224 (S0)
   9C:  ADDIU		V0, R0, 1		%attack reduction
   %A0:  JAL			802788F8						this event is already called, so don't do this!
   A4:  SB			V0, 223 (S0)
   A8:  LH			V0, 150 (S0)
   AC:  LWC1		F0, 144 (S0)
   B0:  LW			V1, 0 (S0)
   B4:  MTC1		V0, F2
   B8:  NOP
   BC:  CVT.S.W		F2, F2
   C0:  LBU			V0, 190 (S0)
   C4:  ADD.S		F0, F0, F2
   C8:  SRL			V0, V0, 1
   CC:  MTC1		V0, F2
   D0:  NOP
   D4:  CVT.S.W		F2, F2
   D8:  ANDI		V0, V1, 800
   DC:  BEQ			V0, R0, .o114
   E0:  ADD.S		F4, F0, F2
   E4:  LH			V0, 152 (S0)
   E8:  LWC1		F0, 148 (S0)
   EC:  MTC1		V0, F2
   F0:  NOP
   F4:  CVT.S.W		F2, F2
   F8:  LBU			V0, 191 (S0)
   FC:  ADD.S		F0, F0, F2
  100:  MTC1		V0, F2
  104:  NOP
  108:  CVT.S.W		F2, F2
  10C:  BEQ			R0, R0, .o180
  110:  SUB.S		F0, F0, F2
        .o114
  114:  ANDI		V0, V1, 8000
  118:  BNE			V0, R0, .o150
  11C:  NOP
  120:  LH			V0, 152 (S0)
  124:  LWC1		F0, 148 (S0)
  128:  MTC1		V0, F2
  12C:  NOP
  130:  CVT.S.W		F2, F2
  134:  LBU			V0, 191 (S0)
  138:  ADD.S		F0, F0, F2
  13C:  MTC1		V0, F2
  140:  NOP
  144:  CVT.S.W		F2, F2
  148:  BEQ			R0, R0, .o180
  14C:  ADD.S		F0, F2, F0
        .o150
  150:  LH			V0, 152 (S0)
  154:  LWC1		F2, 148 (S0)
  158:  MTC1		V0, F0
  15C:  NOP
  160:  CVT.S.W		F0, F0
  164:  LBU			V0, 191 (S0)
  168:  ADD.S		F2, F2, F0
  16C:  SLL			V0, V0, 1
  170:  MTC1		V0, F0
  174:  NOP
  178:  CVT.S.W		F0, F0
  17C:  ADD.S		F0, F2, F0
        .o180
  180:  LH			V0, 154 (S0)
  184:  MFC1		A2, F0
  188:  LWC1		F0, 14C (S0)
  18C:  MTC1		V0, F2
  190:  NOP
  194:  CVT.S.W		F2, F2
  198:  ADD.S		F0, F0, F2
  19C:  LIF			F2, 5.0
  1A4:  ADDIU		A0, R0, 3		%damage icon (5 -> 3)
  1A8:  ADD.S		F0, F0, F2
  1AC:  MFC1		A1, F4
  1B0:  LIF			F4, 1.0
  1B8:  MFC1		A3, F0
  1BC:  ADDIU		V0, R0, 3C
  1C0:  SW			V0, 14 (SP)
  1C4:  JAL			800718D0
  1C8:  SWC1		F4, 10 (SP)
  1CC:  JAL			~Func:sfx_play_sound
  1D0:  ADDIU		A0, R0, 2106
  1D4:  ADDIU		V0, R0, 2
  1D8:  ADDIU		V1, R0, 1
  1DC:  SAW			V1, $End[0]
        .o1E4
  1E4:  LW			RA, 1C (SP)
  1E8:  LW			S0, 18 (SP)
  1EC:  JR			RA
  1F0:  ADDIU		SP, SP, 20
}


%more blue than Frigid Stomp

%uses 3 vars for positions
#new:Function $Function_ChillWaveEffect
{
    0:  ADDIU     SP, SP, FFD8
    4:  SW        S1, 1C (SP)
    8:  COPY      S1, A0
    C:  SW        RA, 24 (SP)
   10:  SW        S2, 20 (SP)
   14:  SW        S0, 18 (SP)
   18:  LW        S0, C (S1)
   1C:  LW        A1, 0 (S0)
   20:  JAL       ~Func:get_variable
   24:  ADDIU     S0, S0, 4
   28:  LW        A1, 0 (S0)
   2C:  ADDIU     S0, S0, 4
   30:  COPY      A0, S1
   34:  JAL       ~Func:get_variable
   38:  COPY      S2, V0
   3C:  COPY      A0, S1
   40:  LW        A1, 0 (S0)
   44:  JAL       ~Func:get_variable
   48:  COPY      S0, V0
   4C:  LW        V1, AC (S1)
   50:  BNE       V1, R0, .o90
   54:  CLEAR     A0
   58:  MTC1      S2, F0
   5C:  NOP
   60:  CVT.S.W   F0, F0
   64:  MFC1      A1, F0
   68:  MTC1      S0, F0
   6C:  NOP
   70:  CVT.S.W   F0, F0
   74:  MFC1      A2, F0
   78:  MTC1      V0, F0
   7C:  NOP
   80:  CVT.S.W   F0, F0
   84:  MFC1      A3, F0
   88:  BEQ       R0, R0, .oC0
   8C:  LI        A0, 1
        .o90
   90:  MTC1      S2, F0
   94:  NOP
   98:  CVT.S.W   F0, F0
   9C:  MFC1      A1, F0
   A0:  MTC1      S0, F0
   A4:  NOP
   A8:  CVT.S.W   F0, F0
   AC:  MFC1      A2, F0
   B0:  MTC1      V0, F0
   B4:  NOP
   B8:  CVT.S.W   F0, F0
   BC:  MFC1      A3, F0
        .oC0
   C0:  JAL       80070B50
   C4:  SW        R0, 10 (SP)
		LW			V1, C (V0)
		ADDIU		A1, R0, 00			%R
		SB			A1, 50 (V1)
		LW			V1, C (V0)
		ADDIU		A1, R0, 60			%G
		SB			A1, 51 (V1)
		LW			V1, C (V0)
		ADDIU		A1, R0, FF			%B
		SB			A1, 52 (V1)
		LW			A0, C (V0)
		ADDIU		V1, R0, D0			%R 2
		SB			V1, 53 (A0)
		LW			A0, C (V0)
		ADDIU		V1, R0, DC			%G 2
		SB			V1, 54 (A0)
		LW			V1, C (V0)
		ADDIU		A1, R0, FF			%B 2
		SB			A1, 55 (V1)		
   C8:  LW        RA, 24 (SP)
   CC:  LW        S2, 20 (SP)
   D0:  LW        S1, 1C (SP)
   D4:  LW        S0, 18 (SP)
   D8:  LI        V0, 2
   DC:  JR        RA
   E0:  ADDIU     SP, SP, 28
}
%/


%Belly Flop -> Hearty Flop
     %Weaker than vanilla but heals Mario's HP
     %It also does Water Damage, so it does more damage to foes weak to water but she will still take damage if the enemy burns with contact
@ $Script_80239DA4
{
    0:  Call  LoadActionCommand ( .ActionCommand:Smash )
   10:  Call  802A9000 ( )
   1C:  ExecWait  $Script_80239BF0
   28:  ExecWait  $Script_80239CBC
   34:  Loop  0000001E
   40:  	Wait  1`
   4C:  	Call  CheckButtonDown   ( ~Flags:Buttons:40000 *Var0 )
   60:  	If  *Var0  !=  .False
   70:  		BreakLoop
   78:  	EndIf
   80:  EndLoop
   88:  Call  802A9258  ( 00000000 00000039 00000003 )
   A0:  Call  SetActionResult   ( 00000000 )
   B0:  Call  SetAnimation      ( .Actor:Partner FFFFFFFF 000F0004 )
   C8:  Call  UseBattleCamPreset    ( 0000003B )
   D8:  Set   *Var0  0000001E
   E8:  Loop  0000003C
   F4:  	Wait  1`
  100:  	Sub   *Var0  00000001
  110:  	If  *Var0  ==  00000000
  120:  		Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000F0008 )
  138:  	EndIf
  140:  	Call  CheckButtonDown   ( ~Flags:Buttons:40000 *Var0 )
  154:  	If  *Var0  ==  .False
  164:  		BreakLoop
  16C:  	EndIf
  174:  EndLoop
  17C:  Thread
  184:  	Call  GetActionCommandResult    ( *Var0 )
  194:  	Call  UseBattleCamPreset        ( 00000034 )
  1A4:  	Call  MoveBattleCamOver ( 00000014 )
  1B4:  EndThread
  1BC:  Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000F0005 )
  1D4:  Thread
  1DC:  	Call  SetActorRotationOffset    ( .Actor:Partner 00000000 0000000C 00000000 )
  1F8:  	Set   *Var0  00000000
  208:  	Loop  0000000A
  214:  		Add   *Var0  00000024
  224:  		Call  SetActorRotation  ( .Actor:Partner 00000000 00000000 *Var0 )
  240:  		Wait  1`
  24C:  	EndLoop
  254:  	Call  SetActorRotation  ( .Actor:Partner 00000000 00000000 00000014 )
  270:  EndThread
  278:  Thread
  280:  	Call  GetActionCommandResult    ( *Var0 )
  290:  	If  *Var0  >  00000000
  2A0:  		Call  GetMenuSelection  ( *Var0 *Var1 *Var2 )
  2B8:  		Switch  *Var2
  2C4:  			Case  ==  000000A7
  2D0:  				Wait  13`
  2DC:  				Call  SetActorScale ( .Actor:Partner *Fixed[1.1] *Fixed[1.1] *Fixed[1.0] )
  2F8:  				Wait  1`
  304:  				Call  SetActorScale ( .Actor:Partner *Fixed[1.1] *Fixed[1.1] *Fixed[1.0] )
  320:  				Wait  1`
  32C:  				Call  SetActorScale ( .Actor:Partner *Fixed[1.2] *Fixed[1.2] *Fixed[1.0] )
  348:  				Wait  1`
  354:  				Call  SetActorScale ( .Actor:Partner *Fixed[1.2] *Fixed[1.2] *Fixed[1.0] )
  370:  				Wait  1`
  37C:  				Call  SetActorScale ( .Actor:Partner *Fixed[1.3] *Fixed[1.3] *Fixed[1.0] )
  398:  			Case  ==  000000A8
  3A4:  				Wait  13`
  3B0:  				Call  SetActorScale ( .Actor:Partner *Fixed[1.15] *Fixed[1.15] *Fixed[1.0] )
  3CC:  				Wait  1`
  3D8:  				Call  SetActorScale ( .Actor:Partner *Fixed[1.2] *Fixed[1.2] *Fixed[1.0] )
  3F4:  				Wait  1`
  400:  				Call  SetActorScale ( .Actor:Partner *Fixed[1.35] *Fixed[1.35] *Fixed[1.0] )
  41C:  				Wait  1`
  428:  				Call  SetActorScale ( .Actor:Partner *Fixed[1.4] *Fixed[1.4] *Fixed[1.0] )
  444:  				Wait  1`
  450:  				Call  SetActorScale ( .Actor:Partner *Fixed[1.55] *Fixed[1.55] *Fixed[1.0] )
  46C:  			Case  ==  000000A9
  478:  				Wait  13`
  484:  				Call  SetActorScale ( .Actor:Partner *Fixed[1.2] *Fixed[1.2] *Fixed[1.0] )
  4A0:  				Wait  1`
  4AC:  				Call  SetActorScale ( .Actor:Partner *Fixed[1.3] *Fixed[1.3] *Fixed[1.0] )
  4C8:  				Wait  1`
  4D4:  				Call  SetActorScale ( .Actor:Partner *Fixed[1.5] *Fixed[1.5] *Fixed[1.0] )
  4F0:  				Wait  1`
  4FC:  				Call  SetActorScale ( .Actor:Partner *Fixed[1.6] *Fixed[1.6] *Fixed[1.0] )
  518:  				Wait  1`
  524:  				Call  SetActorScale ( .Actor:Partner *Fixed[1.8] *Fixed[1.8] *Fixed[1.0] )
  540:  		EndSwitch
  548:  	Else
  550:  		Call  GetMenuSelection  ( *Var0 *Var1 *Var2 )
  568:  		Switch  *Var2
  574:  			Case  ==  000000A7
  580:  				Wait  13`
  58C:  				Call  SetActorScale ( .Actor:Partner *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  5A8:  				Wait  1`
  5B4:  				Call  SetActorScale ( .Actor:Partner *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  5D0:  				Wait  1`
  5DC:  				Call  SetActorScale ( .Actor:Partner *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  5F8:  				Wait  1`
  604:  				Call  SetActorScale ( .Actor:Partner *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  620:  				Wait  1`
  62C:  				Call  SetActorScale ( .Actor:Partner *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  648:  			Case  ==  000000A8
  654:  				Wait  13`
  660:  				Call  SetActorScale ( .Actor:Partner *Fixed[1.05] *Fixed[1.05] *Fixed[1.0] )
  67C:  				Wait  1`
  688:  				Call  SetActorScale ( .Actor:Partner *Fixed[1.1] *Fixed[1.1] *Fixed[1.0] )
  6A4:  				Wait  1`
  6B0:  				Call  SetActorScale ( .Actor:Partner *Fixed[1.15] *Fixed[1.15] *Fixed[1.0] )
  6CC:  				Wait  1`
  6D8:  				Call  SetActorScale ( .Actor:Partner *Fixed[1.2] *Fixed[1.2] *Fixed[1.0] )
  6F4:  				Wait  1`
  700:  				Call  SetActorScale ( .Actor:Partner *Fixed[1.25] *Fixed[1.25] *Fixed[1.0] )
  71C:  			Case  ==  000000A9
  728:  				Wait  13`
  734:  				Call  SetActorScale ( .Actor:Partner *Fixed[1.1] *Fixed[1.1] *Fixed[1.0] )
  750:  				Wait  1`
  75C:  				Call  SetActorScale ( .Actor:Partner *Fixed[1.2] *Fixed[1.2] *Fixed[1.0] )
  778:  				Wait  1`
  784:  				Call  SetActorScale ( .Actor:Partner *Fixed[1.3] *Fixed[1.3] *Fixed[1.0] )
  7A0:  				Wait  1`
  7AC:  				Call  SetActorScale ( .Actor:Partner *Fixed[1.4] *Fixed[1.4] *Fixed[1.0] )
  7C8:  				Wait  1`
  7D4:  				Call  SetActorScale ( .Actor:Partner *Fixed[1.5] *Fixed[1.5] *Fixed[1.0] )
  7F0:  		EndSwitch
  7F8:  	EndIf
  800:  EndThread
  808:  Call  PlaySoundAtActor  ( .Actor:Partner 00002034 )
  81C:  Call  SetGoalToTarget   ( .Actor:Partner )
  82C:  Call  GetActionCommandResult    ( *Var0 )
  83C:  If  *Var0  >  00000000
  84C:  	Thread
  854:  		Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000F0005 )
  86C:  		Wait  10`
  878:  		Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000F0006 )
  890:  	EndThread
  898:  	Call  SetActorJumpGravity   ( .Actor:Partner *Fixed[1.6] )
  8AC:  	Call  JumpToGoal    ( .Actor:Partner 00000014 .False .True .False )
  8CC:  Else
  8D4:  	Thread
  8DC:  		Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000F0005 )
  8F4:  		Wait  10`
  900:  		Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000F0006 )
  918:  	EndThread
  920:  	Call  SetActorJumpGravity   ( .Actor:Partner *Fixed[1.0] )
  934:  	Call  JumpToGoal    ( .Actor:Partner 00000014 .False .True .False )
  954:  EndIf
  95C:  Call  SetAnimation      ( .Actor:Partner FFFFFFFF 000F0007 )
  974:  Call  SetActorRotation  ( .Actor:Partner 00000000 00000000 00000000 )
  990:  Call  SetActorRotationOffset    ( .Actor:Partner 00000000 00000000 00000000 )
  9AC:  Call  GetMenuSelection  ( *Var0 *Var1 *Var2 )
  9C4:  Switch  *Var2
  9D0:  	Case  ==  000000A7
  9DC:  		Set   *VarE  00000001
  9EC:  		Set   *VarF  00000002
  9FC:  	Case  ==  000000A8
  A08:  		Set   *VarE  00000002
  A18:  		Set   *VarF  00000003
  A28:  	Case  ==  000000A9
  A34:  		Set   *VarE  00000002
  A44:  		Set   *VarF  00000004
  A54:  EndSwitch
  A5C:  Call  PartnerTestEnemy  ( *Var0 ~Flags:DamageType:0 00000014 00000000 00000001 00000010 )
  A80:  If  *Var0  ==  .HitResult:Miss % 6
  A90:  	Call  SetActorScale ( .Actor:Partner *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  AAC:  	Call  LandJump      ( .Actor:Partner )
  ABC:  	Call  GetActorPos   ( .Actor:Partner *Var0 *Var1 *Var2 )
  AD8:  	Call  SetGoalPos    ( .Actor:Partner *Var0 *Var1 *Var2 )
  AF4:  	Call  AddGoalPos    ( .Actor:Partner 0000000F 00000000 00000000 )
  B10:  	Call  JumpToGoal    ( .Actor:Partner 00000014 .False .True .False )
  B30:  	Call  AddGoalPos    ( .Actor:Partner 0000000A 00000000 00000000 )
  B4C:  	Call  JumpToGoal    ( .Actor:Partner 0000000A .False .True .False )
  B6C:  	Wait  10`
  B78:  	Call  SetGoalToHome ( .Actor:Partner )
  B88:  	Call  SetActorSpeed ( .Actor:Partner *Fixed[6.0] )
  B9C:  	Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000F0003 )
  BB4:  	Call  RunToGoal     ( .Actor:Partner 00000000 )
  BC8:  	Return
  BD0:  EndIf
  BD8:  Thread
  BE0:  	Wait  3`
  BEC:  	Call  SetActorScale ( .Actor:Partner *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  C08:  EndThread
  C10:  Call  GetActionCommandResult    ( *Var0 )
  C20:  Switch  *Var0
  C2C:  	Case  >  00000000
  C38:  		Call  PartnerDamageEnemy    ( *VarC ~Flags:DamageType:Jump|Water 00000004 00000000 *VarF 00000070 )
  C5C:  	Default
  C64:  		Call  PartnerDamageEnemy    ( *VarC ~Flags:DamageType:Jump|Water 00000004 00000000 *VarE 00000030 )
				
  C88:  EndSwitch
          Wait  10`
	     %Secondary effects of Hearty Flop for a successful Action command...
               %Heal M
        If *VarF > 2`
		     %Recover some HP (Works but the icon needs to be updated from flower to heart if possible)
		     Set  	*VarC 1
		     Call 	$Function_HPHeal ( *VarC )
		     Call	GetActorPos ( .Actor:Partner *Var4 *Var5 *Var6 )
		     Add		*Var4 10
		     Add		*Var5 12
		     Call	PlayEffect ( 00000040 00000002 *Var4 *Var5 *Var6 *VarC 00000000 00000000 00000000 00000000 00000000 00000000 )
	     EndIf								

  C90:  Switch  *VarC
  C9C:  	CaseOR  ==  .HitResult:Hit % 0
  CA8:  	CaseOR  ==  00000002 % 2
  CB4:  		Call  UseBattleCamPreset    ( 00000033 )
  CC4:  		ExecWait  $Script_80239938
  CD0:  	EndCaseGroup
  CD8:  	CaseOR  ==  00000001 % 1
  CE4:  	CaseOR  ==  00000003 % 3
  CF0:  		Call  UseBattleCamPreset    ( 00000003 )
  D00:  		Call  MoveBattleCamOver     ( 00000008 )
  D10:  		ExecWait  $Script_80239714
  D1C:  	EndCaseGroup
  D24:  EndSwitch
  D2C:  Return
  D34:  End
}


/%Squirt --> Sleepy Tea.
Functions similarly to Squirt but now has a secondary effect of putting a foe asleep
It'll be one attack weaker to push Chai/Sushi being a supportive party member rather than an offensive one
% If Mario uses certain items, a global variable gets changed to make the attack inflict a different status condition instead
(Static Leaf = Pary; Dizzy Sweet = Dizzy; Halt Herb = Stop)
The variable gets reset after sleepy tea is used
%/
@ $Script_8023AAE0
{
    0:  Call  LoadActionCommand ( .ActionCommand:Squirt )
   10:  Call  802A9000 ( )
   1C:  Call  GetActorLevel     ( .Actor:Partner *Var0 )
   30:  Switch  *Var0
          %Lowering these bars should decrease the max damage it can do by (Mess with this later...)
   3C:  	Case  ==  00000000
   48:  		Call  SetupMashMeter    ( 00000003 00000028 0000004B 00000064 00000000 00000000 )
   6C:  	Case  ==  00000001
   78:  		Call  SetupMashMeter    ( 00000004 00000023 0000003C 00000050 00000064 00000000 )
   9C:  	Case  ==  00000002
   A8:  		Call  SetupMashMeter    ( 00000005 00000014 00000028 0000003C 00000050 00000064 )
   CC:  EndSwitch
   D4:  Call  UseBattleCamPreset    ( 0000000D )
   E4:  Call  BattleCamTargetActor  ( .Actor:Self )
   F4:  Call  MoveBattleCamOver     (  40` )
  104:  Call  InitTargetIterator ( )
  110:  Thread
  118:  	Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000F0005 )
  130:  	Wait  5`
  13C:  	Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000F0006 )
  154:  EndThread
  15C:  Call  SetActorJumpGravity   ( .Actor:Partner *Fixed[1.0] )
  170:  Call  GetActorPos   ( .Actor:Partner *Var0 *Var1 *Var2 )
  18C:  Call  SetGoalPos    ( .Actor:Partner *Var0 *Var1 *Var2 )
  1A8:  Call  JumpToGoal    ( .Actor:Partner  10` .False .True .False )
  1C8:  Call  $Function_80238000 ( )
  1D4:  Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000F0009 )
  1EC:  Call  AddBattleCamZoom      (  -80` )
  1FC:  Call  MoveBattleCamOver     (  90` )
  20C:  Call  802A911C      ( 00000000 00000057 00000003 )
  224:  Loop  0000005A
  230:  	Call  GetActionResult   ( *Var0 )
  240:  	If  *Var0  ==  00000000
  250:  		Call  GetActorScale ( .Actor:Self *Var0 *Var1 *Var2 )
  26C:  		SetF  *Var1  *Var0
  27C:  		SubF  *Var1  *Fixed[1.0]
  28C:  		DivF  *Var1  00000004
  29C:  		SubF  *Var0  *Var1
  2AC:  	Else
  2B4:  		SetF  *Var0  *Var0
  2C4:  		DivF  *Var0  00000064
  2D4:  		SetF  *Var1  *Fixed[1.0]
  2E4:  		AddF  *Var0  *Var1
  2F4:  	EndIf
  2FC:  	Call  SetActorScale ( .Actor:Self *Var0 *Var0 *Fixed[1.0] )
  318:  	SetF  *VarE  *Var0
  328:  	Wait  1`
  334:  EndLoop
  33C:  Call  PlaySoundAtActor  ( .Actor:Partner 00000297 )
  350:  Call  UseBattleCamPreset    ( 00000003 )
  360:  Call  MoveBattleCamOver (  10` )
  370:  Call  PartnerTestEnemy  ( *Var0 ~Flags:DamageType:NoContact|Water 00000014 00000000  1` 00000010 )
  394:  If  *Var0  ==  .HitResult:Miss % 6
  3A4:  	Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000F000A )
  3BC:  	Call  SetActorScale ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  3D8:  	Call  GetActorPos   ( .Actor:Partner *Var0 *Var1 *Var2 )
  3F4:  	Add   *Var0  0000000A
  404:  	Add   *Var1  0000000B
  414:  	Call  GetGoalPos    ( .Actor:Partner *Var3 *Var4 *Var5 )
  430:  	Call  $Function_802382A4 ( )
  43C:  	Call  PlayEffect    ( ~FX:Squirt:Waterbeam *Var0 *Var1 *Var2 *Var3 *Var4 *Var5 *VarE 0000000A 00000000 00000000 00000000 00000000 )
  480:  	Wait  20`
  48C:  	ExecWait  $Script_80239B68
  498:  	Return
  4A0:  EndIf
  4A8:  Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000F000A )
  4C0:  Thread
  4C8:  	Call  $Function_802381EC ( )
  4D4:  EndThread
  4DC:  Call  GetActorPos   ( .Actor:Partner *Var0 *Var1 *Var2 )
  4F8:  Add   *Var0  0000000A
  508:  Add   *Var1  0000000B
  518:  Call  GetGoalPos    ( .Actor:Partner *Var3 *Var4 *Var5 )
  534:  Call  PlayEffect    ( ~FX:Squirt:Waterbeam *Var0 *Var1 *Var2 *Var3 *Var4 *Var5 *VarE 0000000A 00000000 00000000 00000000 00000000 )
  578:  Wait  10`
  584:  Call  GetActionResult   ( *Var0 )
  594:  Call  $Function_80238114 ( )

     %Calcuate determine which tea Chai has (used for determining the status of the move...)
     %(0 = Sleep, 1 = Dizzy, 2 = Paralyze, 3 = Stop)
     Switch *GB_ChaiTea
          % Sleep Tea
          Case  ==  0
               Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:NoContact|Water 00000212 00000000 *VarF 00000070 )
               % Maybe track how many times I use the tea move with a Global Variable?  I really got to figure out how to reset it at the end of a battle before implementing that though.
               Call  PartnerAfflictEnemy   ( *Var0 ~Flags:DamageType:NoOtherDamagePopups 0000009F ~DebuffType:Sleep:3:100` 000000FE 00000000 00000070 ) 
               Call  PlaySoundAtActor      ( .Actor:Partner 00000110 )
          % Dizzy Tea
          Case  ==  1
               Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:NoContact|Water 00000212 00000000 *VarF 00000070 )
               Call  PartnerAfflictEnemy   ( *Var0 ~Flags:DamageType:NoOtherDamagePopups|StatusAlwaysHits 0000009F ~DebuffType:Dizzy:3:100` 000000FE 00000000 00000070 )
               % Revert back to Sleepy Tea
               Set *GB_ChaiTea 0
          Call  PlaySoundAtActor      ( .Actor:Partner 00000110 )
          % Paralyze Tea
          Case  ==  2
               Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:NoContact|Water 00000212 00000000 *VarF 00000070 )
               Call  PartnerAfflictEnemy   ( *Var0 ~Flags:DamageType:NoContact|StatusAlwaysHits|Electric 00000000 C0010300 000000FE  0` 00000070 )
               % Revert back to Sleepy Tea
               Set *GB_ChaiTea 0
               Call  PlaySoundAtActor      ( .Actor:Partner 00000110 )
          % Stop Tea
          Case  ==  3
          Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:NoContact|Water 00000212 00000000 *VarF 00000070 )
          Call  PartnerAfflictEnemy   ( *Var0 ~Flags:DamageType:NoOtherDamagePopups|StatusAlwaysHits 0000009F ~DebuffType:Stop:4:100` 000000FE 00000000 00000070 )

          % Revert back to Sleepy Tea
          Set *GB_ChaiTea 0
          Call  PlaySoundAtActor      ( .Actor:Partner 00000110 )
  5F0:  	Default
               Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:NoContact|Water 00000212 00000000 *VarF 00000030 )
               Call  PartnerAfflictEnemy   ( *Var0 ~Flags:DamageType:NoOtherDamagePopups|StatusAlwaysHits 0000009F ~DebuffType:Sleep:3:100` 000000FE 00000000 00000070 )
               Call  PlaySoundAtActor      ( .Actor:Partner 00000110 )
     EndSwitch %End of the tea check switch


  638:  Switch  *Var0
  644:  	CaseOR  ==  .HitResult:Hit % 0
  650:  	CaseOR  ==  .HitResult:QuakeImmune % 2
  65C:  		ExecWait  $Script_80239B68
  668:  	EndCaseGroup
  670:  	CaseOR  ==  00000001 % 1
  67C:  	CaseOR  ==  00000003 % 3
  688:  		ExecWait  $Script_80239AE0
  694:  	EndCaseGroup
  69C:  EndSwitch
  6A4:  Return
  6AC:  End
}

/%Ginger Aura/ V2
Partner heals Mario, it'll heal 2,4,6, or 8 HP based on how many dots get timed correctly.
Uses the vanilla Water Block script up to checking the Action Command...
     then swap over to the script of Rejunviate from Dark Star to do the heal instead of defense boost of water block...
     ...works minus the fact the party member clips through the ground afterwords (maybe ending script from water block can fix this?)
     It will also cure statuses like Refresh if you get all four presses of the action command right....
%/
@ $Script_8023B194
        {
            0:  Call  UseIdleAnimation  ( .Actor:Partner .False )
           14:  Call  InitTargetIterator ( )
           20:  Call  UseBattleCamPreset    ( 00000013 )
           30:  Call  SetBattleCamTarget    (  -95`  26`  10` )
           48:  Call  SetBattleCamOffsetZ   (  11` )
           58:  Call  SetBattleCamZoom  (  238` )
           68:  Call  MoveBattleCamOver (  30` )
           78:  Wait  10`
           84:  Call  SetAnimation      ( .Actor:Partner FFFFFFFF 000F0009 )
           9C:  Call  SetActorJumpGravity   ( .Actor:Partner *Fixed[1.0] )
           B0:  Call  GetActorPos       ( .Actor:Partner *Var0 *Var1 *Var2 )
           CC:  Add   *Var0  0000001E
           DC:  Call  SetGoalPos        ( .Actor:Partner *Var0 *Var1 *Var2 )
           F8:  Call  JumpToGoal        ( .Actor:Partner  10` .False .True .False )
          118:  Call  LoadActionCommand ( .ActionCommand:WaterBlock )
          128:  Call  802A9000  ( 00000000 )
          138:  Call  80269344  ( 00000000 )
          148:  Set   *Var0  00000000
          158:  Loop  00000004
          164:  	Add   *Var0  0000002D
          174:  	Call  SetActorYaw   ( .Actor:Partner *Var0 )
          188:  	Wait  1`
          194:  EndLoop
          19C:  Wait  4`
          1A8:  Call  802A9398  ( 00000000 00000064 00000003 )
          1C0:  Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000F000B )
          1D8:  Wait  110`
          1E4:  Call  GetActionCommandResult    ( *Var0 )
          3A8:  Call  GetActionCommandResult    ( *VarA )
                Call  GetActionCommandResult    ( *VarB )
                %These lines should set the heal range to (2,6,9,10) with also curing statuses with a perfect command
                %*VarA = heal amount (3,6,9,12)
                Mul  *VarA 3	
               %If higher than 10, set down to 10 HP...
                If *VarA > 10`
                    Set *VarA 10`
                EndIf
                %If the value is 4 or lower, set to 2 HP...
                If *VarA < 00000004
                    Set *VarA 00000002
                EndIf
                390:  Call     UseIdleAnimation 	( .Actor:Player .True )
          3A4:  Call     SetAnimation 	( .Actor:Partner FFFFFFFF 00FC0014 )
          %Smooch
          840:  Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
          85C:  Add  *Var[0]  00000000 
          86C:  Add  *Var[1]  00000023 
          87C:  Call     $Function_802A156C ( *Var[0] *Var[1] *Var[2] *Var[A] )
          898:  Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
          8B4:  Add  *Var[1]  00000019 
          8C4:  Call     802D7520 ( *Var[0] *Var[1] *Var[2] *Var[A] )
          8E0:  Call     $Function_802A1518 ( *Var[A] )
          %EndSmooch
          Call  PlayEffect        ( ~FX:WaterFall *Var0 *Var1 *Var2 *Fixed[1.0] 00000032 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
          Call  PlaySoundAtActor  ( .Actor:Partner 00002035 )
          %Restore statues, like poison if all inputs are pressed
               If *VarB > 3
                    Call $CureTarget(.Actor:Player)
               EndIf
          % Resume script
          5D0:  Call  SetAnimation  ( .Actor:Partner FFFFFFFF 00FC0002 )
          600:  Wait  7`
          6B0:  Thread
          6B8:  	Call  GetActorPos   ( .Actor:Partner *Var0 *Var1 *Var2 )
          6D4:  	Sub   *Var1  00000005
          71C:  EndThread
          724:  Wait  5`
          730:  Set   *Var0  000000B4
          740:  Loop  0000000A
          74C:  	Sub   *Var0  00000012
          75C:  	Call  SetActorYaw   ( .Actor:Partner *Var0 )
          770:  	Wait  1`
          77C:  EndLoop
          784:  Call  UseBattleCamPreset    ( 00000002 )
          794:  Call  MoveBattleCamOver     ( 0000001E )
          7A4:  Wait  10`
          7E8:  Call  SetBattleFlagBits ( 00000008 .True )
          7FC:  Return
          804:  End
        }


%Function for Toxicitea (Replacing Tital Wave)
%Only does up to 4 damage (5 if you count the immediate poison damage that follows), but will poison foes; turns increasing based on inputs
     % About 1 extra turn of posion per input beyond max damage (up to 9 turns of poison for 11 inputs; )
     % Though poison will fail to work if you only get 1 input
@     $Script_8023B974
{
  0:  Call  UseIdleAnimation  ( .Actor:Partner .False )
 14:  Call  LoadActionCommand ( .ActionCommand:TidalWave )
 24:  Call  802A9000 ( )
 30:  Call  SetupMashMeter    ( 00000005 00000014 0000001E 0000003C 00000050 00000064 )
 54:  Call  InitTargetIterator ( )
 60:  Call  UseBattleCamPreset    ( 00000013 )
 70:  Call  SetBattleCamTarget    (  -65`  53`  10` )
 88:  Call  SetBattleCamOffsetZ   (  16` )
 98:  Call  SetBattleCamZoom  (  214` )
 A8:  Call  MoveBattleCamOver (  20` )
 B8:  Call  SetAnimation      ( .Actor:Partner FFFFFFFF 000F0003 )
 D0:  Call  SetActorJumpGravity   ( .Actor:Partner *Fixed[0.5] )
 E4:  Call  GetActorPos       ( .Actor:Partner *Var0 *Var1 *Var2 )
100:  Call  SetGoalPos        ( .Actor:Partner *Var0 *Var1 *Var2 )
11C:  Call  JumpToGoal        ( .Actor:Partner  5` .False .True .False )
13C:  Call  SetActorJumpGravity   ( .Actor:Partner *Fixed[1.0] )
150:  Call  AddGoalPos        ( .Actor:Partner  30`  40`  0` )
16C:  Call  JumpToGoal        ( .Actor:Partner  15` .False .True .False )
18C:  Call  SetAnimation      ( .Actor:Partner FFFFFFFF 000F0001 )
1A4:  Call  SetAnimation      ( .Actor:Partner FFFFFFFF 000F000B )
1BC:  Call  802A9138  ( 00000000 00000064 00000003 )
1D4:  Call  SetActorRotationOffset    ( .Actor:Partner 00000000 0000000C 00000000 )
1F0:  Thread
1F8:  	Wait  54`
204:  	Loop  00000008
210:  		Call  SetActorDispOffset    ( .Actor:Partner 00000000 00000000 00000000 )
22C:  		Wait  1`
238:  		Call  SetActorDispOffset    ( .Actor:Partner FFFFFFFF 00000000 00000000 )
254:  		Wait  1`
260:  	EndLoop
268:  	Loop  00000007
274:  		Call  SetActorDispOffset    ( .Actor:Partner 00000001 00000000 00000000 )
290:  		Wait  1`
29C:  		Call  SetActorDispOffset    ( .Actor:Partner FFFFFFFF 00000000 00000000 )
2B8:  		Wait  1`
2C4:  	EndLoop
2CC:  	Loop  00000008
2D8:  		Call  SetActorDispOffset    ( .Actor:Partner 00000001 00000000 00000000 )
2F4:  		Wait  1`
300:  		Call  SetActorDispOffset    ( .Actor:Partner FFFFFFFE 00000000 00000000 )
31C:  		Wait  1`
328:  	EndLoop
330:  	Call  SetActorDispOffset    ( .Actor:Partner 00000000 00000000 00000000 )
34C:  EndThread
354:  Loop  00000064
360:  	Call  GetActionResult   ( *Var0 )
370:  	Call  $Function_80238E30 ( )
37C:  	Wait  1`
388:  EndLoop
390:  Call  UseBattleCamPreset    ( 00000002 )
3A0:  Call  MoveBattleCamOver (  5` )
3B0:  Wait  10`
3BC:  Call  EnableActorBlur   ( .Actor:Partner 00000001 )
3D0:  Call  $Function_80238540 ( )
3DC:  Call  SetActorPos       ( .Actor:Partner  -220`  0`  0` )
3F8:  Call  EnableActorBlur   ( .Actor:Partner 00000000 )
40C:  Wait  15`
418:  Call  UseBattleCamPreset    ( 00000003 )
428:  Call  MoveBattleCamOver (  20` )
438:  Call  GetActionSuccessCopy  ( *Var0 )
448:  Set   *VarE  *Var0
458:  Set   *VarF  *Var0
468:  Call  InitTargetIterator ( )
474:  Loop
480:  	Call  SetGoalToTarget   ( .Actor:Self )
490:  	Call  PartnerTestEnemy  (*Var0 ~Flags:DamageType:NoContact|Water 00000000 ~DebuffType:Poison:3:100` 00000005 00000020 )
4B4:  	If  *Var0  ==  .HitResult:Miss % 6
4C4:  		Goto  A
4D0:  	EndIf
     %Apply Poison turns based on how good the action command is... (aka Number of Tidal wave button presses/inputs)
      Switch  *VarF
               %11 or more: 9 turns of poison
               Case  >  0000000A
                    Call  PartnerAfflictEnemy   ( *Var0 ~Flags:DamageType:NoOtherDamagePopups|StatusAlwaysHits 0000009F ~DebuffType:Poison:9:100` 000000FE 00000000 00000070 )
                    Wait 3`
               %10 or more: 8 turns of poison
               Case  >  00000009
                    Call  PartnerAfflictEnemy   ( *Var0 ~Flags:DamageType:NoOtherDamagePopups|StatusAlwaysHits 0000009F ~DebuffType:Poison:8:100` 000000FE 00000000 00000070 )
                    Wait 3`
               %9 or more: 7 turns of poison
        	     Case  >  00000008
                    Call  PartnerAfflictEnemy   ( *Var0 ~Flags:DamageType:NoOtherDamagePopups|StatusAlwaysHits 0000009F ~DebuffType:Poison:7:100` 000000FE 00000000 00000070 )
                    Wait 3`
               %8 or more: 6 turns of poison
      8FC:  	Case  >  00000007
          928:  	Call  PartnerAfflictEnemy   ( *Var0 ~Flags:DamageType:NoOtherDamagePopups|StatusAlwaysHits 0000009F ~DebuffType:Poison:6:100` 000000FE 00000000 00000070 )
                    Wait 3`
               %7 or more: 5 turns of poison
      8FC:  	Case  >  00000006
      928:  		Call  PartnerAfflictEnemy   ( *Var0 ~Flags:DamageType:NoOtherDamagePopups|StatusAlwaysHits 0000009F ~DebuffType:Poison:5:100` 000000FE 00000000 00000070 )
                    Wait 3`
               %6 or more: 4 turns of poison
               Case  >  00000005
                    Call  PartnerAfflictEnemy   ( *Var0 ~Flags:DamageType:NoOtherDamagePopups|StatusAlwaysHits 0000009F ~DebuffType:Poison:4:100` 000000FE 00000000 00000070 )
                    Wait 3`
               %5 or more: Poison is guarnteed for three turns...
               Case  >  00000004
                    Call  PartnerAfflictEnemy   ( *Var0 ~Flags:DamageType:NoOtherDamagePopups|StatusAlwaysHits 0000009F ~DebuffType:Poison:3:100` 000000FE 00000000 00000070 )
                    Wait 3`
               %Get at least 4 presses for a guarnteed poison for 2 turn
               Case > 00000003
                    Call  PartnerAfflictEnemy   ( *Var0 ~Flags:DamageType:NoOtherDamagePopups|StatusAlwaysHits 0000009F ~DebuffType:Poison:2:100` 000000FE 00000000 00000070 )
                    Wait 3`
               %Get at least 3 presses for a guarnteed poison for 2 turn 
               Case > 00000002
                    Call  PartnerAfflictEnemy   ( *Var0 ~Flags:DamageType:NoOtherDamagePopups|StatusAlwaysHits 0000009F ~DebuffType:Poison:2:100` 000000FE 00000000 00000070 )
                    Wait 3`
               %Get at least 2 presses for a good chance at poison for 1 turn...
               Case > 00000001
                    Call  PartnerAfflictEnemy   ( *Var0 ~Flags:DamageType:NoOtherDamagePopups|StatusAlwaysHits 0000009F ~DebuffType:Poison:1:80` 000000FE 00000000 00000070 )
                    Wait 3`
               % 1 or less, no poison
               Default
                    Call  PartnerAfflictEnemy   ( *Var0 ~Flags:DamageType:NoOtherDamagePopups 0000009F 00000000 000000FE 00000000 00000070 )
                    Wait 3`
      A38:  EndSwitch

     %Calcuate the damage here...
     %Cap the damage at 4. If 5 or more inputs done are done lower do 4 damage, otherwise, base damage on number of inputs.
4D8: Switch  *VarE
4E4:  	Case  >=  00000005
               Switch *VarF
                    Case > 00000004
                         Call  PartnerDamageEnemy (*Var0 ~Flags:DamageType:NoContact|Water 00000000 00000000 00000004 00000020 )
                    Default
                         Call  PartnerDamageEnemy ( *Var0 ~Flags:DamageType:NoContact|Water 00000000 00000000 *VarF 00000020 )
               EndSwitch
           Default
               Switch *VarF
                    Case > 00000004
                         Call  PartnerDamageEnemy (*Var0 ~Flags:DamageType:NoContact|Water 00000000 00000000 00000004 00000020 )
                    Default
                         Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:NoContact|Water 00000000 00000000 *VarF 00000020 )
               EndSwitch
     EndSwitch
        Call  GetStatusFlags    ( .Actor:Player *Var0 )
  558:  
548:  	Wait  5`
554:  	Label  A
          %Select the next target on the list and repeat...
560:  	Call  ChooseNextTarget  ( .Iter:Next *Var0 )
574:  	If  *Var0  ==  FFFFFFFF
584:  		BreakLoop
58C:  	EndIf
594:  EndLoop
     %Ending animations...
59C:  Call  80280818 ( )
5A8:  Call  SetGoalToHome ( .Actor:Partner )
5B8:  Call  AddGoalPos    ( .Actor:Partner  0`  150`  0` )
5D4:  Call  GetGoalPos    ( .Actor:Partner *Var0 *Var1 *Var2 )
5F0:  Call  SetActorPos   ( .Actor:Partner *Var0 *Var1 *Var2 )
60C:  Call  SetActorRotationOffset    ( .Actor:Partner 00000000 00000000 00000000 )
628:  Call  SetActorJumpGravity       ( .Actor:Partner *Fixed[1.0] )
63C:  Call  SetGoalToHome ( .Actor:Partner )
64C:  Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000F0001 )
664:  Call  JumpToGoal    ( .Actor:Partner  40` .False .True .False )
684:  Call  SetActorJumpGravity       ( .Actor:Partner *Fixed[0.7] )
698:  Call  JumpToGoal    ( .Actor:Partner  20` .False .True .False )
6B8:  Call  JumpToGoal    ( .Actor:Partner  10` .False .True .False )
6D8:  Return
6E0:  End
}


%These are functions that the Rejuvinate code calls, adapted into Ginger Aura...
#new:Function $Function_802A1518
{
    0:  ADDIU     SP, SP, FFE8
    4:  SW        RA, 14 (SP)
    8:  SW        S0, 10 (SP)
    C:  LW        V0, C (A0)
   10:  JAL       ~Func:get_variable
   14:  LW        A1, 0 (V0)
   18:  LIA       V1, 8010F290
   20:  LB        A0, 2 (V1)
   24:  LB        A1, 3 (V1)
   28:  ADDU      A0, A0, V0
   2C:  SLT       V0, A1, A0
   30:  BEQ       V0, R0, .o3C
   34:  DADDU     S0, V1, R0
   38:  DADDU     A0, A1, R0
        .o3C
   3C:  SB        A0, 2 (S0)
   40:  LW        RA, 14 (SP)
   44:  LW        S0, 10 (SP)
   48:  ADDIU     V0, R0, 2
   4C:  JR        RA
   50:  ADDIU     SP, SP, 18 
}

#new:Function $Function_802A156C
{
    0:  ADDIU     SP, SP, FFD0
    4:  SW        S1, 1C (SP)
    8:  DADDU     S1, A0, R0
    C:  SW        RA, 28 (SP)
   10:  SW        S3, 24 (SP)
   14:  SW        S2, 20 (SP)
   18:  SW        S0, 18 (SP)
   1C:  LW        S0, C (S1)
   20:  LW        A1, 0 (S0)
   24:  JAL       ~Func:get_variable
   28:  ADDIU     S0, S0, 4
   2C:  LW        A1, 0 (S0)
   30:  ADDIU     S0, S0, 4
   34:  DADDU     A0, S1, R0
   38:  JAL       ~Func:get_variable
   3C:  DADDU     S3, V0, R0
   40:  LW        A1, 0 (S0)
   44:  ADDIU     S0, S0, 4
   48:  DADDU     A0, S1, R0
   4C:  JAL       ~Func:get_variable
   50:  DADDU     S2, V0, R0
   54:  DADDU     A0, S1, R0
   58:  LW        A1, 0 (S0)
   5C:  JAL       ~Func:get_variable
   60:  DADDU     S0, V0, R0
   64:  MTC1      S3, F0
   68:  NOP
   6C:  CVT.S.W   F0, F0
   70:  MFC1      A1, F0
   74:  MTC1      S2, F0
   78:  NOP
   7C:  CVT.S.W   F0, F0
   80:  MFC1      A2, F0
   84:  MTC1      S0, F0
   88:  NOP
   8C:  CVT.S.W   F0, F0
   90:  MFC1      A3, F0
   94:  DADDU     A0, R0, R0
   98:  JAL       80071090				%spawn a heart
   9C:  SW        V0, 10 (SP)
   A0:  LW        RA, 28 (SP)
   A4:  LW        S3, 24 (SP)
   A8:  LW        S2, 20 (SP)
   AC:  LW        S1, 1C (SP)
   B0:  LW        S0, 18 (SP)
   B4:  ADDIU     V0, R0, 2
   B8:  JR        RA
   BC:  ADDIU     SP, SP, 30
}