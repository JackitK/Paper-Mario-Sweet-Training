%Adjustments to Watt's battle moves to become the "new" Rush partner

%"Watt" is no longer immune to shock since she's no longer an "electric" Sparky. 
% Since I've basically adopted Throw as my "wind element", I guess techincally Rush should also be weak to throw since "Flying enemies are weak to wind"
% If I'm adding a quake immunity I should also add a throw weakness... just in case a situation comes up that it matters...
%(I know that's a little confusing considering how Lee Rush behaves, but he's not a perfect copy of Rush 
% and the times enemies can even attack partners are so few and far between that I don't think anyone outside of code divers will even notice)
% Still conflicted on if I should keep this feature or revert her to being immune to electric again...if I do use Rush in a full mod it could make the General Guy fight too harsh if she's not immune
     %(It'd be cool if she gain an resistance to what ever element she's currently set to, but I don't know if I'll have time to figure out how to do that...)""
     %Not that I think it'll matter for this mod, but she should be immune to quake, since she floats in the air.

%Netural Element 
@ $DefenseTable_80238FCC
{
	.Element:Normal 00000000
	%.Element:Shock  00000000
     .Element:Quake  00000063
     .Element:Throw  -1`
	.Element:End
}
%See Extra Rush Functions for addtional elemental tables...

%Parts table for Rush/Watt (Can I update this to change defense table with the element?)
@ $PartsTable_8023908C
{
	00800000 01000000 0A1600FF $IdleAnimations_80238F90 $DefenseTable_80238FCC 00000080 00000000 00000000 00000000
}


% I attempted to update this so Rush could attack enemies on fire while fire element and keep her static immunity only when electric...
% But that didn't pan out.  So none of this is really different for now, but I might update this when I finish the "real" Sweet Expedition
@ $Script_HandleEvent_80239160
{
    0:  Call  UseIdleAnimation      ( .Actor:Partner .False )
   14:  Call  CloseActionCommandInfo ( )
   20:  Call  $Function_802383D4 ( )
   2C:  Call  $Function_802383E4 ( )
   38:  Call  $Function_80238408    ( 00000000 )
   48:  Call  GetLastEvent  ( .Actor:Partner *Var0 )
        %Get what Element Rush is so we can properly check to see if we need to skip Shock Hit or Burn Contact events...
        Call $ScrApi_GetElementVariable ( *VarB)

        %Resume the normal check...
   5C:  Switch  *Var0
   68:  	CaseOR  ==  .Event:HitCombo % 9
   74:  	CaseOR  ==  .Event:Hit % A
   80:  		SetConst  *Var1  000E000C
   90:  		SetConst  *Var2  000E000C
   A0:  		ExecWait  802977BC
   AC:  		SetConst  *Var1  000E000C
   BC:  		ExecWait  80296014
   C8:  	EndCaseGroup
   D0:  	CaseOR  ==  00000017 % 17
   DC:  	CaseOR  ==  .Event:Immune % 19
   E8:  		Call  PlaySoundAtActor  ( .Actor:Partner 0000208C )
   FC:  		SetConst  *Var0  00000001
  10C:  		SetConst  *Var1  000E000C
  11C:  		ExecWait  80297814
  128:  		Call  $Function_802383C0 ( )
  134:  	EndCaseGroup
  13C:  	Case  ==  .Event:SpikeContact % 2A
  148:  		SetConst  *Var1  000E000C
  158:  		SetConst  *Var2  0000000C
  168:  		ExecWait  80294FE4
  174:  		SetConst  *Var1  000E000C
  184:  		ExecWait  80296014
  190:  	Case  ==  .Event:BurnContact % 2C
  19C:  		     Call  $Function_802383F8 ( )
  1A8:  		     SetConst  *Var1  000E000D
  1B8:  		     Set   *Var2  0000000C
  1C8:  		     SetConst  *Var3  000E000E
  1D8:  		     ExecWait  80294C68
  1E4:  		     Call  $Function_802383E4 ( )
  1F0:  		     SetConst  *Var1  000E000C
  200:  		     ExecWait  80296014
  20C:  	Case  ==  .Event:BurnHit % E
  218:  		SetConst  *Var1  000E000D
  228:  		SetConst  *Var2  000E000E
  238:  		ExecWait  8029621C
  244:  		SetConst  *Var1  000E000C
  254:  		ExecWait  80296014
  260:  	Case  ==  .Event:ShockHit % 2F
  26C:  		SetConst  *Var1  000E000C
  27C:  		Set   *Var2  0000000C
  28C:  		ExecWait  80295744
  298:  	Case  ==  00000033 % 33
  2A4:  		SetConst  *Var1  000E000C
  2B4:  		ExecWait  80296014
  2C0:  	Case  ==  00000034 % 34
  2CC:  		Call  $Function_802383C0 ( )
  2D8:  		SetConst  *Var0  00000001
  2E8:  		SetConst  *Var1  000E0001
  2F8:  		SetConst  *Var2  000E0003
  308:  		Set   *Var3  00000014
  318:  		ExecWait  80295EC4
  324:  		Call  $Function_802383C0 ( )
  330:  	Case  ==  0000003E % 3E
  33C:  		Call  $Function_80238370 ( )
  348:  	CaseOR  ==  00000018 % 18
  354:  	CaseOR  ==  .Event:Block % 1A
  360:  		Call  PlaySoundAtActor  ( .Actor:Partner 0000208C )
  374:  		SetConst  *Var0  00000001
  384:  		SetConst  *Var1  000E0013
  394:  		ExecWait  80297814
  3A0:  		Wait  10`
  3AC:  	EndCaseGroup
  3B4:  	Case  ==  .Event:LifeShroomProc % 40
  3C0:  		Call  $Function_802383F8 ( )
  3CC:  	Case  ==  .Event:Revive % 41
  3D8:  		Call  $Function_802383E4 ( )
  3E4:  	Default
  3EC:  EndSwitch
  3F4:  Call  UseIdleAnimation  ( .Actor:Partner .True )
  408:  Return
  410:  End
}

%Tied to movement during Gumdrop attack
#new:Script $Script_8023AA70
{
    0:  Call  80280818 ( )
    C:  Call  UseBattleCamPreset    ( 00000004 )
   1C:  Call  SetGoalToHome ( .Actor:Partner )
   2C:  Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000E0003 )
   44:  Call  FlyToGoal     ( .Actor:Partner  15`  0` .Easing:CosInOut )
   60:  Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000E0002 )
   78:  Return
   80:  End
}

%Tied to movement during Gumdrop attack
#new:Script $Script_8023AAF8
{
    0:  Call  80280818 ( )
    C:  Call  UseBattleCamPreset    ( 00000033 )
   1C:  Call  SetGoalToHome ( .Actor:Partner )
   2C:  Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000E0003 )
   44:  Call  FlyToGoal     ( .Actor:Partner  15`  0` .Easing:CosInOut )
   60:  Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000E0002 )
   78:  Return
   80:  End
}


%Import the functions that let partners Chill from Dark Star to implement in the ice version of Sugar Rush....
     % It's how the secondary effect drop on her ice varent works...
     #new:Function $Function_CheckChill %chill out fails against targets with certain flags
     {
         0:  ADDIU		SP, SP, FFE0
         4:  SW			S2, 18 (SP)
         8:  COPY		S2, A0
         C:  SW			RA, 1C (SP)
        10:  SW			S1, 14 (SP)
        14:  SW			S0, 10 (SP)
        18:  JAL			~Func:get_actor		%get mario
        1C:  LW			A0, 148 (S2)
        20:  COPY		S0, V0
        24:  JAL			~Func:get_actor		%get target
        28:  LH			A0, 428 (S0)
        2C:  COPY		S1, V0
        30:  LB			A1, 426 (S0)
        34:  JAL			~Func:get_actor_part	%get part of target
        38:  COPY		A0, S1
        3C:  SW			R0, 84 (S2)
               %Ensure that chill out is not already enabled
               LB			T0, 224 (S1)	%duration
               SLTI		T0, T0, 1
               BEQ			T0, R0, .oA0
               NOP
        40:  LW			S1, 0 (S1)		%Actor flags
        44:  COPY		V1, V0			%Part pointer
        48:  ANDI		V0, S1, 4000 	%check flag 4000 (target only)
        4C:  BNE			V0, R0, .oA0
        50:  ADDIU		V0, R0, 2
        54:  LUI			V0, 40			%check flag 400000 (not targettable)
        58:  AND			V0, S1, V0
        5C:  BNE			V0, R0, .oA0
        60:  ADDIU		V0, R0, 2
        64:  ANDI		V0, S1, 2000	%check flag 2000 (???)
        68:  BNE			V0, R0, .oA0
        6C:  ADDIU		V0, R0, 2
        70:  LW			V1, 7C (V1)		%Part event flags
        74:  LUI			V0, 4			%check flag 40000 (normal star rod)
        78:  AND			V0, V1, V0
        7C:  BNE			V0, R0, .oA0
        80:  ADDIU		V0, R0, 2
        84:  LUI			V0, 8			%check flag 80000 (final star rod)
        88:  AND			V0, V1, V0
        8C:  BNE			V0, R0, .oA0
        90:  ADDIU		V0, R0, 2
        94:  ADDIU		V0, R0, 1
        98:  SW			V0, 84 (S2)		%Store 1 into Var0 (used by checker functions later)
        9C:  ADDIU		V0, R0, 2
             .oA0
               ADDIU		V0, R0, 2
        A0:  LW			RA, 1C (SP)
        A4:  LW			S2, 18 (SP)
        A8:  LW			S1, 14 (SP)
        AC:  LW			S0, 10 (SP)
        B0:  JR			RA
        B4:  ADDIU		SP, SP, 20
     }
     
     
     #new:Function $Function_ChillTarget
     {
         0:  ADDIU		SP, SP, FFE0
         4:  SW			RA, 1C (SP)
         8:  SW			S0, 18 (SP)
         C:  JAL			~Func:get_actor
        10:  LW			A0, 148 (A0)
        14:  COPY		S0, V0
        18:  JAL			~Func:get_actor
        1C:  LH			A0, 428 (S0)
        20:  LB			A1, 426 (S0)
        24:  COPY		S0, V0
        28:  JAL			~Func:get_actor_part
        2C:  COPY		A0, S0
        30:  LW			V1, 0 (S0)
        34:  COPY		A0, V0
        38:  ANDI		V0, V1, 4000 %star rod flag
        3C:  BNE			V0, R0, .o1E4
        40:  ADDIU		V0, R0, 2
        44:  LUI			V0, 40
        48:  AND			V0, V1, V0
        4C:  BEQ			V0, R0, .o5C
        50:  ANDI		V0, V1, 2000
        54:  BEQ			R0, R0, .o1E4
        58:  ADDIU		V0, R0, 2
             .o5C
        5C:  BNE			V0, R0, .o1E4
        60:  ADDIU		V0, R0, 2
        64:  LW			V1, 7C (A0)
        68:  LUI			V0, 4
        6C:  AND			V0, V1, V0
        70:  BNE			V0, R0, .o1E4
        74:  ADDIU		V0, R0, 2
        78:  LUI			V0, 8
        7C:  AND			V0, V1, V0
        80:  BNE			V0, R0, .o1E4
        84:  ADDIU		V0, R0, 2
        88:  COPY		A0, S0
        8C:  CLEAR		A1
        90:  ADDIU		A2, R0, A
        94:  ADDIU		V0, R0, 1		%duration?
        98:  SB			V0, 224 (S0)
        9C:  ADDIU		V0, R0, 1		%attack reduction
        %A0:  JAL			802788F8						this event is already called, so don't do this!
        A4:  SB			V0, 223 (S0)
        A8:  LH			V0, 150 (S0)
        AC:  LWC1		F0, 144 (S0)
        B0:  LW			V1, 0 (S0)
        B4:  MTC1		V0, F2
        B8:  NOP
        BC:  CVT.S.W		F2, F2
        C0:  LBU			V0, 190 (S0)
        C4:  ADD.S		F0, F0, F2
        C8:  SRL			V0, V0, 1
        CC:  MTC1		V0, F2
        D0:  NOP
        D4:  CVT.S.W		F2, F2
        D8:  ANDI		V0, V1, 800
        DC:  BEQ			V0, R0, .o114
        E0:  ADD.S		F4, F0, F2
        E4:  LH			V0, 152 (S0)
        E8:  LWC1		F0, 148 (S0)
        EC:  MTC1		V0, F2
        F0:  NOP
        F4:  CVT.S.W		F2, F2
        F8:  LBU			V0, 191 (S0)
        FC:  ADD.S		F0, F0, F2
       100:  MTC1		V0, F2
       104:  NOP
       108:  CVT.S.W		F2, F2
       10C:  BEQ			R0, R0, .o180
       110:  SUB.S		F0, F0, F2
             .o114
       114:  ANDI		V0, V1, 8000
       118:  BNE			V0, R0, .o150
       11C:  NOP
       120:  LH			V0, 152 (S0)
       124:  LWC1		F0, 148 (S0)
       128:  MTC1		V0, F2
       12C:  NOP
       130:  CVT.S.W		F2, F2
       134:  LBU			V0, 191 (S0)
       138:  ADD.S		F0, F0, F2
       13C:  MTC1		V0, F2
       140:  NOP
       144:  CVT.S.W		F2, F2
       148:  BEQ			R0, R0, .o180
       14C:  ADD.S		F0, F2, F0
             .o150
       150:  LH			V0, 152 (S0)
       154:  LWC1		F2, 148 (S0)
       158:  MTC1		V0, F0
       15C:  NOP
       160:  CVT.S.W		F0, F0
       164:  LBU			V0, 191 (S0)
       168:  ADD.S		F2, F2, F0
       16C:  SLL			V0, V0, 1
       170:  MTC1		V0, F0
       174:  NOP
       178:  CVT.S.W		F0, F0
       17C:  ADD.S		F0, F2, F0
             .o180
       180:  LH			V0, 154 (S0)
       184:  MFC1		A2, F0
       188:  LWC1		F0, 14C (S0)
       18C:  MTC1		V0, F2
       190:  NOP
       194:  CVT.S.W		F2, F2
       198:  ADD.S		F0, F0, F2
       19C:  LIF			F2, 5.0
       1A4:  ADDIU		A0, R0, 3		%damage icon (5 -> 3)
       1A8:  ADD.S		F0, F0, F2
       1AC:  MFC1		A1, F4
       1B0:  LIF			F4, 1.0
       1B8:  MFC1		A3, F0
       1BC:  ADDIU		V0, R0, 3C
       1C0:  SW			V0, 14 (SP)
       1C4:  JAL			800718D0
       1C8:  SWC1		F4, 10 (SP)
       1CC:  JAL			~Func:sfx_play_sound
       1D0:  ADDIU		A0, R0, 2106
       1D4:  ADDIU		V0, R0, 2
       1D8:  ADDIU		V1, R0, 1
       1DC:  SAW			V1, $End[0]
             .o1E4
       1E4:  LW			RA, 1C (SP)
       1E8:  LW			S0, 18 (SP)
       1EC:  JR			RA
       1F0:  ADDIU		SP, SP, 20
     }
     
     
     %more blue than Frigid Stomp
     
     %uses 3 vars for positions
     #new:Function $Function_ChillWaveEffect
     {
         0:  ADDIU     SP, SP, FFD8
         4:  SW        S1, 1C (SP)
         8:  COPY      S1, A0
         C:  SW        RA, 24 (SP)
        10:  SW        S2, 20 (SP)
        14:  SW        S0, 18 (SP)
        18:  LW        S0, C (S1)
        1C:  LW        A1, 0 (S0)
        20:  JAL       ~Func:get_variable
        24:  ADDIU     S0, S0, 4
        28:  LW        A1, 0 (S0)
        2C:  ADDIU     S0, S0, 4
        30:  COPY      A0, S1
        34:  JAL       ~Func:get_variable
        38:  COPY      S2, V0
        3C:  COPY      A0, S1
        40:  LW        A1, 0 (S0)
        44:  JAL       ~Func:get_variable
        48:  COPY      S0, V0
        4C:  LW        V1, AC (S1)
        50:  BNE       V1, R0, .o90
        54:  CLEAR     A0
        58:  MTC1      S2, F0
        5C:  NOP
        60:  CVT.S.W   F0, F0
        64:  MFC1      A1, F0
        68:  MTC1      S0, F0
        6C:  NOP
        70:  CVT.S.W   F0, F0
        74:  MFC1      A2, F0
        78:  MTC1      V0, F0
        7C:  NOP
        80:  CVT.S.W   F0, F0
        84:  MFC1      A3, F0
        88:  BEQ       R0, R0, .oC0
        8C:  LI        A0, 1
             .o90
        90:  MTC1      S2, F0
        94:  NOP
        98:  CVT.S.W   F0, F0
        9C:  MFC1      A1, F0
        A0:  MTC1      S0, F0
        A4:  NOP
        A8:  CVT.S.W   F0, F0
        AC:  MFC1      A2, F0
        B0:  MTC1      V0, F0
        B4:  NOP
        B8:  CVT.S.W   F0, F0
        BC:  MFC1      A3, F0
             .oC0
        C0:  JAL       80070B50
        C4:  SW        R0, 10 (SP)
               LW			V1, C (V0)
               ADDIU		A1, R0, 00			%R
               SB			A1, 50 (V1)
               LW			V1, C (V0)
               ADDIU		A1, R0, 60			%G
               SB			A1, 51 (V1)
               LW			V1, C (V0)
               ADDIU		A1, R0, FF			%B
               SB			A1, 52 (V1)
               LW			A0, C (V0)
               ADDIU		V1, R0, D0			%R 2
               SB			V1, 53 (A0)
               LW			A0, C (V0)
               ADDIU		V1, R0, DC			%G 2
               SB			V1, 54 (A0)
               LW			V1, C (V0)
               ADDIU		A1, R0, FF			%B 2
               SB			A1, 55 (V1)		
        C8:  LW        RA, 24 (SP)
        CC:  LW        S2, 20 (SP)
        D0:  LW        S1, 1C (SP)
        D4:  LW        S0, 18 (SP)
        D8:  LI        V0, 2
        DC:  JR        RA
        E0:  ADDIU     SP, SP, 28
     }

%Thunder Effect from Dark Star
     #new:Function $Function_ThunderFX
     {
          ADDIU     SP, SP, FFC0
          SW        RA, 24 (SP)
          SW        S2, 20 (SP)
          SW        S1, 1C (SP)
          SW        S0, 18 (SP)
          SDC1      F24, 38 (SP)
          SDC1      F22, 30 (SP)
          SDC1      F20, 28 (SP)
          JAL       ~Func:get_actor
          LW        A0, 148 (A0)
          JAL       ~Func:get_actor
          LH        A0, 428 (V0)
          DADDU     S0, V0, R0
          BEQ       S0, R0, .o128
          ADDIU     V0, R0, 2
          JAL       80149CB4
          ADDIU     A0, R0, 366
          LIO       V1, CCCCCCCD
          LBU       A0, 191 (S0)
          LBU       V0, 190 (S0)
          MULTU     A0, V1
          LWC1      F0, 188 (S0)
          SRL       V1, V0, 2
          ADDU      V0, V0, V1
          MTC1      V0, F6
          NOP
          CVT.S.W   F6, F6
          MUL.S     F6, F6, F0
          NOP
          ADDIU     V0, A0, FFFE
          MTC1      V0, F4
          NOP
          CVT.S.W   F4, F4
          MUL.S     F4, F4, F0
          NOP
          LWC1      F2, 148 (S0)
          LWC1      F22, 144 (S0)
          LWC1      F24, 14C (S0)
          MFHI      T0
          SRL       V0, T0, 3
          ANDI      V0, V0, FF
          MTC1      V0, F0
          NOP
          CVT.S.W   F0, F0
          TRUNC.W.S F8, F6
          MFC1      S1, F8
          TRUNC.W.S F8, F4
          MFC1      S2, F8
          LW        V0, 0 (S0)
          ANDI      V0, V0, 8000
          BEQ       V0, R0, .oE8
          ADD.S     F20, F2, F0
          SRL       V0, A0, 1
          MTC1      V0, F0
          NOP
          CVT.S.W   F0, F0
          SUB.S     F20, F20, F0
          .oE8
          JAL       800299FC
          ADDIU     A0, R0, 2
          ADDIU     A0, V0, 3
          MFC1      A1, F22
          MFC1      A2, F20
          MFC1      A3, F24
          MTC1      S1, F0
          NOP
          CVT.S.W   F0, F0
          SWC1      F0, 10 (SP)
          MTC1      S2, F0
          NOP
          CVT.S.W   F0, F0
          JAL       80070CD0
          SWC1      F0, 14 (SP)
          ADDIU     V0, R0, 2
          .o128
          LW        RA, 24 (SP)
          LW        S2, 20 (SP)
          LW        S1, 1C (SP)
          LW        S0, 18 (SP)
          LDC1      F24, 38 (SP)
          LDC1      F22, 30 (SP)
          LDC1      F20, 28 (SP)
          JR        RA
          ADDIU     SP, SP, 40
     }

%%Functions from Dark Star that turn Mega Shock into an offensive ability...
%Trying to attack with Watt in move slots tied to not attacking causes attacks to fail.
%Copying over function from Dark Star that ignores the status immunity check with hopes that will fix this.

%Apply status thing
@ $Function_80238784
{
    0:  ADDIU     SP, SP, FFE0
    4:  SW        S0, 10 (SP)
    8:  LAW       S0, 800DC14C
   10:  SW        S2, 18 (SP)
   14:  COPY      S2, A0
   18:  SW        RA, 1C (SP)
   1C:  SW        S1, 14 (SP)
   20:  JAL       ~Func:get_actor
   24:  LH        A0, 428 (S0)
   28:  LB        A1, 426 (S0)
   2C:  COPY      S0, V0
   30:  JAL       ~Func:get_actor_part
   34:  COPY      A0, S0
   38:  LI        A1, 5
   3C:  LW        A0, 20C (S0)
   40:  JAL       ~Func:lookup_status_chance
   44:  COPY      S1, V0
		LB        A0, 209 (S0)
		%
		ORI		V1, R0, 50`
		MULT	V1, A0
		NOP		
		NOP		
		MFLO	V1 
		SUB		V0, V0, V1
		%
		%Set to 0 or 100 (Fix problem where electro shock only works sometimes)
		BLE		  V0, R0, .skip
		NOP
		ORI		  V0, R0, 100`
		.skip
		%
   48:  COPY      A0, V0
   4C:  LB        V1, 218 (S0)
   50:  LI        V0, E
   54:  BEQL      V1, V0, .o5C
   58:  CLEAR     A0
        .o5C
   5C:  LW        V0, 7C (S1)
   60:  ANDI      V0, V0, 20
   64:  BNEL      V0, R0, .o6C
   68:  CLEAR     A0
        .o6C
   6C:  SW        A0, 84 (S2)
   70:  LW        RA, 1C (SP)
   74:  LW        S2, 18 (SP)
   78:  LW        S1, 14 (SP)
   7C:  LW        S0, 10 (SP)
   80:  LI        V0, 2
   84:  JR        RA
   88:  ADDIU     SP, SP, 20
}

%problem: this completely fails when there is some enemy immune to statuses

%Rewrite this to have a constant chance
@ $Function_80238E5C
{
    0:  ADDIU     SP, SP, FFC8
    4:  SW        S6, 28 (SP)
    8:  LAW       S6, 800DC14C				%partner pointer
   10:  SW        S8, 30 (SP)
   14:  COPY      S8, A0
   18:  SW        S4, 20 (SP)
   1C:  CLEAR     S4
   20:  SW        S5, 24 (SP)
   24:  COPY      S5, S4
   28:  SW        RA, 34 (SP)
   2C:  SW        S7, 2C (SP)
   30:  SW        S3, 1C (SP)
   34:  SW        S2, 18 (SP)
   38:  SW        S1, 14 (SP)
   3C:  SW        S0, 10 (SP)
   40:  LB        V0, 40C (S6)				%target list length
   %44:  BLEZ      V0, .oC0					%so if no possible targets, skip ahead and set difficulty to 0 (but how would you get through the menu if there are no possible targets?)
   %48:  COPY      S3, S4
   4C:  LI        S7, E
   50:  COPY      S2, S6
        .o54
   54:  JAL       ~Func:get_actor
   58:  LH        A0, 22C (S2)
   5C:  COPY      S0, V0
   60:  LH        A1, 22E (S2)
   64:  JAL       ~Func:get_actor_part
   68:  COPY      A0, S0						
   6C:  LI        A1, 5							%Status 5
   70:  LW        A0, 20C (S0)					%Status table pointer
   %74:  JAL       ~Func:lookup_status_chance
   78:  COPY      S1, V0						%actor part address
		%Change the chance to a static variable
		%ActorVar F is 88 + F*4 ( 3C ) = (C4)
		%LW        V1, C4 (S2)
		LI		  V1, 8
		ADDIU	  V0, R0, 92`					%Base difficulty = 85
		%SLL	  V1, V1, 3						%Multiply by 8
		SUB		  V0, V0, V1
		%Removed extra diffcuilty variables
   F0:  SW        V0, 84 (S8)
        .oF4
   F4:  LW        RA, 34 (SP)
   F8:  LW        S8, 30 (SP)
   FC:  LW        S7, 2C (SP)
  100:  LW        S6, 28 (SP)
  104:  LW        S5, 24 (SP)
  108:  LW        S4, 20 (SP)
  10C:  LW        S3, 1C (SP)
  110:  LW        S2, 18 (SP)
  114:  LW        S1, 14 (SP)
  118:  LW        S0, 10 (SP)
  11C:  LI        V0, 2
  120:  JR        RA
  124:  ADDIU     SP, SP, 38
}

%Scripts for mutibounce like functions....
%See Exported files



%Do actor variables actually work here?
%Note that some of the functions deal with actor variables through directly referencing the memory
@ $Script_Init_802390D8
{
    0:  Call  BindTakeTurn  ( .Actor:Self $Script_TakeTurn_80239578 )
   14:  Call  BindIdle      ( .Actor:Self $Script_Idle_80239138 )
   28:  Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_80239160 )
   3C:  Call  BindNextTurn  ( .Actor:Self $Script_NextTurn_802397BC )
		Call  SetActorVar	( .Actor:Self 0000000F 00000000 )
   50:  Return
   58:  End
}

/%Update Sript for Eelctro Dash into Glaze Dash. 
By default, it does Cosmic Damage and recovers 1 FP
     -As deteriming damage, Call "$ScrApi_GetElementVariable" to retrieve the value as a variable
     -Run a switch statement of the variable to deterimine the element, 
          -calling a different attack based on the result
     -Element can be a value from 0-2
	0 Cosmic/Electric (Rush's rank determines which)
	1 Fire
	2 Ice
     -Each element has different properties:
          -Cosmic does one less damage than, but pierces defense.
          -Fire does normal dash damage, but also gets a second attack of one damage that is contactless.
          -Ice "chills" foe in a similar way to Sushie's Belly Flop in Dark Star, drops attack by 1 for the turn
          -Electric is now an upgrade of Cosmic keeps the same defense pierce (even if the foe normally resists electric I think)
               - Same effect just now does extra damage if foe is weak to electric
%/

% These strings affect the dialouge that pops up after an element change (I believe)
#new:String $stringTest {
     No Change[End]
     }
#new:String $comsicCalled{
	Star[End]
     }
#new:String $fireCalled {
	Fire[End]
     }
#new:String $waterCalled {
	Water[End]
     }
#new:String $iceCalled {Ice[End]}
#new:String $electricCalled {Electric[End]}

%Swap Gumball Gush and Element Swap so that Element swap is Rush's second attack and Gumball Gush is 3rd
 @   $Script_802397CC
     {
         0:  Call  802694A4  ( 00000001 )
        10:  Call  SetBattleFlagBits ( 00004000 .False )
        24:  Call  GetMenuSelection  ( *Var0 *Var1 *Var2 )
        3C:  Switch  *Var0
        48:  	Case  ==  00000008
        54:  		Call  LoadStarPowerScript ( )
        60:  		ExecWait  *Var0
        6C:  		Return
        74:  EndSwitch
        7C:  Call  GetMenuSelection  ( *Var0 *Var1 *Var2 )
        94:  Switch  *Var2
        A0:  	Case  ==  000000A1
        AC:  		ExecWait  $Script_80239BC8
        B8:  	Case  ==  000000A2
        C4:  		ExecWait  $Script_80239BC8
        D0:  	Case  ==  000000A3
        DC:  		ExecWait  $Script_80239BC8
        E8:  	Case  ==  000000A4
        F4:  		ExecWait  $Script_8023B8EC %Flavor Swap
       100:  	Case  ==  000000A5
                    ExecWait  $Script_8023A684 %Gumball Gush
       118:  	Case  ==  000000A6
       124:  		ExecWait  $Script_8023B970
       130:  EndSwitch
       138:  Return
       140:  End
     }

/%
Update Electrodash into Glaze Dash....
Action command and range of the former Electrodash but...
     -the type of damage it does depends on the current elemental value (cosmic/electric, fire, ice)
     -each element also has it's own secondary effects making each element have it's own strength and weaknesses
%/
@ $Script_80239BC8
{
    0:  Call  LoadActionCommand ( .ActionCommand:BodySlam )
   10:  Call  802A9000 ( )
   1C:  Call  SetupMashMeter    ( 00000001 00000064 00000000 00000000 00000000 00000000 )
   40:  Wait  10`
   4C:  Call  UseBattleCamPreset    ( 00000030 )
   5C:  Call  InitTargetIterator ( )
   68:  Call  SetGoalToTarget   ( .Actor:Partner )
   78:  Call  AddGoalPos        ( .Actor:Partner  -20`  0`  0` )
   94:  Set   *Flag[02]  .False
   A4:  Loop  0000003C
   B0:  	Call  CheckButtonDown   ( ~Flags:Buttons:A *Var0 )
   C4:  	If  *Var0  !=  .False
   D4:  		Set   *Flag[02]  .True
   E4:  		BreakLoop
   EC:  	EndIf
   F4:  	Wait  1`
  100:  EndLoop
  108:  Call  MoveBattleCamOver (  75` )
  118:  If  *Flag[02]  ==  .True
  128:  	Call  802A91B8  ( 00000000 00000066 00000003 00000001 )
  144:  	Set   *Flag[00]  .False
  154:  	Exec  $Script_80239A10 *VarA
  164:  	Loop  00000014
  170:  		Call  CheckButtonDown   ( ~Flags:Buttons:A *Var0 )
  184:  		If  *Var0  ==  .False
  194:  			Set   *Flag[00]  .True
  1A4:  			BreakLoop
  1AC:  		EndIf
  1B4:  		Wait  1`
  1C0:  	EndLoop
  1C8:  	If  *Flag[00]  ==  .True
  1D8:  		Kill  *VarA
  1E4:  		Goto  A
  1F0:  	EndIf
  1F8:  	Call  PartnerTestEnemy  ( *Var0 ~Flags:DamageType:0 00000004 00000000  1` 00000010 )
  21C:  	Set   *Flag[00]  .False
  22C:  	Exec  $Script_80239A54 *VarA
  23C:  	Loop  00000037
  248:  		Call  CheckButtonDown   ( ~Flags:Buttons:A *Var0 )
  25C:  		If  *Var0  ==  .False
  26C:  			Set   *Flag[00]  .True
  27C:  			BreakLoop
  284:  		EndIf
  28C:  		Wait  1`
  298:  	EndLoop
  2A0:  	If  *Flag[00]  ==  .True
  2B0:  		Kill  *VarA
  2BC:  		Goto  A
  2C8:  	EndIf
  2D0:  	If  *Flag[00]  ==  .False
  2E0:  		Exec  $Script_80239B98 *VarA
  2F0:  		Loop  0000001E
  2FC:  			Call  CheckButtonDown   ( ~Flags:Buttons:A *Var0 )
  310:  			If  *Var0  ==  .False
  320:  				Set   *Flag[00]  .True
  330:  				BreakLoop
  338:  			EndIf
  340:  			Wait  1`
  34C:  		EndLoop
  354:  		If  *Flag[00]  ==  .True
  364:  			Kill  *VarA
  370:  			Goto  A
  37C:  		EndIf
  384:  	EndIf
  38C:  Else
  394:  	Set   *Flag[00]  .False
  3A4:  	Exec  $Script_80239A10 *VarA
  3B4:  	Loop  00000014
  3C0:  		Call  CheckButtonDown   ( ~Flags:Buttons:A *Var0 )
  3D4:  		If  *Var0  !=  .False
  3E4:  			If  *Flag[02]  ==  .False
  3F4:  				Call  802A91B8  ( 00000000 0000005C 00000003 00000001 )
  410:  				Set   *Flag[02]  .True
  420:  			EndIf
  428:  		EndIf
  430:  		If  *Flag[02]  ==  .True
  440:  			If  *Var0  ==  .False
  450:  				Set   *Flag[00]  .True
  460:  				BreakLoop
  468:  			EndIf
  470:  		EndIf
  478:  		Wait  1`
  484:  	EndLoop
  48C:  	If  *Flag[00]  ==  .True
  49C:  		Kill  *VarA
  4A8:  		Goto  A
  4B4:  	EndIf
  4BC:  	Call  PartnerTestEnemy  ( *Var0 ~Flags:DamageType:0 00000004 00000000  1` 00000010 )
  4E0:  	Set   *Flag[00]  .False
  4F0:  	Exec  $Script_80239A54 *VarA
  500:  	Loop  00000037
  50C:  		Call  CheckButtonDown   ( ~Flags:Buttons:A *Var0 )
  520:  		If  *Var0  !=  .False
  530:  			If  *Flag[02]  ==  .False
  540:  				Call  802A91B8  ( 00000000 0000005C 00000003 00000001 )
  55C:  				Set   *Flag[02]  .True
  56C:  			EndIf
  574:  		EndIf
  57C:  		If  *Flag[02]  ==  .True
  58C:  			If  *Var0  ==  .False
  59C:  				Set   *Flag[00]  .True
  5AC:  				BreakLoop
  5B4:  			EndIf
  5BC:  		EndIf
  5C4:  		Wait  1`
  5D0:  	EndLoop
  5D8:  	If  *Flag[00]  ==  .True
  5E8:  		Kill  *VarA
  5F4:  		Goto  A
  600:  	EndIf
  608:  	If  *Flag[00]  ==  .False
  618:  		Exec  $Script_80239B98 *VarA
  628:  		Loop  0000001E
  634:  			Call  CheckButtonDown   ( ~Flags:Buttons:A *Var0 )
  648:  			If  *Var0  ==  .False
  658:  				Set   *Flag[00]  .True
  668:  				BreakLoop
  670:  			EndIf
  678:  			Wait  1`
  684:  		EndLoop
  68C:  		If  *Flag[00]  ==  .True
  69C:  			Kill  *VarA
  6A8:  			Goto  A
  6B4:  		EndIf
  6BC:  	EndIf
  6C4:  EndIf
  6CC:  Label  A
  6D8:  Wait  2`
  6E4:  Call  CloseActionCommandInfo ( )
  6F0:  Call  $Function_80238570 ( )
  6FC:  Call  StopLoopingSoundAtActor   ( .Actor:Partner 00000000 )
  710:  Call  80269EAC      ( 00000013 )
  720:  Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000E0005 )
  738:  Call  8026EA7C      ( FFFFFF81 00000001 0000000A )
  750:  Call  SetGoalToTarget   ( .Actor:Partner )
  760:  Call  AddGoalPos    ( .Actor:Partner  -5`  0`  0` )
  77C:  Call  FlyToGoal     ( .Actor:Partner  5`  0` .Easing:Linear )
  798:  Thread
  7A0:  	Wait  2`
  7AC:  	Call  $Function_80238478    ( 00000000 )
  7BC:  EndThread
  7C4:  Call  PartnerTestEnemy  ( *Var0 ~Flags:DamageType:0 00000004 00000000  1` 00000010 )
  7E8:  If  *Var0  ==  .HitResult:Miss % 6
  7F8:  	Thread
  800:  		Wait  5`
  80C:  		Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000E0001 )
  824:  	EndThread
  82C:  	Call  SetGoalToTarget   ( .Actor:Partner )
  83C:  	Call  AddGoalPos    ( .Actor:Partner  40`  10`  0` )
  858:  	Call  FlyToGoal     ( .Actor:Partner  10`  -20` .Easing:QuadraticOut )
  874:  	Wait  20`
  880:  	Call  SetGoalToHome ( .Actor:Partner )
  890:  	Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000E0003 )
  8A8:  	Call  FlyToGoal     ( .Actor:Partner  30`  0` .Easing:CosInOut )
  8C4:  	Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000E0001 )
  8DC:  	Return
  8E4:  EndIf
  8EC:  Call  $Function_802383E4 ( )
  8F8:  Call  $Function_802383C0 ( )
  904:  Call  GetMenuSelection  ( *Var0 *Var1 *Var2 )
        %Set power depending on break and make Rush's attack electric (Var D = 1) if Ultra
  91C:  Switch  *Var2
  928:  	Case  ==  000000A1
  934:  		Set   *VarE  00000001
  944:  		Set   *VarF  00000003
  954:  	Case  ==  000000A2
  960:  		Set   *VarE  00000001
  970:  		Set   *VarF  00000003
  980:  	Case  ==  000000A3
  98C:  		Set   *VarE  00000001
  99C:  		Set   *VarF  00000004
  9AC:  EndSwitch
  9B4:  Call  GetActionCommandResult    ( *Var0 )
  9C4:  Switch  *Var0    %Start swtich for deterimining Action Command
  9D0:  	Case  >  00000000   %Successful Action Command....
               %Deterimine the Element and choose the apporitate attack....
               Call $ScrApi_GetElementVariable ( *VarB ) %returns value of $elementVariable to *Var0
               %Run the switch to deterimine element
               Switch  *VarB 
                    Case  ==  00000001  %Call Fire Attack (Divides normal attack power between two attacks one for 1 damage and a second for the rest)
                         %Fail safe in case the attack for whatever reason does less than 2 damage (before defense calc)
                         If *VarF < 2 %If attack is 1 or less, just do a single attack.
                              Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:Fire 0000008D 00000000 *VarF 00000070 )
                         %As long as Rush's attack is at least 2, continue like normal...
                         Else
                              %Decrease Rush's attack by 1 to put into the second attack....
                              SubF *VarF 1
                              %Call the two attacks
                              Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:Fire 0000008D 00000000 *VarF 00000070 )
                              Wait  7`
                              Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:NoContact|Fire 0000008D 00000000 00000001 00000070 )
                         EndIf
                    Case  ==  00000002  %Call Ice Attack (Does damage and drops attack for that turn)
          		     Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:Ice 0000008D 00000000 *VarF 00000070 )
                         %"Chill" the target if they aren't already chill
                              Call     $Function_CheckChill ( ) %0 = immune to chill out
                              If  *Var[0]  ==  00000001 
                                   Call  GetActorPos       ( .Actor:Partner *Var0 *Var1 *Var2 )
                                   Call  $Function_ChillWaveEffect    ( *Var0 *Var1 *Var2 )
                                   Call     $Function_ChillTarget ( )
                                   Wait  10`
                              EndIf  
                    Default   %If no other case is triggered, doing the default elements
                         %Do defense ignoring damage (Make electric rather than cosmic if Ultra Rank)
                         Call  GetActorLevel     ( .Actor:Partner *VarD )
                         If *VarD > 00000001
                              Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:IgnoreDefense|Electric 0000008D 00000000 *VarF 00000070 )
                         Else
                              Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:IgnoreDefense|Cosmic 0000008D 00000000 *VarF 00000070 )
                         EndIf
               EndSwitch
          Default   %If Action command fails call this function
  A08:  		Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:IgnoreDefense|Cosmic 0000008D 00000000 *VarE 00000030 )
  A2C:  EndSwitch   %End Action Command switch

  A34:  Call  80280818 ( )
  A40:  Switch  *Var0
  A4C:  	CaseOR  ==  00000001 % 1
  A58:  	CaseOR  ==  00000003 % 3
  A64:  		ExecWait  $Script_80239914
  A70:  	EndCaseGroup
  A78:  	CaseOR  ==  .HitResult:Hit % 0
  A84:  	CaseOR  ==  .HitResult:QuakeImmune % 2
  A90:  		ExecWait  $Script_80239990
  A9C:  	EndCaseGroup
  AA4:  EndSwitch
          %Added script to assure Rush flys back to Mario after Ice Glaze Dash 
          %Wait  2`
  880:  	Call  SetGoalToHome ( .Actor:Partner )
  890:  	Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000E0003 )
  8A8:  	Call  FlyToGoal     ( .Actor:Partner  30`  0` .Easing:CosInOut )
  8C4:  	Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000E0001 )
  8DC:  	Return
  AAC:  Return
  AB4:  End
}

%Turning PowerShock into an elemental version of Spiny Surge
%PowerShock -> Gumball Gush
@ $Script_8023A684
{
     0:  Call  LoadActionCommand ( .ActionCommand:SpinySurge )
   10:  Call  802A9000 ( )
   1C:  Call  GetActorLevel     ( .Actor:Partner *Var0 )
        %Set up Variable D to determine if her default power to Electric if she is Electric
        Set *VarD *Var0
   30:  Switch  *Var0
   3C:  	Case  ==  00000000
   48:  		Call  SetupMashMeter    ( 00000002 00000063 00000064 00000000 00000000 00000000 )
   6C:  	Case  ==  00000001
   78:  		Call  SetupMashMeter    ( 00000003 00000046 00000063 00000064 00000000 00000000 )
   9C:  	Case  ==  00000002
   A8:  		Call  SetupMashMeter    ( 00000004 00000028 00000046 00000063 00000064 00000000 )

   CC:  EndSwitch
   D4:  Call  80269344      ( 0000000A )
   E4:  Call  UseBattleCamPreset    ( 00000013 )
   F4:  Call  SetBattleCamTarget    (  45`  60`  0` )
  10C:  Call  SetBattleCamOffsetZ   (  0` )
  11C:  Call  SetBattleCamZoom      (  400` )
  12C:  Call  MoveBattleCamOver     (  30` )
  13C:  Call  InitTargetIterator ( )
  148:  Call  SetGoalToHome ( .Actor:Partner )
  158:  Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000E0003 )
  170:  Call  AddGoalPos    ( .Actor:Partner  60`  20`  0` )
  18C:  Call  FlyToGoal     ( .Actor:Partner  30`  0` .Easing:CosInOut )
  1A8:  Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000E0006 )
  1C0:  Wait  10`
  1CC:  Call  GetActorLevel ( .Actor:Partner *Var0 )
  1E0:  Switch  *Var0
  1EC:  	Case  ==  00000000
  1F8:  		Set   *VarA  0000003C
  208:  	Case  ==  00000001
  214:  		Set   *VarA  0000003C
  224:  	Case  ==  00000002
  230:  		Set   *VarA  0000003C
  240:  EndSwitch
  248:  Set   *VarB  *VarA
  258:  Add   *VarB  FFFFFFFD
  268:  Call  802A916C  ( 00000000 *VarB 00000003 )
  280:  Call  SetBattleFlagBits ( 00004000 .False )
  294:  Call  InitTargetIterator ( )
  2A0:  Call  SetActorVar       ( .Actor:Partner 00000000 00000000 )
  2B8:  Set   *Var9  00000000
  2C8:  Set   *Flag[02]  .False
  2D8:  Set   *Flag[03]  .False
  2E8:  Loop  *VarA
  2F4:  	Call  GetActionResult   ( *Var0 )
  304:  	If  *Var9  ==  00000002
  314:  		Set   *Var0  00000003
  324:  	EndIf
          % Removed parts of spiny surge tied to the spines
  32C:  	Switch  *Var0
  338:  		Case  ==  FFFFFFFF
  344:  			Set   *Var9  00000000
                    /%
  354:  			Call  SetPartFlagBits   ( .Actor:Partner 00000002 00000001 .True )
  370:  			Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000E0005 )
                    %/
  388:  		Case  ==  00000001
  394:  			If  *Var9  ==  00000001
  3A4:  				BreakCase
  3AC:  			EndIf
  3B4:  			%Call  SetPartFlagBits   ( .Actor:Partner 00000002 00000001 .False )
  3D0:  			Call  GetActorPos   ( .Actor:Partner *Var0 *Var1 *Var2 )
  3EC:  			Add   *Var0  00000003
  3FC:  			Add   *Var1  00000022
  40C:  			Add   *Var2  00000005
                    /%
  41C:  			Call  SetPartPos    ( .Actor:Partner 00000002 *Var0 *Var1 *Var2 )
  43C:  			Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000E0006 )
                    %/
  454:  			Set   *Var9  00000001
  464:  		Case  ==  00000002
  470:  			If  *Var9  ==  00000000
  480:  				BreakCase
  488:  			EndIf
  490:  			If  *Flag[02]  ==  .False
  4A0:  				Call  PlaySoundAtActor  ( .Actor:Partner 0000201B )
  4B4:  				Set   *Flag[02]  .True
  4C4:  			Else
  4CC:  				Call  PlaySoundAtActor  ( .Actor:Partner 0000201C )
  4E0:  				Set   *Flag[02]  .False
  4F0:  			EndIf
  4F8:  			Call  $Function_80238A6C ( )
                    
  504:  			%Call  SetAnimation      ( .Actor:Partner FFFFFFFF 000E0002 )
  51C:  			%Call  SetPartFlagBits   ( .Actor:Partner 00000002 00000001 .True )
  538:  			ChildThread
  540:  				Call  GetActorVar   ( .Actor:Partner 00000000 *Var0 )
  558:  				Add   *Var0  00000001
  568:  				Call  SetActorVar   ( .Actor:Partner 00000000 *Var0 )
  580:  				Wait  15`
  58C:  				Call  GetActorVar   ( .Actor:Partner 00000000 *Var0 )
  5A4:  				Sub   *Var0  00000001
  5B4:  				Call  SetActorVar   ( .Actor:Partner 00000000 *Var0 )
  5CC:  			EndChildThread
  5D4:  			Set   *Flag[03]  .True
  5E4:  			Set   *Var9  00000000
  5F4:  	EndSwitch
  5FC:  	Wait  1`
  608:  EndLoop
  610:  %Call  SetPartFlagBits   ( .Actor:Partner 00000002 00000001 .True )
  62C:  Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000E0007 )
  644:  Loop
  650:  	Call  GetActorVar   ( .Actor:Partner 00000000 *Var0 )
  668:  	If  *Var0  ==  00000000
  678:  		BreakLoop
  680:  	EndIf
  688:  	Wait  1`
  694:  EndLoop
  69C:  Wait  10`
  6A8:  If  *Flag[03]  ==  .False
  6B8:  	Set   *Var0  00000000
  6C8:  	Set   *VarF  00000000
  6D8:  	Wait  15`
  6E4:  	Goto  D
  6F0:  EndIf
  6F8:  Call  InitTargetIterator ( )
  704:  Label  0
  710:  Call  SetGoalToTarget   ( .Actor:Partner )
  720:  Call  PartnerTestEnemy  ( *Var0 ~Flags:DamageType:0 00000014 00000000  2` 00000010 )
  744:  If  *Var0  ==  .HitResult:Miss % 6
  754:  	Goto  C
  760:  EndIf
  62C:  %Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000E0003 ) %added animation
  768:  Call  GetActionCommandResult    ( *VarA )
  778:  Call  $Function_80238B50 ( )
  784:  Switch  *Var0
          %If the move hits, determine the element of the attack based on Rush's current element...
  790:  	Case  >  .HitResult:Hit % 0
               %Deterimine the Element and choose the apporitate attack....
               Call $ScrApi_GetElementVariable ( *VarB ) %returns value of $elementVariable to *Var0
               %Run the switch to deterimine element (0 for cosmic damage, 1 for fire damage, 2 for ice damage)
               Switch  *VarB 
                    Case == 00000001
                         Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:Fire|NoContact|NoOtherDamagePopups 00000000 00000000 *VarF 00000070 )
                    Case == 00000002
                         Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:Ice|NoContact|NoOtherDamagePopups 00000000 00000000 *VarF 00000070 )
                    Default
                         %If Ultra rank do Electric damage, otherwise do Cosmic damage
                         If *VarD > 00000001
                              Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:Electric|Cosmic|NoContact|NoOtherDamagePopups 00000000 00000000 *VarF 00000030 )
                         Else
                              Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:Cosmic|NoContact|NoOtherDamagePopups 00000000 00000000 *VarF 00000030 )
                         EndIf
               EndSwitch
  7C0:  	Default
               %Deterimine the Element and choose the apporitate attack....
               Call $ScrApi_GetElementVariable ( *VarB ) %returns value of $elementVariable to *Var0
               %Run the switch to deterimine element (0 for cosmic damage, 1 for fire damage, 2 for ice damage)
               Switch  *VarB 
                    Case == 00000001
                         Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:Fire|NoContact|NoOtherDamagePopups 00000000 00000000 *VarF 00000030 )
                    Case == 00000002
                         Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:Ice|NoContact|NoOtherDamagePopups 00000000 00000000 *VarF 00000030 )
                    Default
                         %If Ultra rank do Electric damage, otherwise do Cosmic damage
                         If *VarD > 00000001
                              Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:Electric|NoContact|NoOtherDamagePopups 00000000 00000000 *VarF 00000030 )
                         Else
                              Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:Cosmic|NoContact|NoOtherDamagePopups 00000000 00000000 *VarF 00000030 )
                         EndIf
               EndSwitch
  7EC:  EndSwitch
  7F4:  Switch  *Var0
  800:  	Case  >  .HitResult:Hit % 0
  80C:  		Call  UseBattleCamPreset    ( 00000004 )
  81C:  	Default
  824:  		Call  UseBattleCamPreset    ( 00000033 )
  834:  EndSwitch
  83C:  Wait  6`
  848:  Label  C
  854:  Call  ChooseNextTarget  ( .Iter:Next *Var1 )
  868:  If  *Var1  !=  FFFFFFFF
  878:  	Goto  0
  884:  EndIf
  88C:  Wait  30`
  898:  Label  D
  8A4:  Switch  *Var0
  8B0:  	CaseOR  ==  00000001 % 1
  8BC:  	CaseOR  ==  00000003 % 3
  8C8:  		ExecWait  $Script_8023AA70
  8D4:  	EndCaseGroup
  8DC:  	CaseOR  ==  .HitResult:Hit % 0
  8E8:  	CaseOR  ==  .HitResult:QuakeImmune % 2
  8F4:  		ExecWait  $Script_8023AAF8
  900:  	EndCaseGroup
  Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000E0003 )
  908:  EndSwitch
  910:  Return
  918:  End
}

/%Function for Turbo Charge  --> Flavor Swap
Modified the Goombario Tattle patch to function as a way to change the elemental type of Sugar Rush
     -Play Goombario's Charge animation.
     -Check the current value of the Element varible
     -Swap in this order
          Cosmic -> Fire
	     Fire   -> Ice
	     Ice  -> Cosmic
	     (Cosmic gets replaced with Electric at Ultra Rank)
     -Play an elemental effect to indicate the change
     -Call a string to tell the player the new element. %/
@ $Script_8023B8EC
{
     %Should play charging Animation...
     0:  Call  UseBattleCamPreset    ( 00000037 )
          % Orginally wanted to make this a menu that popped up in battle, but that didn't work...
          %Ask for Choice....(Not working yet)
          %Call  ShowChoice    ( 001E0050 ) % Star Fire Ice Electric

     10:  Wait  10`
     1C:  Call  SetAnimation  ( .Actor:Partner FFFFFFFF 00090007 )
     34:  Call  SetActorDispOffset    ( .Actor:Partner 00000000 00000013 00000000 )
     50:  Call  GetActorPos   ( .Actor:Partner *Var0 *Var1 *Var2 )
     6C:  Add   *Var1  0000000F
     7C:  Call  PlaySoundAtActor      ( .Actor:Partner 0000208F )
     D4:  Thread
     DC:  	Wait  15`
     E8:  	Call  GetActorPos       ( .Actor:Partner *Var0 *Var1 *Var2 )
    104:  	Add   *Var1  0000000F
    114:  	Add   *Var2  FFFFFFFB
    124:  	Call  PlaySoundAtActor  ( .Actor:Partner 00002003 )
               Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:SeeingStars)
    17C:  EndThread
    184:  Wait  30`
          Call RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
    190:  Call  SetAnimation  ( .Actor:Partner FFFFFFFF 00090001 )
    1A8:  Call  SetActorDispOffset    ( .Actor:Partner 00000000 00000000 00000000 )
    1C4:  Call  UseBattleCamPreset    ( 00000002 )
    1D4:  Call  MoveBattleCamOver     ( 0000000A )
    %Charging animation: Part 2
    Call  GetActorPos       ( .Actor:Partner *Var0 *Var1 *Var2 )
  21C:  	Add   *Var0  0000000A
  22C:  	Add   *Var1  00000019
  23C:  	Add   *Var2  00000005
  24C:  	Call  PlaySoundAtActor  ( .Actor:Partner 0000208E )
  278:  	Wait  4`
  284:  	Call  SetActorJumpGravity   ( .Actor:Partner *Fixed[1.4] )
  298:  	Call  GetActorPos       ( .Actor:Partner *Var0 *Var1 *Var2 )
  2B4:  	Call  SetJumpAnimations ( .Actor:Partner 00090004 00000001 00090004 00090004 )
  2D4:  	Call  SetGoalPos        ( .Actor:Partner *Var0 *Var1 *Var2 )
  2F0:  	Call  JumpToGoal        ( .Actor:Partner 00000014 .True .True .False )
  310:  	Call  SetAnimation      ( .Actor:Partner FFFFFFFF 00090001 )
     %Swap the current element based on the current existing one Cosmic/Electric->Fire->Ice-
          %(Call the Element Variable, add 1 (swapping to 0 if it goes over 2)
          Call $ScrApi_GetElementVariable ( *VarA )
          AddF *VarA 1`
          If *VarA > 2`
          Set *VarA 0`
          EndIf
     %Set the element variable to it's new value
     Call $ScrApi_SetElementVariable ( *VarA )
    %Check what Element Rush currently is and display it as a message (different decorations and effects will play based on the element as well)
    Call $ScrApi_GetElementVariable ( *VarA ) %returns value of $elementVariable to *VarA
    Switch *VarA
          Case == 00000000
               %Determine if Rush is Star or Electric based on Actor Level
               Call GetActorLevel ( .Actor:Partner *Var2 )
               %If *VarD is 1 (aka 0 or greater) Run the electric action...
               If *Var2 > 00000001
                    %Otherwise, run the Thunder Element action....
                    Call  SetDefenseTable   ( .Actor:Self 00000001 $ShockRush )
                    Call	$Function_ThunderFX ( )
                    Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:GoldenFlames)
                    Wait 10`
                    Call SetMessageString ( $electricCalled 0 )
                    Call  ShowMessageBox    ( 00000024 0000003C )
                    Wait 15`
                    Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
               Else
                    %Otherwise, run the Star Element action....
                    Call  SetDefenseTable   ( .Actor:Self 00000001 $DefenseTable_80238FCC )
                    Call  AddActorDecoration    ( .Actor:Self 00000001 00000001 .Decoration:RadialStarEmitter )
                    Wait 10`
                    Call SetMessageString ( $comsicCalled 0 )
                    Call  ShowMessageBox    ( 00000024 0000003C )
                    Wait 15`
                    Call  RemoveActorDecoration ( .Actor:Self 00000001 00000001 )
                    Wait 10`
               EndIf
          Case == 00000001
               Call  SetDefenseTable   ( .Actor:Self 00000001 $FireRush )
               Call  AddActorDecoration    ( .Actor:Self 00000000 00000000 .Decoration:RedFlames )
               Wait 10`
               Call SetMessageString ( $fireCalled 0 )
               Call  ShowMessageBox    ( 00000024 0000003C )
               Wait 15`
               Call  RemoveActorDecoration ( .Actor:Self 00000000 00000000 )
               Wait 10`
          Case == 00000002
               Call  SetDefenseTable   ( .Actor:Self 00000001 $IceRush )
               Call  PlayEffect    ( ~FX:EmitterVolume:Snowflakes *Var0 *Var1 *Var2 00000014 FFFFFFEC *Fixed[1.0] 00000005 0000001E 00000000 00000000 00000000 00000000 )
               Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Whirlwind)
               Wait 10`
               Call SetMessageString ( $iceCalled 0 )
               Call  ShowMessageBox    ( 00000024 0000003C )
               Wait 15`
               Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
          Default
               Call  ShowMessageAtScreenPos ( $stringTest 160`  40` ) %Display "Element Did not change" message
               Wait 10`
     EndSwitch
          Call $FreeTurn ( )
    430:  Return
    438:  End
 }

%Mega shock -> Triple Zest
% A modified version of Dark Star's Mega bolt.  Instead of doing a massive single thunderbolt, 
% It'll do three different attacks in a row: Fire, ice, then Electric (each doing 3 damage by default for a total of 9 damage)
% The catch is this attack has the potential to be stronger or weaker based on a foe's defense table.
% For example, it could do 12 damage if the foe is weak to all three elements; but also could do only 6 if a foe has 1 defense against each element or overall.
% If a foe has even more defense, weakeness, or flat out immune to an element it has the potential to fluxate even more...
@ $Script_8023B970
{
     % Mashing A & B action command for now, but STRONGLY considering changing this.
    0:  Call  LoadActionCommand ( .ActionCommand:MegaShock )
   10:  Call  802A9000 ( )
   1C:  Call  SetupMashMeter    ( 00000001 00000064 00000000 00000000 00000000 00000000 )
   40:  Call  80269344  ( 00000000 )
   50:  Call  UseBattleCamPreset    ( 00000013 )
   60:  Call  SetBattleCamTarget    ( FFFFFFCA 0000003F 0000000A )
   78:  Call  SetBattleCamOffsetZ   ( 0000000F )
   88:  Call  SetBattleCamZoom  ( 0000013A )
   98:  Call  MoveBattleCamOver ( 0000001E )
   A8:  Call  GetActorPos       ( .Actor:Partner *Var0 *Var1 *Var2 )
   C4:  Add   *Var0  00000028
   D4:  Add   *Var1  0000001E
   E4:  Call  SetAnimation      ( .Actor:Partner FFFFFFFF 000E0003 )
   FC:  Call  SetGoalPos        ( .Actor:Partner *Var0 *Var1 *Var2 )
  118:  Call  FlyToGoal ( .Actor:Partner 00000014 00000000 .Easing:CosInOut )
  134:  Call  SetAnimation      ( .Actor:Partner FFFFFFFF 000E0001 )
  14C:  Call  $Function_80238434 ( )	%background blend
  158:  Set   *Var9  00000000
  168:  Thread
  170:  	Loop  0000004B
  17C:  		Add   *Var9  00000003
  18C:  		Call  $Function_80238478    ( *Var9 )		%background blend (also)
  19C:  		Wait  1`
  1A8:  	EndLoop
  1B0:  EndThread
  1B8:  Call  $Function_80238E5C ( )													%calculate difficulty (Need to fix this)
  1C4:  Call  802A91A0      ( 00000000 00000057 00000003 *Var0 )
  1E0:  Call  GetActorPos   ( .Actor:Partner *Var0 *Var1 *Var2 )
  1FC:  Add   *Var1  0000000F
  20C:  Add   *Var2  00000005
  260:  Call  GetActorPos   ( .Actor:Partner *Var0 *Var1 *Var2 )
  27C:  Add   *Var1  0000000C
        Call  PlayEffect    ( ~FX:RadialFlowIn:ElectricalWaves *Var0 *Var1 *Var2 *Fixed[1.3] 0000005A 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  2D0:  Call  AddBattleCamZoom  ( FFFFFF9C )
  2E0:  Call  MoveBattleCamOver ( 0000005A )
  2F0:  Call  8024ECF8      ( 00000000 00000000 00000001 )
  308:  Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000E0006 )
  320:  Call  8026EA7C      ( FFFFFF81 00000001 0000000A )
  338:  Call  $Function_802383F8 ( )
  344:  Call  GetActionResult   ( *Var1 )
  354:  Wait  90`
        Call RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
  360:  Call  $Function_80238478    ( 00000000 )
  370:  Thread
  378:  	Set   *Var9  0000003C
  388:  	Loop  00000014
  394:  		Sub   *Var9  00000003
  3A4:  		Call  $Function_80238478    ( *Var9 )
  3B4:  		Wait  1`
  3C0:  	EndLoop
  3C8:  EndThread
  3D0:  Call  8026EA7C  ( FFFFFF81 00000001 00000009 )
  3F4:  Thread
  3FC:  	Call  GetActorPos       ( .Actor:Partner *Var0 *Var1 *Var2 )
  418:  	Add   *Var1  0000000C
  428:  	Call  PlaySoundAtActor  ( .Actor:Partner 0000028C )
			Call	PlayEffect		( 0000005E 00000000 *Var[0] *Var[1] *Var[2] *Var[0] 200` 0` *Fixed[4.0] 00000006 00000000 00000000 00000000 00000000 )
  480:  	Wait  10`
  48C:  	Call  PlaySoundAtActor  ( .Actor:Partner 00002024 )
          %Play Elemental Effects
          Call  AddActorDecoration    ( .Actor:Self 00000000 00000000 .Decoration:RedFlames )
          Call  PlayEffect    ( ~FX:SmokeImpact:Small *Var3 *Var4 *Var5 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
		Wait	2` 
          Call  PlayEffect    ( ~FX:ColdBreath:PuffUp *Var0 *Var1 *Var2 *Var3 *Var4 *Var5 *VarE 0000000A 00000000 00000000 00000000 00000000 )
          Wait	2` 
          Call	$Function_ThunderFX ( )
		Wait	5` 
          %Remove Elemental Decoration
          Call  RemoveActorDecoration ( .Actor:Self 00000000 00000000 )
		Call	80254218 ( 0000000A )
		Call	ShakeCam ( 00000001 00000000 00000005 *Fixed[1.0] )
  4E4:  EndThread
  4EC:  Thread
  4F4:  	Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000E0007 )
  50C:  	Wait  5`
  518:  	Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000E0005 )
  530:  	Wait  30`
  53C:  	Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000E0001 )
  554:  EndThread
  55C:  Thread
  564:  	Call  SetBattleCamZoom      ( 000001A4 )
  574:  	Call  SetBattleCamTarget    ( 00000006 0000003F 0000000A )
  58C:  	Call  MoveBattleCamOver     ( 0000000F )
  59C:  	Wait  4`
  5A8:  	Set   *Var0  00000006
  5B8:  	Loop  0000001E
  5C4:  		Add   *Var0  00000001
  5D4:  		Call  SetBattleCamTarget    ( *Var0 0000003F 0000000A )
  5EC:  		Wait  1`
  5F8:  	EndLoop
  600:  EndThread
  628:  Call  GetActionResult       ( *Var0 )
  638:  Call  GetActorPos   ( .Actor:Partner *Var1 *Var2 *Var3 )
  654:  Add   *Var2  0000000C
		Wait  20`
  68C:  Call  SetGoalToTarget   ( .Actor:Self )
  69C:  Call  GetActionCommandResult    ( *VarF )
  6AC:  Call  PartnerTestEnemy  ( *Var0 ~Flags:DamageType:0 00000014 00000000 00000001 00000010 )
  6D0:  If  *Var0  ==  .HitResult:Miss % 6
  6E0:  	Goto  B
  6EC:  EndIf
          %If the action command is perfect, do 3 different attacks of 3 damage each....
  6F4: 	If  *VarF  ==  00000064
			Set *VarD 3
  704:  	Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:NoContact|Fire 0000008D 00000000 *VarD 00000070 )
          Wait  10`
          Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:NoContact|Ice 0000008D 00000000 *VarD 00000070 )
          Wait  10`
          Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:NoContact|Electric 0000008D 00000000 *VarD 00000070 )
  72C:  
          %If the action command isn't perfect, determine how many attacks are done and how strong they are
          Else
               Switch  *VarF  
                    %If they get to about 80% of the bar, give them 3 attacks but the last one only does 2 damage
                    Case  >  00000050
                         Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:NoContact|Fire 0000008D 00000000 00000003 00000070 )
                         Wait  10`
                         Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:NoContact|Ice 0000008D 00000000 00000003 00000070 )
                         Wait  10`
                         Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:NoContact|Electric 0000008D 00000000 00000002 00000070 )
                    %If the get Inbetween 50%-80% of the bar give them the first two attacks
                    Case  >  00000032
                         Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:NoContact|Fire 0000008D 00000000 00000003 00000070 )
                         Wait  10`
                         Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:NoContact|Ice 0000008D 00000000 00000003 00000070 ))
               
                    %If they get less than 50% of the bar, only give them the first attack
                    Default
                         Call  PartnerDamageEnemy    ( *Var0 ~Flags:DamageType:NoContact|Fire 0000008D 00000000 00000003 00000070 )
               EndSwitch
  
  75C:  EndIf
  764:  Label  B
  7A4:  Wait  5`
  7B8:  Call  $Function_802383E4 ( )
  7C4:  Call  80280818 ( )
  7D0:  Wait  30`
  7DC:  Call  GetActionCommandResult    ( *Var0 )
  7EC:  Switch  *Var0
  7F8:  	Case  >  00000063
  804:  		ExecWait  $Script_80239914
  810:  	Default
  818:  		ExecWait  $Script_80239990
  824:  EndSwitch
		Call	AddActorVar ( .Actor:Self 0000000F 00000001 )
  82C:  Return
  834:  End
}