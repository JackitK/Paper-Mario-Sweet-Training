

%first hit does hammer + 10!
%but recoil hit does base hammer + 4 damage to you
%recoil is not affected by (most) attack affecting things
%	Not sure about if the permanent attack boost ("attack will go up by 1") still affects this 

%fail = hammer + 4
@ $Script_UseMove0
{
    0:  Call  802694A4  ( 00000001 )
   10:  Call  GetMenuSelection  ( *Var0 *Var1 *Var2 )
   28:  Switch  *Var1
   34:  	Case  ==  00000000 % 0
   40:  		Set   *VarD  0000002D
   50:  		Set   *VarE  00000008
   60:  		Set   *VarF  0000000A
   70:  		ExecWait  $Script_802A3168
   7C:  	Case  ==  00000001 % 1
   88:  		Set   *VarD  0000002D
   98:  		Set   *VarE  00000009
   A8:  		Set   *VarF  0000000C
   B8:  		ExecWait  $Script_802A3168
   C4:  	Case  ==  00000002 % 2
   D0:  		Set   *VarD  0000002D
   E0:  		Set   *VarE  0000000A
   F0:  		Set   *VarF  0000000E
  100:  		ExecWait  $Script_802A3168
  10C:  EndSwitch
  114:  Return
  11C:  End
}

@ $Script_802A3168
{
    0:  Call  LoadActionCommand ( .ActionCommand:Smash )
   10:  Call  802A9000 ( )
   1C:  Call  SetAnimation      ( .Actor:Player 00000000 00010005 )
   34:  Call  GetActorPos       ( .Actor:Player *Var0 *Var1 *Var2 )
   50:  Add   *Var0  00000010
   60:  Call  SetActorSpeed     ( .Actor:Player *Fixed[4.0] )
   74:  Call  SetGoalPos        ( .Actor:Player *Var0 *Var1 *Var2 )
   90:  Call  PlayerRunToGoal   ( 00000000 )
   A0:  Call  SetGoalToTarget   ( .Actor:Player )
   B0:  Call  AddGoalPos        ( .Actor:Player 00000000 00000000 00000000 )
   CC:  Call  GetMenuSelection  ( *Var0 *Var1 *Var2 )
   E4:  Switch  *Var1
   F0:  	Case  ==  00000000 % 0
   FC:  		ExecWait  $Script_PreThrowHammer
  108:  	Case  ==  00000001 % 1
  114:  		ExecWait  $Script_PreThrowSHammer
  120:  	Case  ==  00000002 % 2
  12C:  		ExecWait  $Script_PreThrowUHammer
  138:  EndSwitch
  140:  Call  InitTargetIterator ( )
  14C:  Call  UseBattleCamPreset    ( 0000001A )
  15C:  Call  AddBattleCamZoom  ( 00000032 )
  16C:  Call  MoveBattleCamOver ( 00000014 )
  17C:  Call  PlaySoundAtActor  ( .Actor:Player 0000010B )
  190:  Call  GetMenuSelection  ( *Var0 *Var1 *Var2 )
  1A8:  Switch  *Var1
  1B4:  	Case  ==  00000000 % 0
  1C0:  		Call  SetAnimation  ( .Actor:Player 00000000 00040017 )
  1D8:  		Wait  4`
  1E4:  		Call  SetAnimation  ( .Actor:Player 00000000 00040018 )
  1FC:  	Case  ==  00000001 % 1
  208:  		Call  SetAnimation  ( .Actor:Player 00000000 0004001D )
  220:  		Wait  4`
  22C:  		Call  SetAnimation  ( .Actor:Player 00000000 0004001E )
  244:  	Case  ==  00000002 % 2
  250:  		Call  SetAnimation  ( .Actor:Player 00000000 00040023 )
  268:  		Wait  4`
  274:  		Call  SetAnimation  ( .Actor:Player 00000000 00040024 )
  28C:  EndSwitch
  294:  Call  GetActionCommandMode  ( *Var0 )
  2A4:  If  *Var0  >  00000000
  2B4:  	Call  $Function_802A1050 ( )
  2C0:  	If  *Var0  ==  00000000
  2D0:  		Loop  0000002D
  2DC:  			Wait  1`
  2E8:  			Call  CheckButtonDown   ( 00040000 *Var0 )
  2FC:  			If  *Var0  !=  .False
  30C:  				BreakLoop
  314:  			EndIf
  31C:  		EndLoop
  324:  	EndIf
  32C:  	Add   *VarD  00000006
  33C:  	Call  802A9258  ( 00000000 *VarD 00000003 )
  354:  	Call  SetActionResult   ( 00000000 )
  364:  	Set   *Var1  00000000
  374:  	Loop  0000001E
  380:  		Wait  1`
  38C:  		Call  GetActionResult   ( *Var0 )
  39C:  		If  *Var0  !=  00000000
  3AC:  			If  *Var1  !=  00000001
  3BC:  				Call  GetMenuSelection  ( *Var3 *Var4 *Var5 )
  3D4:  				Switch  *Var4
  3E0:  					Case  ==  00000000 % 0
  3EC:  						Call  SetAnimation  ( .Actor:Player 00000000 00040019 )
  404:  					Case  ==  00000001 % 1
  410:  						Call  SetAnimation  ( .Actor:Player 00000000 0004001F )
  428:  					Case  ==  00000002 % 2
  434:  						Call  SetAnimation  ( .Actor:Player 00000000 00040025 )
  44C:  				EndSwitch
  454:  				Set   *Var1  00000001
  464:  			EndIf
  46C:  		EndIf
  474:  		Call  CheckButtonDown   ( 00040000 *Var0 )
  488:  		If  *Var0  ==  .False
  498:  			BreakLoop
  4A0:  		EndIf
  4A8:  	EndLoop
  4B0:  Else
  4B8:  	Wait  10`
  4C4:  	Call  GetMenuSelection  ( *Var3 *Var4 *Var5 )
  4DC:  	Switch  *Var4
  4E8:  		Case  ==  00000000 % 0
  4F4:  			Call  SetAnimation  ( .Actor:Player 00000000 00040019 )
  50C:  		Case  ==  00000001 % 1
  518:  			Call  SetAnimation  ( .Actor:Player 00000000 0004001F )
  530:  		Case  ==  00000002 % 2
  53C:  			Call  SetAnimation  ( .Actor:Player 00000000 00040025 )
  554:  	EndSwitch
  55C:  	Wait  30`
  568:  EndIf
  570:  Call  GetActionCommandMode  ( *Var0 )
  580:  If  *Var0  >  00000000
  590:  	Loop
  59C:  		Wait  1`
  5A8:  		Call  GetActionSuccess  ( *Var0 )
  5B8:  		If  *Var0  !=  00000000
  5C8:  			BreakLoop
  5D0:  		EndIf
  5D8:  	EndLoop
  5E0:  EndIf
  5E8:  Call  GetMenuSelection  ( *Var0 *Var1 *Var2 )
  600:  Switch  *Var1
  60C:  	Case  ==  00000000 % 0
  618:  		Call  SetAnimation      ( .Actor:Player 00000000 0004001B )
  630:  		Call  PlaySoundAtActor  ( .Actor:Player 00002115 )
  644:  	Case  ==  00000001 % 1
  650:  		Call  SetAnimation      ( .Actor:Player 00000000 00040021 )
  668:  		Call  PlaySoundAtActor  ( .Actor:Player 00002116 )
  67C:  	Case  ==  00000002 % 2
  688:  		Call  SetAnimation      ( .Actor:Player 00000000 00040027 )
  6A0:  		Call  PlaySoundAtActor  ( .Actor:Player 00002117 )
  6B4:  EndSwitch
  6BC:  Wait  3`
  6C8:  Call  GetMenuSelection  ( *Var0 *Var1 *Var2 )
  6E0:  Switch  *Var1
  6EC:  	Case  ==  00000000 % 0
  6F8:  		Call  CreateVirtualEntity   ( *VarA $EntityModelScript_Hammer )
  70C:  	Case  ==  00000001 % 1
  718:  		Call  CreateVirtualEntity   ( *VarA $EntityModelScript_SuperHammer )
  72C:  	Case  ==  00000002 % 2
  738:  		Call  CreateVirtualEntity   ( *VarA $EntityModelScript_UltraHammer )
  74C:  EndSwitch
  754:  Call  GetActorPos       ( .Actor:Player *Var0 *Var1 *Var2 )
  770:  Add   *Var0  00000014
  780:  Add   *Var1  0000002A
  790:  Add   *Var2  00000005
  7A0:  Call  SetVirtualEntityPosition  ( *VarA *Var0 *Var1 *Var2 )
  7BC:  Call  SetVirtualEntityScale     ( *VarA *Fixed[0.6] *Fixed[0.6] *Fixed[0.6] )
  7D8:  Call  InitTargetIterator ( )
  7E4:  Call  SetGoalToTarget   ( .Actor:Self )
  7F4:  Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  810:  Call  DidActionSucceed  ( *Var3 )
  820:  Switch  *Var3
  82C:  	Case  >  .False
  838:  		Thread
  840:  			Set   *Var0  00000000
  850:  			Loop  00000009
  85C:  				Add   *Var0  0000003C
  86C:  				Call  SetVirtualEntityRotation  ( *VarA 00000000 00000000 *Var0 )
  888:  				Wait  1`
  894:  			EndLoop
  89C:  		EndThread
  8A4:  		Call  SetVirtualEntityJumpGravity   ( *VarA *Fixed[1.3] )
  8B8:  		Add   *Var2  00000005
  8C8:  		Call  VirtualEntityJumpTo   ( *VarA *Var0 *Var1 *Var2 0000000B )
  8E8:  	Default
  8F0:  		Thread
  8F8:  			Set   *Var0  00000000
  908:  			Loop  00000012
  914:  				Add   *Var0  0000003C
  924:  				Call  SetVirtualEntityRotation  ( *VarA 00000000 00000000 *Var0 )
  940:  				Wait  1`
  94C:  			EndLoop
  954:  		EndThread
  95C:  		Call  SetVirtualEntityJumpGravity   ( *VarA *Fixed[0.7] )
  970:  		Add   *Var2  00000005
  980:  		Call  VirtualEntityJumpTo   ( *VarA *Var0 *Var1 *Var2 00000014 )
  9A0:  EndSwitch
  9A8:  Call  SetAnimation      ( .Actor:Player 00000000 00010002 )
  9C0:  Call  PlayerTestEnemy   ( *Var3 ~Flags:DamageType:NoContact|Smash 00000019 00000000 00000000 00000010 )
  9E4:  If  *Var3  ==  .HitResult:Miss % 6
  9F4:  	Call  VirtualEntityLandJump ( *VarA )
  A04:  	Call  DeleteVirtualEntity   ( *VarA )
  A14:  	ExecWait  $Script_802A1A64
  A20:  	Return
  A28:  EndIf
		/%
  A30:  Thread
  A38:  	Call  DidActionSucceed  ( *Var3 )
  A48:  	Switch  *Var3
  A54:  		Case  >  .False
  A60:  			Call  SetVirtualEntityJumpGravity   ( *VarA *Fixed[1.4] )
  A74:  			Add   *Var0  0000003C
  A84:  			Add   *Var1  00000000
  A94:  			Call  VirtualEntityJumpTo   ( *VarA *Var0 *Var1 *Var2 0000000A )
  %AB4:  			Call  DeleteVirtualEntity   ( *VarA )
  AC4:  		Default
  ACC:  			Call  SetVirtualEntityJumpGravity   ( *VarA *Fixed[0.8] )
  AE0:  			Add   *Var0  00000028
  AF0:  			Add   *Var1  00000000
  B00:  			Call  VirtualEntityJumpTo   ( *VarA *Var0 *Var1 *Var2 0000000F )
  %B20:  			Call  DeleteVirtualEntity   ( *VarA )
  B30:  	EndSwitch
  B38:  EndThread
		%/
  B40:  Call  DidActionSucceed  ( *Var0 )
  B50:  Switch  *Var0
  B5C:  	Case  >  .False
  B68:  		Call  GetMenuSelection  ( *Var0 *Var1 *Var2 )
  B80:  		Switch  *Var1
  B8C:  			Case  ==  00000000 % 0
  B98:  				Call  StartRumble   ( 00000007 )
  BA8:  				Thread
  BB0:  					Call  ShakeCam  ( .Cam:Battle 00000000 0000000A *Fixed[1.3] )
  BCC:  				EndThread
  BD4:  			Case  ==  00000001 % 1
  BE0:  				Call  StartRumble   ( 00000008 )
  BF0:  				Thread
  BF8:  					Call  ShakeCam  ( .Cam:Battle 00000000 0000000A *Fixed[1.6] )
  C14:  				EndThread
  C1C:  			Case  ==  00000002 % 2
  C28:  				Call  StartRumble   ( 00000009 )
  C38:  				Thread
  C40:  					Call  ShakeCam  ( .Cam:Battle 00000000 0000000A *Fixed[1.9] )
  C5C:  				EndThread
  C64:  		EndSwitch
  C6C:  	Default
  C74:  		Call  GetMenuSelection  ( *Var0 *Var1 *Var2 )
  C8C:  		Switch  *Var1
  C98:  			Case  ==  00000000 % 0
  CA4:  				Call  StartRumble   ( 00000007 )
  CB4:  				Thread
  CBC:  					Call  ShakeCam  ( .Cam:Battle 00000000 00000002 *Fixed[1.3] )
  CD8:  				EndThread
  CE0:  			Case  ==  00000001 % 1
  CEC:  				Call  StartRumble   ( 00000008 )
  CFC:  				Thread
  D04:  					Call  ShakeCam  ( .Cam:Battle 00000000 00000002 *Fixed[1.6] )
  D20:  				EndThread
  D28:  			Case  ==  00000002 % 2
  D34:  				Call  StartRumble   ( 00000009 )
  D44:  				Thread
  D4C:  					Call  ShakeCam  ( .Cam:Battle 00000000 00000002 *Fixed[1.9] )
  D68:  				EndThread
  D70:  		EndSwitch
  D78:  EndSwitch
  D80:  Call  UseBattleCamPreset    ( 0000002C )
  D90:  Call  MoveBattleCamOver     ( 0000000A )
  DA0:  Call  GetMenuSelection      ( *Var0 *Var1 *Var2 )
  DB8:  Switch  *Var1
  DC4:  	Case  ==  00000000 % 0
  DD0:  		Call  PlaySoundAtActor  ( .Actor:Player 0000210A )
  DE4:  	Case  ==  00000001 % 1
  DF0:  		Call  PlaySoundAtActor  ( .Actor:Player 0000210B )
  E04:  	Case  ==  00000002 % 2
  E10:  		Call  PlaySoundAtActor  ( .Actor:Player 0000210C )
  E24:  EndSwitch
  E2C:  Call  DidActionSucceed  ( *Var0 )
		Set *VarD *Var0
  E3C:  Switch  *Var0
  E48:  	Case  >  .False
  E54:  		Call  GetMenuSelection  ( *Var0 *Var1 *Var2 )
  E6C:  		Switch  *Var1
  E78:  			Case  ==  00000000 % 0
  E84:  				Call  PlaySoundAtActor  ( .Actor:Player 000000E9 )
  E98:  			Case  ==  00000001 % 1
  EA4:  				Call  PlaySoundAtActor  ( .Actor:Player 0000010E )
  EB8:  			Case  ==  00000002 % 2
  EC4:  				Call  PlaySoundAtActor  ( .Actor:Player 0000010E )
  ED8:  		EndSwitch
  EE0:  		Call     PlayerDamageEnemy 	( *Var0 ~Flags:DamageType:NoContact|Throw 00000019 00000000 *VarF 00000070 ) 
  F04:  	Default
  F0C:  		Call  GetMenuSelection  ( *Var0 *Var1 *Var2 )
  F24:  		Switch  *Var1
  F30:  			Case  ==  00000000 % 0
  F3C:  				Call  PlaySoundAtActor  ( .Actor:Player 000000E9 )
  F50:  			Case  ==  00000001 % 1
  F5C:  				Call  PlaySoundAtActor  ( .Actor:Player 0000010E )
  F70:  			Case  ==  00000002 % 2
  F7C:  				Call  PlaySoundAtActor  ( .Actor:Player 0000010E )
  F90:  		EndSwitch
  F98:  		Call  PlayerDamageEnemy ( *Var0 ~Flags:DamageType:NoContact|Throw 00000019 00000000 *VarE 00000030 )
  FBC:  EndSwitch
		Thread		%try to set up the jump and hammer recoil at the same time
  FC4:  	Switch  *Var0
  FD0:  		CaseOR  ==  00000001 % 1
  FDC:  		CaseOR  ==  00000003 % 3
  FE8:  			ExecWait  $Script_802A18AC		%going home
  FF4:  		EndCaseGroup
  FFC:  		CaseOR  ==  .HitResult:Hit % 0
 1008:  		CaseOR  ==  00000002 % 2
 1014:  			ExecWait  $Script_802A1A64		%going home
 1020:  		EndCaseGroup
 1028:  	EndSwitch
		EndThread
		%now recoil back to mario
		Call	 SetTargetActor  ( .Actor:Self .Actor:Player )
		Call	 SetGoalToTarget ( .Actor:Self )
		Call  SetVirtualEntityJumpGravity   ( *VarA *Fixed[1.4] )
		Call  GetGoalPos ( .Actor:Self *Var5 *Var6 *Var7 )
		Thread
			Set   *Var0  00000000
			Loop  00000012
   				Add   *Var0  0000003C
				Call  SetVirtualEntityRotation  ( *VarA 00000000 00000000 *Var0 )
				Wait  1`
			EndLoop
		EndThread
		Call  VirtualEntityJumpTo   ( *VarA *Var5 *Var6 *Var7 00000014 )	%hopefully make this make more sense
		Call  DeleteVirtualEntity   ( *VarA )
		%this code looks weird
		Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000004 00000010 )		
		Switch	 *Var0
			CaseOR == 5
			CaseOR == 6
				Return
			EndCaseGroup
		EndSwitch		
		Call  DidActionSucceed  ( *Var0 )
		Switch  *VarD						%use cached result?
			Case  >  .False
				Sub *VarF 8
				%damage = base hammer
				%enemy functions and player functions create a different set of problems
				%	Using enemy functions:
				%		All power affecting badges and most other power stuff doesn't work
				%	Using player functions:
				%		Defense calculation and blocking does not work
				%		It doesnt actually do any damage (!!!)
				%Apply attack
				ExecWait $Script_CalculateAttack
				Add *VarF *Var2
				Call     EnemyDamageTarget 	( .Actor:Self *Var[0] ~Flags:DamageType:NoContact|Throw 00000019 00000000 *VarF 00000030 )
				%Call  PlayerDamageEnemy ( *Var0 ~Flags:DamageType:NoContact|Throw 00000019 00000000 *VarF 00000030 )
			Default
				Sub *VarE 7
				%damage = base hammer - 2
				%Apply attack
				ExecWait $Script_CalculateAttack
				Add *VarE *Var2	
				Call     EnemyDamageTarget 	( .Actor:Self *Var[0] ~Flags:DamageType:NoContact|Throw 00000019 00000000 *VarE 00000030 )
				%Call  PlayerDamageEnemy ( *Var0 ~Flags:DamageType:NoContact|Throw 00000019 00000000 *VarF 00000030 )
		EndSwitch
 1030:  Return
 1038:  End
}


#new:Script $Script_CalculateAttack
{
	Call $Function_CalculateAttack ( *Var[2] )
  % These checks shouldn't be needed as these need as they are Dark Star exclusive badges...
  /%
	Call $Function_CheckBadge ( .Item:MegaRush *Var[1] )
	If *Var[1] == 1
		Call GetActorHP ( .Actor:Player *Var[3] )
		If *Var[3] <= 2`
			Add *Var[2] 4
			Goto 0 %mega rush and power rush don't stack
		EndIf
	EndIf
	Call $Function_CheckBadge ( .Item:PowerRush *Var[1] )
	If *Var[1] == 1
		Call GetActorHP ( .Actor:Player *Var[3] )
		If *Var[3] <= 10`
			Add *Var[2] 2
		EndIf
	EndIf
	Label 0
	Call $Function_CheckBadge ( .Item:PerfectRush *Var[1] ) %kaiden is now perfect rush
	If *Var[1] == 1
		Call GetActorHP ( .Actor:Player *Var[3] )
		Call $Function_GetMarioMaxHP ( *Var[4] )
		If *Var[3] == *Var[4]
			Add *Var[2] 2
		EndIf
	EndIf	
	Call $Function_CheckBadge ( .Item:FlowerPower *Var[1] )
	If *Var[1] == 1
		Call	$Function_GetMarioMaxFP ( *Var3 )
		Call	$Function_GetMarioFP ( *Var4 )
		If *Var3 == *Var4
			Add *Var[2] 2
		EndIf
	EndIf
	Call $Function_GetBattleDataByte ( *Var3 0000009B )
	If *Var3 > 0
		Add *Var2 1
	EndIf	
	%Var 2 = attack power
	%Stellar power
	%-0.375 star energy
	%+1 attack power if you don't go below 0 by doing that
	Call $Function_CheckBadge ( .Item:StellarPower *Var[1] )
	If *Var[1] == 1
		Call  $Function_GetArbitraryShort ( *Var3 8010F520 )	
		If *Var3 < 00000060
			Sub *Var2 1`
		Else
			Sub *Var3 00000060
			Call  $Function_SetArbitraryShort ( *Var3 8010F520 )	
		EndIf
	EndIf	
	%Dark power (applies after stellar power)
	%+1 if below 1/4 star energy
	%0 if below 1/2
	%-1 if above 1/2
	Call $Function_CheckBadge ( .Item:DarkPower *Var[1] )
	If *Var[1] == 1
		Call  $Function_GetArbitraryShort ( *Var3 8010F520 )	
		Call  $Function_GetArbitraryByte ( *Var4 8010F51E )			
		Add *Var2 2`
		Mul *Var3 4`
		Mul *Var4 256`
		If *Var3 > *Var4
			Sub *Var2 1`
		EndIf
		Div *Var3 2`
		If *Var3 > *Var4
			Sub *Var2 1`
		EndIf
	EndIf
	%HP drain
	%-1 atk
	%Uses 89 + (battle struct) as a counter
%/

% Check for HP Drain badges...
	Call $Function_CheckBadge ( .Item:HPDrain *Var[1] )
	If *Var[1] == 1
    /%
		Call	 $Function_HasGreedStone ( *Var3 ) %No Greed stone
		If *Var3 == 0`
			Call  $Function_GetArbitraryByte ( *Var3 8010F293 )
			If *Var3 > 5`				
				Sub *Var2 1`
				Call  $Function_GetArbitraryByte ( *Var4 800DC0F9 )
				Add *Var4 1`
				If *Var4 > 5`
					Set *Var4 5`
				EndIf
				Call  $Function_SetArbitraryByte ( *Var4 800DC0F9 )		
			EndIf
		Else
    %/
			Sub *Var2 1`
			Call  $Function_GetArbitraryByte ( *Var4 800DC0F9 )
			Add *Var4 1`
			If *Var4 > 5`
				Set *Var4 5`
			EndIf
			Call  $Function_SetArbitraryByte ( *Var4 800DC0F9 )		
		%EndIf
	EndIf	
	%Mega HP drain
	%-2 atk
	Call $Function_CheckBadge ( .Item:MegaHPDrain *Var[1] )
	If *Var[1] == 1
    /%
		Call	 $Function_HasGreedStone ( *Var3 ) % No Greed Stone
		If *Var3 == 0`
			Call  $Function_GetArbitraryByte ( *Var3 8010F293 )
			If *Var3 > 5`				
				Sub *Var2 2`
				Call  $Function_GetArbitraryByte ( *Var4 800DC0F9 )
				Add *Var4 2`
				If *Var4 > 5`
					Set *Var4 5`
				EndIf
				Call  $Function_SetArbitraryByte ( *Var4 800DC0F9 )		
			EndIf
		Else
      %/
			Sub *Var2 2`
			Call  $Function_GetArbitraryByte ( *Var4 800DC0F9 )
			Add *Var4 2`
			If *Var4 > 5`
				Set *Var4 5`
			EndIf
			Call  $Function_SetArbitraryByte ( *Var4 800DC0F9 )		
		%EndIf
	EndIf
	Return
	End
}



@ $Script_802A18AC
{
    0:  Call  80276EFC ( )
    C:  Call  UseBattleCamPreset    ( 00000004 )
   1C:  Call  MoveBattleCamOver ( 00000005 )
   2C:  Call  802693F0 ( )
   38:  Wait  5`		%20 -> 5
   44:  Call  EnablePlayerBlur  ( FFFFFFFF )
   54:  Call  SetAnimation      ( .Actor:Player 00000000 00010002 )
   6C:  Wait  5`
   78:  Call  SetGoalToHome     ( .Actor:Player )
   88:  Call  SetActorSpeed     ( .Actor:Player *Fixed[8.0] )
   9C:  Call  SetAnimation      ( .Actor:Player 00000000 00010005 )
   B4:  Call  PlayerRunToGoal   ( 00000000 )
   C4:  Call  SetAnimation      ( .Actor:Player 00000000 00010002 )
   DC:  Return
   E4:  End
}

@ $Script_802A1A64
{
    0:  Call  80276EFC ( )
    C:  Call  UseBattleCamPreset    ( 0000001D )
   1C:  Call  802693F0 ( )
   28:  Wait  5`		%20 -> 5
   34:  Call  EnablePlayerBlur      ( FFFFFFFF )
   44:  Call  SetAnimation  ( .Actor:Player 00000000 00010002 )
   5C:  Wait  5`
   68:  Call  SetGoalToHome ( .Actor:Player )
   78:  Call  SetActorSpeed ( .Actor:Player *Fixed[8.0] )
   8C:  Call  SetAnimation  ( .Actor:Player 00000000 00010005 )
   A4:  Call  PlayerRunToGoal       ( 00000000 )
   B4:  Call  SetAnimation  ( .Actor:Player 00000000 00010002 )
   CC:  Return
   D4:  End
}

#new:Script $Script_PreThrowHammer
{
    0:  Call  SetGoalToTarget   ( .Actor:Player )
   10:  Call  AddGoalPos        ( .Actor:Player 00000000 00000000 00000000 )
   2C:  Set   *Var1  00000000
   3C:  Loop  0000000A
   48:  	Call  CheckButtonDown   ( 00040000 *Var0 )
   5C:  	If  *Var0  ==  .True
   6C:  		Call  SetAnimation  ( .Actor:Player 00000000 00010002 )
   84:  		BreakLoop
   8C:  	EndIf
   94:  	Wait  1`
   A0:  	Add   *Var1  00000001
   B0:  	Call  SetAnimation  ( .Actor:Player 00000000 00040016 )
   C8:  EndLoop
   D0:  Call  SetAnimation  ( .Actor:Player 00000000 00040016 )
   E8:  Switch  *Var1
   F4:  	Case  <  00000003
  100:  		Wait  4`
  10C:  	Case  <  00000005
  118:  		Wait  3`
  124:  	Case  <  00000007
  130:  		Wait  2`
  13C:  	Case  <  00000009
  148:  		Wait  1`
  154:  	Case  <  0000000B
  160:  		Wait  00000000
  16C:  EndSwitch
  174:  Return
  17C:  End
}

#new:Script $Script_PreThrowSHammer
{
    0:  Call  SetGoalToTarget   ( .Actor:Player )
   10:  Call  AddGoalPos        ( .Actor:Player 00000000 00000000 00000000 )
   2C:  Set   *Var1  00000000
   3C:  Loop  0000000A
   48:  	Call  CheckButtonDown   ( 00040000 *Var0 )
   5C:  	If  *Var0  ==  .True
   6C:  		Call  SetAnimation  ( .Actor:Player 00000000 00010002 )
   84:  		BreakLoop
   8C:  	EndIf
   94:  	Wait  1`
   A0:  	Add   *Var1  00000001
   B0:  	Call  SetAnimation  ( .Actor:Player 00000000 0004001C )
   C8:  EndLoop
   D0:  Call  SetAnimation  ( .Actor:Player 00000000 0004001C )
   E8:  Switch  *Var1
   F4:  	Case  <  00000003
  100:  		Wait  4`
  10C:  	Case  <  00000005
  118:  		Wait  3`
  124:  	Case  <  00000007
  130:  		Wait  2`
  13C:  	Case  <  00000009
  148:  		Wait  1`
  154:  	Case  <  0000000B
  160:  		Wait  00000000
  16C:  EndSwitch
  174:  Return
  17C:  End
}

#new:Script $Script_PreThrowUHammer
{
    0:  Call  SetGoalToTarget   ( .Actor:Player )
   10:  Call  AddGoalPos        ( .Actor:Player 00000000 00000000 00000000 )
   2C:  Set   *Var1  00000000
   3C:  Loop  0000000A
   48:  	Call  CheckButtonDown   ( 00040000 *Var0 )
   5C:  	If  *Var0  ==  .True
   6C:  		Call  SetAnimation  ( .Actor:Player 00000000 00010002 )
   84:  		BreakLoop
   8C:  	EndIf
   94:  	Wait  1`
   A0:  	Add   *Var1  00000001
   B0:  	Call  SetAnimation  ( .Actor:Player 00000000 00040022 )
   C8:  EndLoop
   D0:  Call  SetAnimation  ( .Actor:Player 00000000 00040022 )
   E8:  Switch  *Var1
   F4:  	Case  <  00000003
  100:  		Wait  4`
  10C:  	Case  <  00000005
  118:  		Wait  3`
  124:  	Case  <  00000007
  130:  		Wait  2`
  13C:  	Case  <  00000009
  148:  		Wait  1`
  154:  	Case  <  0000000B
  160:  		Wait  00000000
  16C:  EndSwitch
  174:  Return
  17C:  End
}

% Everything else is moved to a global file RecoilThrow_extraData.patch