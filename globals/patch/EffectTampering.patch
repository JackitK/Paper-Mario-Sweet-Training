%Effect data tampering

%Not easy
%However, effect data extensively uses DMA copy to load in data, which can be used to find where the code and image data is
%Effect code is placed at the E0XXXXXX region and images are not so it is easy to figure out if it is loading code or images

%problem: effect data is only loaded in once so you can't really have multiple of the same effect have different colors


%three methods of changing effects
%Method 1 (easiest)
%	Check the return values of the effect functions
%	C + the return value is a pointer to the effect struct (*usually)
%	Then you can use the values to change things in the effect struct
%	Crystal King's frost bolt and frost breath use this method

%Method 2 (harder)
%	Modify effect code directly
%	Most of it is in the E0XXXXXX region so it is hard to hook into
%	Also, finding what you want to change there might not be very straightforward
%	..though sometimes you can find something to put a write breakpoint onto (if there's a value in the effect struct constantly being reset)

%Method 3 (hardest)
%	Modify effect data directly
%	This comes with consequences / limitations
%	Having multiple of the same effect will have the same changes (references the same data)
%	How each effect is laid out is different
%	Some effects have sprites that can be messed with


%what influences how effects work?
%Loaded when an effect is created (but kept in memory for a while)
%	effect code
%		gets DMA copied to the E0XXXXXX region
%	effect data (there's also a table for what effect data is loaded)
%		gets DMA copied to some memory heap

%One for each individual effect
%	effect struct 
%		controls stuff like position and animation state
%		Sometimes has color / palette data (important)
%		Variable size
%	??? each entry has a pointer to the next entry?
%		(good for figuring out how large each effect entry is)

%Also important
%	effect table entry (leads to the effect struct)
%		has arguments for effect type but also has a pointer to the effect struct
%		returned from most internal effect spawn functions








%revised version of all ways of modifying effects
%	Method 0: Mess with the effect struct
%		PlayEffect will return an effect pointer in *VarF and you can do stuff to it (see Crystal King breath for example)
%		though actual pointer is at C + returned value (It seems the returned value is a different type of effect struct)
%	Method 1: Directly overwrite effect data
%		You can probably use hot patching for this
%	Method 2: Modify effect code
%		Sometimes you can find some hidden effect data (for example, blue fire effects in Bowser's Castle have hidden values for determining the color of each subtype)
%	Method 2.5: Modify effect code to point to different effect data
%		More complex




%it turns out that PlayEffect will put the effect pointer into *VarF which can be used to easily change some effects

%	^Not always, some effects will not return anything, forcing you to use the hard method instead of the easy one
%	A few effect functions do return stuff but don't set *VarF, so you have to manually add them into the playeffect function



%"The hard way"
%how the current system works
%call SetEffectState before calling the effect
%current system will reset the effect state after playing an effect

%					Call	 $SetEffectState ( 00000001 )
%  2E4:  			Call     PlayEffect  	( ~FX:HuffPuffBreath *Var[0] *Var[1] *Var[2] *Fixed[190.0] *Fixed[1.5] *Fixed[1.0] 00000028 00000000 00000000 00000000 00000000 00000000 )				%~FX:HuffPuffBreath + 1000


%system used for making lightning bolts different colors
%reset to value 0 after creating effect
%(Note that A0 is an argument for the function so set the palette before A0 is set)

%		ADDIU		A0, R0, 1
%		SAW			A0, $LightningBoltPalette
%   B0: JAL			800723B0			
%	B4: CLEAR		A0					%Subtype 0?



%supplemental info
%effect stuff is stored in a table at 8007F210 ?		(table end = 8007FEA0?)
%each entry is size 0x18?
%0 = ??? memory address
%4 = code start address ROM
%8 = code end address ROM
%C = ??? memory address
%10 = image start address ROM		
%14 = image end address ROM

%0x73 => 115 dec

/%
here is the entire table lol (also at ROM 5A610)
00000000 00000000 00000000 00000000 00000000 00000000 
E0002000 003278F0 00328110 E0002000 00326410 003278F0
00000000 00000000 00000000 00000000 00000000 00000000 
00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 
00000000 00000000 00000000 00000000 00000000 00000000
E000C160 00328110 00328EA0 E000C000 00328EA0 0032C110 
E000E000 0032C110 0032C7A0 E000E000 00328EA0 0032C110
E00101E8 0032C7A0 0032CEC0 E0010000 0032CEC0 0032DD10 
E0012204 0032DD10 0032E490 E0012000 0032CEC0 0032DD10

E0014000 0032E490 0032EC50 E0014000 0032EC50 0032EE30 
E0016000 0032EE30 0032F580 E0016000 0032EC50 0032EE30
E0018078 0032F580 0032FB50 E0018000 0032FB50 0032FE30 
E001A000 0032FE30 00330460 E001A000 00330460 00330910
E001C000 00330910 00330F00 E001C000 00330F00 00331940 
E001E000 00331940 003326A0 E001E000 003326A0 00333EC0
E00202CC 00333EC0 00334C70 E0020000 00334C70 00337240 
E0022000 00337240 00337FC0 E0022000 00337FC0 00339250
E0024000 00339250 00339F60 E0024000 00339F60 0033B180 
E0026000 0033B180 0033BBD0 E0026000 0033BBD0 0033CDF0

E0028000 0033CDF0 0033D610 E0028000 0033D610 0033E8C0 
E002A000 0033E8C0 0033F000 E002A000 0033F000 0033FE80
E002C000 0033FE80 00340880 E002C000 00340880 003419E0 
E002E000 003419E0 00342140 E002E000 00328EA0 0032C110
E0030000 00342140 00343040 E0030000 00343040 00343680 
E0032000 00343680 00343F70 E0032000 00343F70 00344A10
E0034000 00344A10 003451E0 E0034000 003451E0 003454E0 
E0036000 003454E0 00345B40 E0036000 00345B40 0034DD20
E0038000 0034DD20 0034E770 E0038000 0034E770 0034EC80 
E003A000 0034EC80 0034F4C0 E003A000 00328EA0 0032C110

E003C000 0034F4C0 00350220 E003C000 00350220 00352440 
E003E000 00352440 00352CE0 E003E000 00352CE0 00353300
E0040000 00353300 00353BB0 E0040000 00353BB0 003547A0 
E0042000 003547A0 00354F60 E0042000 00343040 00343680
E0044000 00354F60 00355EE0 E0044000 00337FC0 00339250 
E0046000 00355EE0 00356530 E0046000 00356530 00356980
E0048000 00356980 003573A0 E0048000 003573A0 003584C0 
E004A000 003584C0 003593B0 E004A000 003593B0 00359F20
E004C000 00359F20 0035A5E0 E004C000 0035A5E0 0035B9D0 
E004E000 0035B9D0 0035BFD0 E004E000 00328EA0 0032C110

E0050000 0035BFD0 0035C550 E0050000 0035C550 0035CA80 
E0052000 0035CA80 0035D510 E0052000 0035D510 0035DA00
00000000 00000000 00000000 00000000 00000000 00000000 
E0056000 0035DA00 0035E920 E0056000 0033D610 0033E8C0
E0058000 0035E920 0035F0E0 E0058000 0035F0E0 003602C0 
E005A000 003602C0 00360A30 E005A000 00360A30 00360F40
E005C000 00360F40 00361670 E005C000 00361670 003625C0 
E005E000 003625C0 00362C50 E005E000 00362C50 00363160	%0x2F 		47
E0060000 00363160 003638C0 E0060000 003638C0 00364300 
E0062000 00364300 00364C00 E0062000 00364C00 00364F10

E0064000 00364F10 003659B0 E0064000 003659B0 00366030 
E0066000 00366030 00366D60 E0066000 00366D60 0036A8D0	%0x33		image data length = 3B70		*80539050
E0068000 0036A8D0 0036AEE0 E0068000 0036AEE0 0036D020 
E006A1E8 0036D020 0036DF90 E006A000 0036DF90 0036E1D0	%0x35	
E006C000 0036E1D0 0036ED60 E006C000 0036ED60 00372790 	%0x36
E006E000 00372790 003733E0 E006E000 003733E0 003740B0
E0070000 003740B0 00374E50 E0070000 00337FC0 00339250 
E0072000 00374E50 00375510 E0072000 00375510 00376460	%0x39
E0074000 00376460 00377070 E0074000 00337FC0 00339250 
E0076000 00377070 00377F80 E0076000 00377F80 0037A3F0

E0078000 0037A3F0 0037ADD0 E0078000 0037ADD0 0037C540 
E007A000 0037C540 0037D180 E007A000 0037D180 0037D490
E007C000 0037D490 0037D9D0 E007C000 0037D9D0 0037F720 
E007E000 0037F720 003803A0 E007E000 003803A0 003812C0	
E0080000 003812C0 00381E00 E0080000 00381E00 00385640 	%0x40?
E0082000 00385640 003863B0 E0082000 003863B0 003889D0
E0084084 003889D0 00389850 E0084000 0037D9D0 0037F720 
E0086000 00389850 0038A350 E0086000 0038A350 0038ADF0
E008817C 0038ADF0 0038BBA0 E0088000 0038BBA0 0038C5F0 
E008A188 0038C5F0 0038D070 E008A000 0038D070 0038DE00

E008C000 0038DE00 0038E990 E008C000 0038E990 0038EE60 
E008E000 0038EE60 0038F710 E008E000 0038F710 0038F900
E0090000 0038F900 003903D0 E0090000 003903D0 00391D30 
E0092000 00391D30 00392440 E0092000 00392440 003928D0
E0094000 003928D0 003930A0 E0094000 003930A0 00394280 
E0096000 00394280 00394670 E0096000 00394670 00395BB0
E0098000 00395BB0 003960F0 E0098000 003960F0 003965B0 
E009A000 003965B0 00397040 E009A000 00397040 003981F0
E009C000 003981F0 00398BC0 E009C000 00398BC0 0039FF20 
E009E000 0039FF20 003A0D60 E009E000 003A0D60 003A2290

E00A0000 003A2290 003A2440 E00A0000 003A2440 003A2990 
E00A2000 003A2990 003A33D0 E00A2000 003A33D0 003A37E0
E00A4000 003A37E0 003A4320 E00A4000 003A4320 003A5550 		%outward waves
E00A6000 003A5550 003A5BE0 E00A6000 003A5BE0 003A70F0
E00A8000 003A70F0 003A77A0 E00A8000 003A77A0 003AA920 
E00AA000 003AA920 003AB030 E00AA000 003AB030 003AEE20
E00AC000 003AEE20 003AF700 E00AC000 003AF700 003B2350 
E00AE000 003B2350 003B2D90 E00AE000 003B2D90 003B3EB0
E00B0000 003B3EB0 003B46A0 E00B0000 003B46A0 003B4790 
E00B2000 003B4790 003B5340 E00B2000 003B5340 003B5CF0

E00B4000 003B5CF0 003B6BF0 E00B4000 003B6BF0 003B7160 
E00B6000 003B7160 003B78D0 E00B6000 003B78D0 003B7B80
E00B8000 003B7B80 003B8860 E00B8000 003B8860 003B8BD0 
E00BA000 003B8BD0 003B9A70 E00BA000 003B9A70 003BA030
E00BC000 003BA030 003BAEA0 E00BC000 003BAEA0 003BBF60 
E00BE000 003BBF60 003BCA90 E00BE000 003BCA90 003BCD60
E00C0000 003BCD60 003BD9A0 E00C0000 003BD9A0 003C11D0 		%60
E00C2000 003C11D0 003C1BA0 E00C2000 003C1BA0 003CADF0
E00C4000 003CADF0 003CB890 E00C4000 003CB890 003CC9E0 
E00C6000 003CC9E0 003CD6E0 E00C6000 003CD6E0 003CF3A0

E00C8000 003CF3A0 003CFAF0 E00C8000 003CFAF0 003D0500 
E00CA000 003D0500 003D11E0 E00CA000 003D11E0 003D1690
E00CC000 003D1690 003D2580 E00CC000 003D2580 003D2AC0 
E00CE000 003D2AC0 003D3930 E00CE000 003D3930 003D3E20
E00D0000 003D3E20 003D4970 E00D0000 003593B0 00359F20 
E00D2000 003D4970 003D4E90 E00D2000 003D4E90 003D5020
00000000 00000000 00000000 00000000 00000000 00000000 
E00D6000 003D5020 003D5F30 E00D6000 003D5F30 003D67C0
E00D8000 003D67C0 003D7040 E00D8000 003D7040 003D7240 
E00DA000 003D7240 003D7770 E00DA000 003D7770 003D7A70		%6D

E00DC000 003D7A70 003D80C0 E00DC000 003D80C0 003D8720		%6E? 		
E00DE000 003D8720 003D9100 E00DE000 003D9100 003DB460		
E00E0000 003DB460 003DBF40 E00E0000 003DBF40 003DC310 		
E00E2000 003DC310 003DCD50 E00E2000 003DCD50 003DE000		
E00E4000 003DE000 003DEE60 E00E4000 003DEE60 003E0930 		
E00E6000 003E0930 003E12D0 E00E6000 003E12D0 003E1690		%115 / 0x73?
E00E8000 003E1690 003E1CD0 E00E8000 003E1CD0 003E1EE0 
E00EA000 003E1EE0 003E2960 E00EA000 003E2960 003E43A0
00000000 00000000 00000000 00000000 00000000 00000000 
E010A000 003E43A0 003E5350 E010A000 003E5350 003E54C0

E010C000 003E54C0 003E5F30 E010C000 003E5F30 003EB4E0 
E010E32C 003EB4E0 003EBE60 E010E000 003EBE60 003F83F0
E0110000 003F83F0 003F8CC0 E0110000 003F8CC0 003F9E50 
E0112000 003F9E50 003FA4B0 E0112000 003FA4B0 003FEAE0
E0114000 003FEAE0 003FF250 E0114000 003FF250 00402640 
E0116000 00402640 00403400 E0116000 003FA4B0 003FEAE0
E0118000 00403400 00403BF0 E0118000 00403BF0 00404220 
E011A000 00404220 00404F40 E011A000 00404F40 00406B40
E011C000 00406B40 00407080 E011C000 00407080 00409990 
E011E000 00409990 0040A1C0 E011E000 0040A1C0 0040B3F0

E0120000 0040B3F0 0040BBA0 E0120000 0040BBA0 0040C5A0 
E0122000 0040C5A0 0040D290 E0122000 0040D290 00412730
E0124000 00412730 00413360 E0124000 00337FC0 00339250 
E0126000 00413360 00413FA0 E0126000 00413FA0 00414BA0
E0128000 00414BA0 00415060 E0128000 00415060 00415D90
%/

%Total length is C90 (0x86 effects)


%800721D0

%Messing with the breath effect function
%The stuff near the end is a lot of model stuff?
%Messing with them messes with the shape of the breath

%it seems to actually use some kind of noise function?

%	*memory addresses will be different since effects will load into different parts of the heap
%top = 8051EBD0 (starting from ROM 3D80C0)
%8051F010 = ??? = FC (changing this makes the breath totally black)
%8051F011 = ??? = 30 (secondary noise strength? causes weird effects, one is making the white part black)
%8051F014 = ??? = 5F (changing this results in weird color changes, can make white color into red or greenish)			rom = 3D8504
%	8051F014 = ??? = 5F (changing this results in weird color changes, last bit causes a color inversion)			
%8051F015 = some weird opacity thing? = 0E (1X causes breath to disappear)
%8051F01E = edge effects? (bits?)
%8051F01F + (only lower 4 bits seem to do anything) = noise strength? (changing this creates a lot of void pixels)
%8051F022 = pixellation strength? (only some bits work)
%8051F020 ish = a lot of this looks like noise arguments

%originally
%8051F078 => E6000000 00000000		F4000000 0707C03C
%8051F088 => E7000000 00000000

%green
%8051F078 => FA000000 00FA009C		(+4A8)		(actually 4B8?)
%8051F088 => FB000000 0087008C		(+4B8)

%dark
%8051F078 => FA000000 000200AC		(+4A8)
%8051F088 => FB000000 0001008C		(+4B8)


%It seems that the data is mostly made of command-like structures
%replacing arbitrary 8 byte sections with one of the blocks above will still change the color (and break other stuff)

%FA and FB have similar effects
%they control the two different colors

%F4 / F5 = uv multiplier setup? (can break the wedge shape)

%FC = render setup? (removing causes black breath)
%	there are a whole bunch of flags that creates weird effects
%FD = supplemental UV multiplier (causes vertical bars if removed)

%DF = fadeout setup?

%E6 and E7 = ??? (affects fadeout/opacity?)

%the top stuff controls the shape of the total effect, but seems to have no effect on the texture / noise thing going on




%how does the load effect function work?

%8005A564

%set S2 to the effect ID (originally A0)
%load a hardcoded pointer of 8007F210 into V1	
%multiply S2 by 0x18 (into V0)
%set S1 to pointer + V0 (which was 0x18 * id)
%set A0 to 0
%set S0 to 800A4000

%	Loop
%(V0) load from S0 (0 + effect table entry)
%andi by 1
%if it is 0, go to next iteration and increment A0
%check effect ID in V0 (4 + effect table entry)
%if it is equal to S2, escape the loop + check if A0 < 15 into V0

%increment A0
%check if A0 < 15 into V0
%if A0 < 15, go back to top of loop + increment S0 by 0x20

%if not 0, skip ahead past loading

%...then set up effect ID stuff





%To check
%381E00 - 385640
% = hp / fp regain numbers (not sure where palette is)

%354F60 - 355EE0
% = more code

%337FC0 - 339250
% = ??? (sparkle sprite??)

/%
#new:Data $NewEffectState
{
00000000
}

#new:Data $EffectPointer
{
00000000
}




#export:Function $SetEffectState
{
PUSH	  RA
LW        V0, C (A0)
JAL       ~Func:get_variable
LW        A1, 0 (V0)
ORI		  V0, V0, 8000
SAW		  V0, $NewEffectState
POP		  RA
JR        RA
ADDIU     V0, R0, 2
}
%/

%hooked over: code right before a jump table (script playeffect)
%set this up so that the upper 4 bytes are checked for later
%problem: it doesn't actually work (it tries some illegal memory stuff somewhere outside of the playeffect function)

/%
%V1 = effect ID
%V0 and S3 can be used
@Hook FCEE8		%FCC4C + 29C = FCEE8, 802D829C + 29C = 802D8538
{
	LIO		V0, $NewEffectState
	SRL		S3, V1, 10		%2 bytes
	BEQ		S3, R0, .store
	NOP
	ADDIU	S3, S3, 8000	%add a special flag so that the effect loading has the right ID
	.store
	SW		S3, 0 (V0)
	ANDI	V1, V1, FFFF	%get rid of the upper bytes (immedaite value applies to the lower bytes)	
	LW     	S3, 0 (S2)
	J		802D8540
	LW    	S1, 4 (S2)
}
%/
/%
  29C:  LW        S3, 0 (S2)
  2A0:  LW        S1, 4 (S2)
%/


/%
%end of playeffect
%add a 4000 flag to mark this as a stale value (and remove the 8000 flag)
@Hook FE05C		%802D96AC
{
	LAW		S8, $NewEffectState
	ANDI	S8, S8, 8000
	ORI		S8, S8, 4000
	LW      S8, 90 (SP)
	J		802D96B4
	LW      S7, 8C (SP)
}
%/

/%
 1410:  LW        S8, 90 (SP)
 1414:  LW        S7, 8C (SP)
%/

/%
%hooked over: setting up the effect ID (load effect)
%use this to set some flags for later
%S2 and V1 can be used since they get overwritten here or right after leaving here
@Hook 35968
{
	SW		S2, 20 (SP)		%hooked over 1
	DADDU	S2, A0, R0		%
	SRL		S2, S2, 10		%2 bytes
	LAW		V1, $NewEffectState
	ANDI	V1, V1 8000
	BNE		V1, R0, .skipstore
	NOP
	LIO		V1, $NewEffectState
	SW		S2, 0 (V1)
	.skipstore
	ANDI	A0, A0, FFFF	%get rid of the upper bytes (immedaite value applies to the lower bytes)
	J		8005A570
	DADDU	S2, A0, R0		%hooked over 2
}

%A0 and A1 get overwritten so they can be used here
%A3 = pointer to effect
@Hook 35A80
{
	LIO		A1, $EffectPointer
	SW		A3, 0 (A1)
	.no
	LW        A0, 10 (S1)	%hooked over 1
	J		8005A688
	LW        A1, 14 (S1)	%hooked over 2
}

%can use RA, S0, S1, S2
%others should be usable since this is the end of the effect function
@Hook 35AA4
{
	PUSH	T0, T1
	ADDIU	S1, R0, 73
	BNE		S1, S2, .nobolts
	NOP
	JAL		$ReplaceLightningBoltPalette
	NOP
	.nobolts
	POP		T0, T1
	LW		RA, 24 (SP)		%hooked over 1
	J		8005A6AC
	LW		S2, 20 (SP)		%hooked over 2
}




#new:Function $ReplaceLightningBoltPalette
{
	LAW		S0, $NewEffectState	
	ANDI	S0, S0, 7FFF
	ADDIU	S1, R0, 1
	LIO		S2, $BoltPinkPalette
	BEQ		S0, S1, .overwritepalette
	RESERVED
	ADDIU	S1, R0, 2
	LIO		S2, $BoltDarkPalette
	BEQ		S0, S1, .overwritepalette
	RESERVED
	%instead of doing nothing, just reset the pallete
	LIO		S2, $BoltOriginalPalette
	BEQ		R0, R0, .overwritepalette
	RESERVED
	%BEQ		R0, R0, .end
	%NOP
	.overwritepalette
	%pallete info starts at 90 + effect start
	LAW		S0, $EffectPointer
	ADDIU	S1, R0, 0
	.pinkloop
	SLTI	T0, S1, 10
	BEQ		T0, R0, .end
	NOP
	%now copy it over
	LH		T1, 0 (S2)
	SH		T1, 90 (S0)
	ADDIU	S0, S0, 2
	ADDIU	S2, S2, 2
	ADDIU	S1, S1, 2
	BEQ		R0, R0, .pinkloop
	NOP
	.end	
	JR		RA
	NOP
}
%/

/%
#new:Data $BoltOriginalPalette
{
	52943149 ECC3EE13 DB810000 00000000
}
%/
/%
Original palette
The rasters only use 0,1,2,3,4
	FALSE -> Format is 4 bits per color (for alpha only final bit is used)
Actually, it is 5 bits per color (why?) and 1 bit for alpha (it fills the space but this format feels cursed)

5294 3149 ECC3 EE13 DB81 0000 0000 0000


Where the 5 colors are
0 = (transparent)
1 = (outline)
2 = (appears on edge?)
3 = (inside of bolt)
4 = (appears on edge?)
%/


/%
#new:Data $BoltPinkPalette
{
	31083109 C4DFDCF5 D29D0000 00000000
}
%/
/%
Pink palette
50, 33, 33, 0 = 00110 + 00100 + 00100 + 0 = 0011 0001 0000 1000 = 3108
50, 33, 33, 1 = 00110 + 00100 + 00100 + 1 = 0011 0001 0000 1000 = 3109
195, 88, 127, 1 = 11000 + 01011 + 01111 + 1 = 1100 0010 1101 1111 = C4DF
221, 158, 210, 1 = 11011 + 10011 + 11010 + 1 = 1101 1100 1111 0101 = DCF5
180, 88, 105, 1 = 10110 + 01010 + 01101 + 1 = 1011 0010 1001 1011 = D29D
%/

/%
#new:Data $BoltDarkPalette
{
	30903091 60E78367 7A270000 00000000
}
%/
/%
Dark palette
51, 17, 68 = 00110 + 00010 + 01000 + 0 = 0011 0000 1001 0000 = 3090
51, 17, 68 = 00110 + 00010 + 01000 + 1 = 0011 0000 1001 0001 = 3091
100, 27, 159 =  01100 + 00011 + 10011 + 1 = 0110 0000 1110 0111 = 60E7
134, 106, 159 = 10000 + 01101 + 10011 + 1 = 1000 0011 0110 0111 = 8367
120, 67, 159 = 01111 + 01000 + 10011 + 1 = 0111 1010 0010 0111 = 7A27
%/

%store the palettes inside the spark data for later
%No don't
/%
@Data 3E0940	<-- bad, this is in the effect code
{	%Palettes have 16 colors I think, so add some 0s in between
	31083109 C4DFDCF5 D29D0000 00000000
	00000000 00000000 00000000 00000000
	30903091 60E78367 7A270000 00000000
	00000000 00000000 00000000 00000000
}
%/




%stuff to replace in the breath data

%no need to mess with the effect data itself, there is actually some parameters that control the color

%(C + return value of internal effect spawn function) -> (see below for real addresses)
%Problem is that a special, difficult to find function sets the colors after spawning the effect and returning from the PlayEffect function


%function at 80235128 / 6609D0 (it only appears sometimes and moves around based on available memory)
%	the game uses a JALR to jump to the function so there is no hardcoded address :(
%	even worse, the data I found is not actually for the function so the actual code is somehow obfuscated

%	well I feel stupid now
%	it was a bpat function that uses the effect pointer to change some values
%	Which means that trying to overwrite the palette here is entirely redundant! Wheeee!

%8023513C / 6609E4
%80235140
/%
@Hook 6609E4
{
	LAW		V1, $NewEffectState
	ANDI	V1, V1, 7FFF
	BEQ		V1, R0, .original
	NOP
	ADDIU	A0, R0, 1
	BEQ		V1, A0, .green
	NOP
	ADDIU	A0, R0, 2
	BEQ		V1, A0, .dark
	NOP
	BEQ		R0, R0, .original
	NOP
	.green
	%Green						00AC5A and 007429
	LW		V1, C (V0)
	ADDIU	A0, R0, 00			%R
	SW		A0, 18 (V1)
	LW		V1, C (V0)
	ADDIU	A0, R0, AC			%G
	SW		A0, 1C (V1)			
	LW		V1, C (V0)
	ADDIU	A1, R0, 5A			%B
	SW		A1, 20 (V1)
	LW		A0, C (V0)
	ADDIU	V1, R0, 00
	SW		V1, 28 (A0)			%R 2
	LW		A0, C (V0)
	ADDIU	V1, R0, 74			%G 2
	SW		V1, 2C (A0)
	LW		V1, C (V0)
	ADDIU	A1, R0, 29			%B 2	
	SW		A1, 30 (V1)			
	LW		RA, 10 (SP)
	ADDIU	V0, R0, 2			%return 2
	JR		RA
	ADDIU	SP, SP, 18
	.dark
	%Black/gray					666B71 and 3F4246
	LW		V1, C (V0)
	ADDIU	A0, R0, 66			%R
	SW		A0, 18 (V1)
	LW		V1, C (V0)
	ADDIU	A0, R0, 6B			%G
	SW		A0, 1C (V1)			
	LW		V1, C (V0)
	ADDIU	A1, R0, 71			%B
	SW		A1, 20 (V1)
	LW		A0, C (V0)
	ADDIU	V1, R0, 3F
	SW		V1, 28 (A0)			%R 2
	LW		A0, C (V0)
	ADDIU	V1, R0, 42			%G 2
	SW		V1, 2C (A0)
	LW		V1, C (V0)
	ADDIU	A1, R0, 46			%B 2	
	SW		A1, 30 (V1)			
	LW		RA, 10 (SP)
	ADDIU	V0, R0, 2			%return 2
	JR		RA
	ADDIU	SP, SP, 18
	.original
	SAW		R0, $NewEffectState
	LW		V1, C (V0)
	J		80235144
	ADDIU	A0, R0, F8
}
%/



%Keeping pieces of the old system for reference

%so creating new functions makes the game just die
%It probably has to do with how the return statement is different (immediately calls the E0XXXXXX region code for the effect)
%better explanation: it uses stack arguments

/%
#export:Data $LightningBoltPalette
{
00000000
}


@Hook 4D7CC
{
	LAW			A0, $LightningBoltPalette
	SLL			A0, A0, 10
	ADDIU		A0, A0, 0073
	SWC1		F16, 28 (SP)
	J			800723D4
	SW			RA, 2C (SP)
}

@Function 4D7D8
{
	NOP
}

@Hook 4D7DC
{
	SAW			R0, $LightningBoltPalette
	LW			A0, 10 (SP)
	J			800723E4
	LW			A1, 10 (SP)
}
%/

/%
code of 800723B0 / 4D7B0
0 	ADDIU		SP, SP, -30
4 	SW			A0, 10 (SP)
8 	SW			A1, 14 (SP)
C 	SW			A2, 18 (SP)
10 	SW			A3, 1C (SP)
14 	SWC1		F12, 20 (SP)
18 	SWC1		F14, 24 (SP)
1C 	SWC1		F16, 28 (SP)
20 	SW			RA, 2C (SP)
24 	JAL			8005A564
28 	ADDIU		A0, R0, 0073
2C 	LW			A0, 10 (SP)
30 	LW			A1, 14 (SP)
34 	LW			A2, 18 (SP)
38	LW			A3, 1C (SP)
3C	LWC1		F12, 20 (SP)
40	LWC1		F14, 24 (SP)
44	LWC1		F16, 28 (SP)
48	LW			RA, 2C (SP)
4C	ADDIU		SP, SP, 30
50	LUI			AT, 8008
54	LW			AT, FCD8 (AT)
58	JR			AT
5C	NOP
%/

%$LightningBoltPalette

%recreate the functions but with different colors
%problem: it looks like the internal functions mess with the stack so this doesn't actually work
%more likely problem: A0 is used as a function argument
%best explanation is that it uses stack arguments
/%
#export:Function $CreatePinkBolts
{
PUSH	RA
ADDIU	T0, R0, 1
SAW		T0, $LightningBoltPalette
JAL		800723B0
NOP
POP		RA
JR		RA
NOP
}

#export:Function $CreateDarkBolts
{
PUSH	RA
ADDIU	T0, R0, 2
SAW		T0, $LightningBoltPalette
JAL		800723B0
NOP
POP		RA
JR		RA
NOP
}
%/

%

%new mystery to solve: how does the code access the palette / raster data
%E00E6000
%	^This function has the return statement that goes back to normal code, therefore the code to find the raster stuff must be somewhere in here

%Uses stuff around 800A4000 to find the data

%Right after running the effect code, you can find the pointer effect data at... (?)
%		(pointer may be around 8051A130)
%	800A401c	
%		Around here is pointers to other important effect stuff (effect update functions?) (effect types?)

%Effect data entry struct (example)
/%
		 00000001 00000073 00000001			<-- Effect type information (is subtype here?)
00000003 E00E6184 E00E64D4 80059C80			<-- (80059C80) seems like a constant pointer since all the effects have it
8051A130									<-- Effect data
%/

%actual effect struct is around 80519440 ish (*It seems that the heap it gets put onto is not specifically for effect data or effect structs)
%								actually 80516000



%Need to add another hook to fix the bugged things that the new types do
%	Problem: half of the bolts don't show up with different subtype

%At the top of effect code, S3 is set to subtype (so there are probably a lot more things that check subtype ): )

%na, just check this one thing

%E00E60E0
@Function 3E0A08
{
	LI		AT, $3E0A08Hook			
	JR		AT
	NOP	
}

/%
So I don't have any function named $3E0A10Hook

@Function 3E0A08
{
	LI		AT, $3E0A10Hook
	JR		AT
	NOP	
}
%/

/%
#new:Data $BoltSubtype
{
	00000000
}
%/

%There is stuff that uses AT right after this so I should avoid putting this code on top of that
#new:Function $3E0A08Hook
{
	SLL		V0, S3, 2
	ANDI	V0, V0, 0007	%Get rid of higher bits (2 * 4 = 8, so get rid of everything above that)
	%Hooked over
	SWC1	F24, C (V1)
	LWC1	F0, 68 (SP)
	SWC1	F0, 34 (V1)
	%
	LI		AT, E00E60E8
	JR		AT
	NOP
}




%E00E61D0		
@Function 3E0B00
{
	LI		AT, $3E0B00Hook
	JR		AT
	NOP	
}

/%
#new:Data $BoltSubtype
{
	00000000
}
%/

#new:Function $3E0B00Hook
{
	%Set subtype stuff ((0,1) + 2 = pink, (0,1) + 4 = dark)	
	LW		S3, 0 (A1)				%Load subtype
	%SAW	S3, $BoltSubtype	
	ANDI	S3, S3, 0001			%get rid of the other data?
	%Hooked over stuff
	BEQ		V0, R0, .dobranch
	ADDIU	V0, R0, FFEF
	AND		V0, V1, V0
	LI		AT, E00E61E0	%+ 10 (4 instructions)
	JR		AT
	NOP
	.dobranch
	LI		AT, E00E61EC	%Post branch
	JR		AT
	NOP
}

%there probably is a better way of doing this but if it works it works
#new:Data $PinkBoltData
{
	00000000 00000000 00000000 00000000
	00000000 01111000 00000011 11231000
	00001112 33311000 00001333 33110000
	00001433 31100000 00001133 31100000
	00000113 33110000 00001123 33110000
	00001433 21100000 00011334 11000000
	00013211 10000000 00011110 00000000
	00000000 00000000 00000000 00000000
	31083109 C4DFDCF5 D29D0000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	E7000000 00000000 D7000002 FFFFFFFF
	E3000A01 00000000 E3000C00 00080000
	E3000D01 00000000 E3000F00 00000000
	E3001001 00008000 E3001201 00002000
	E3001402 00000C00 FCFFFFFF FFFCF279
	E200001C 00551238 E3001001 00008000
	FD100000 09000080 E8000000 00000000
	F5000100 07000000 E6000000 00000000
	F0000000 0703C000 E7000000 00000000
	FD480007 09000000 F5480200 07090641
	E6000000 00000000 F4000000 0701E03C
	E7000000 00000000 F5400200 00090641
	F2000000 0003C03C D9FDF9FF 00000000
	D9FFFFFF 00200005 DF000000 00000000
	FFF8FFF8 00000000 00000000 000000FF
	0008FFF8 00000000 04000000 000000FF
	00080008 00000000 04000400 000000FF
	FFF80008 00000000 00000400 000000FF
	01004008 09000360 06000204 00000406
	E7000000 00000000 DF000000 00000000
}

#new:Data $DarkBoltData
{
	00000000 00000000 00000000 00000000
	00000000 01111000 00000011 11231000
	00001112 33311000 00001333 33110000
	00001433 31100000 00001133 31100000
	00000113 33110000 00001123 33110000
	00001433 21100000 00011334 11000000
	00013211 10000000 00011110 00000000
	00000000 00000000 00000000 00000000
	30903091 60E78367 7A270000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000
	E7000000 00000000 D7000002 FFFFFFFF
	E3000A01 00000000 E3000C00 00080000
	E3000D01 00000000 E3000F00 00000000
	E3001001 00008000 E3001201 00002000
	E3001402 00000C00 FCFFFFFF FFFCF279
	E200001C 00551238 E3001001 00008000
	FD100000 09000080 E8000000 00000000
	F5000100 07000000 E6000000 00000000
	F0000000 0703C000 E7000000 00000000
	FD480007 09000000 F5480200 07090641
	E6000000 00000000 F4000000 0701E03C
	E7000000 00000000 F5400200 00090641
	F2000000 0003C03C D9FDF9FF 00000000
	D9FFFFFF 00200005 DF000000 00000000
	FFF8FFF8 00000000 00000000 000000FF
	0008FFF8 00000000 04000000 000000FF
	00080008 00000000 04000400 000000FF
	FFF80008 00000000 00000400 000000FF
	01004008 09000360 06000204 00000406
	E7000000 00000000 DF000000 00000000
}

%E00E65B4 = where the effect data is



@Function 3E0EE4
{
	LI		AT, $3E0EE4Hook
	JR		AT
	NOP	
}


#new:Function $3E0EE4Hook
{
	%Load the right thing
	PUSH	V1, S0, S1, AT
	LW		S1, 0 (S4)		%Need to get access to this from the effect struct itself
	ANDI	S1, S1, 0006
	BEQ		S1, R0, .end
	LW		V0, 1C (V1)		%Pointer
	LI		S0, 2
	LI		V0, $PinkBoltData
	BEQ		S1, S0, .end
	NOP
	LI		V0, $DarkBoltData
	.end
	POP		V1, S0, S1, AT	%might want AT too
	%Hooked over stuff
	%LW		V0, 1C (V1)		%Pointer
	LUI		V1, 8000
	ADDU	V0, V0, V1		%This just gets rid of the 80000000
	LUI		V1, 800B
	LI		AT, E00E65C4
	JR		AT
	NOP
}

%Broken setup (Causes visual craziness)
/%
@Function 3E0EE4
{
	LI		AT, $3E0EE4Hook
	JR		AT
	NOP	
}

#new:Function $3E0EE4Hook
{
	%Load the right thing
	PUSH	V0, V1, S0, S1			
	LAW		S1, $BoltSubtype
	ANDI	S1, S1, 0006
	BEQ		S1, R0, .end
	LW		V0, 1C (V1)		%Pointer
	LI		S0, 2
	LI		V0, $PinkBoltData
	BEQ		S1, S0, .end
	NOP
	LI		V0, $DarkBoltData
	.end
	POP		V0, V1, S0, S1			%Cause of problems: V0 is reset (but it is a value that doesn't crash the game somehow)
	%Hooked over stuff
	%LW		V0, 1C (V1)		%Pointer
	LUI		V1, 8000
	ADDU	V0, V0, V1		%This just gets rid of the 80000000
	LUI		V1, 800B
	LI		AT, E00E65C4
	JR		AT
	NOP
}
%/





%E00E6594
@Function 3E0EC4 %3E0930 + 594
{
	DADDU 	S3, R0, R0		%get rid of this since it doesn't really do anything
}




%Bonus data to check
%E00E6880 (+ 4?)
%	Loads specific data for each subtype (but they are the same though?)
%		Data loaded = 090003A0

%E00E6888 (+ 4?)
%	Loads specific data for each subtype (but they are the same though?)
%		Data loaded = 09000280



%		Looks like the pointer gets put in the stack by the end (don't use these)
%	800AE468
%	800AE488
%	800AE4B0






%Messing with the debuff color effect
%Debuff colors are spawned with $Function_80271280 (?)
%after calling 80070AF0 it messes with values to determine the color

%To do: figure out what other effects use supplemental data

/%
%from grobyc

% Green Shy Guy Poison Effect Function
#new:Function $Function_80271328
{
    0:  ADDIU     SP, SP, FFE8
    4:  COPY      V0, A0
    8:  SW        RA, 10 (SP)
    C:  LWC1      F0, 84 (V0)
   10:  CVT.S.W   F0, F0
   14:  MFC1      A1, F0
   18:  LWC1      F0, 88 (V0)
   1C:  CVT.S.W   F0, F0
   20:  MFC1      A2, F0
   24:  LWC1      F0, 8C (V0)
   28:  CVT.S.W   F0, F0
   2C:  MFC1      A3, F0
   30:  JAL       80070AF0
   34:  ADDIU     A0, R0, 2   % Red?
   38:  LW        A0, C (V0)
   3C:  ADDIU     V1, R0, 3C  % Blue?
   40:  SB        V1, 38 (A0)						%color byte 1?
   44:  LW        A0, C (V0)
   48:  ADDIU     V1, R0, A0  % Green?
   4C:  SB        V1, 39 (A0)						%color byte 2?
   50:  LW        V1, C (V0)
   54:  SB        R0, 3A (V1)						%color byte 3?
   58:  LW        A0, C (V0)
   5C:  ADDIU     V1, R0, 5A  % more Color?
   60:  SB        V1, 3B (A0)						%color byte 4?
   64:  LW        A0, C (V0)
   68:  ADDIU     V1, R0, F0  % more Color?
   6C:  SB        V1, 3C (A0)						%color byte 5?
   70:  LW        V1, C (V0)
   74:  SB        R0, 3D (V1)						%color byte 6?
   78:  LW        RA, 10 (SP)
   7C:  ADDIU     V0, R0, 2   % more Color?			return 2
   80:  JR        RA
   84:  ADDIU     SP, SP, 18
}
%/

%the values are checked every frame (gpu stuff?)

%Format = 1 byte per color

%Second set of 3 bytes seems to not do anything

%dizzy uses: (Default)
%	C815D4C8 15D4

%paralyze uses:
%	C87800EA C100

%stop uses:
%	CD0028CD 20F2

%first value influences main color




%Spiny surge fix
%if lifetime is capped, instead force it to be 80

%E00C8250 / 3CF5F0

%Original
%SLTI		V0, V1, 3E8
%BEQZ		V0, E00C8260		(branch +C)
%ADDIU		V0, V1, FFFF
%SW			V0, 28 (A1)

%LW			V0, 2C (A1)			(branches to here)

@Function 3CF5F0
{
	LI		AT, $3CF5F0Hook
	JR		AT
	NOP
}

#new:Function $3CF5F0Hook
{
	SLTI	V0, V1, 3E8
	BEQ		V0, R0, .dobranch
	ADDIU	V0, V1, FFFF
	SW		V0, 28 (A1)
	LI		AT, E00C8260
	JR		AT
	NOP
	.dobranch
	ORI		V0, R0, 80
	SW		V0, 28 (A1)
	LI		AT, E00C8260
	JR		AT
	NOP
}



%Messing with fire color (the fire breath from bowser)


%Found some RGB values
%(pointer?) + 80, 84, 88
%defaults to F3, 30, 0

%Found a function to do that




%Making the health / flower colors higher
%look at the 5 digit printing code I made for 5 digit hp
%	Some similarities but a lot of diffefrences

%well I am lazy so I'll do this later or not at all

%Original code
%S7 = number
/%
	(E0080898)
	SLTI		V0, S7, A
	BEQZ		V0, E00808FC
	SW			S3, 10 (A1)
	LW			T2, DC (SP)			%nonzero value here causes first digit to be "-"
	BNEZ		T2, E0080900
	LUI			V0, 6666
	LUI			A0, 900
	ADDIU		A0, A0, 3470
	ADDIU		V0, A1, 20
	SW			V0, 0 (S0)
	SLL			V0, S7, 2
	LUI			T2, E008
	ADDIU		T2, T2, 0AC0
	ADDU		V0, V0, T2
	SW			S3, 18 (A1)
	LW			V1, 0 (V0)
	ADDIU		V0, A1, 28
	SW			V0, 0 (S0)
	SW			S3, 20 (A1)
	BNEZ		S4, E00808F4
	SW			V1, 1C (A1)
	LUI			A0, 900
	ADDIU		A0, A0, 3410
	J			E0080A14
	SW			A0, 24 (A1)
	LUI			V0, 6666
	ORI			V0, V0, 6667
	MULT		S7, V0
	ADDIU		T1, R0, A
	SRA			V0, S7, 31
	MFHI		T2
	SRA			V1, T2, 2
	SUBU		V0, V1, V0
	DADDU		A0, V0, R0
	SLL			V0, A0, 2
	ADDU		V0, V0, A0
	SLL			V0, V0, 1
	LW			T2, DC (SP)
	BNEZ		T2, E008093C
	SUBU		V0, S7, V0
	DADDU		T1, A0, R0
	LUI			T0, 900
	ADDIU		T0, T0, 34B0
	SLL			V0, V0, 2
	LUI			T2, E008
	ADDIU		T2, T2, 0AC0
	LW			A2, 0 (S0)
	ADDU		V0, V0, T2
	DADDU		A0, A2, R0
	ADDIU		A2, A2, 8
	SW			A2, 0 (S0)
	SW			S3, 0 (A0)
	LW			V1, 0 (V0)
	ADDIU		V0, A2, 8
	SW			V0, 0 (S0)
	SW			V1, 4 (A0)
	BNEZ		S4, E0080988
	SW			S3, 0 (A2)
	LUI			T0, 900
	ADDIU		T0, T0, 3450
	LUI			A3, 900
	ADDIU		A3, A3, 3490
	SLL			V0, T1, 2
	LUI			T2, E008
	ADDIU		T2, T2, 0AC0
	LW			A1, 0 (S0)
	ADDU		V0, V0, T2
	SW			T0, 4 (A2)
	DADDU		A0, a1, r0
	ADDIU		A1, A1, 8
	SW			A1, 0 (S0)
	SW			S3, 0 (A0)
	LW			V1, 0 (V0)
	ADDIU		V0, A1, 8
	SW			V0, 0 (S0)
	SW			V1, 4 (A0)
	BNEZ		S4, E00809D8
	SW			S3, 0 (A1)
	LUI			A3, 900
	ADDIU		A3, A3, 3430
	J			E0080A14
	SW			A3, 4 (A1)
	LW			V1, 0 (S0)
	LUI			V0, 900
	ADDIU		V0, V0, 33F0
	DADDU		A0, V1, R0
	ADDIU		V1, V1, 8
	SW			V1, 0 (S0)
	SW			V0, 4 (A0)
	ADDIU		V0, V1, 8
	SW			S3, 0 (A0)
	ADDIU		T2, R0, 40
	SW			V0, 0 (S0)
	SW			FP, 0 (V1)
	SW			T2, 4 (V1)	
	(E0080A14)	LW			V0, 0 (S0)
%/


%fire colors (also the size scaling too)
/%
#new:Function $Function_8021CF54
{
    0:  ADDIU        SP, SP, FFE8
    4:  SW            RA, 10 (SP)
    8:  LW            V0, C (A0)
    C:  JAL            ~Func:get_variable
   10:  LW            A1, 0 (V0)
   14:  LW            V1, C (V0)
   18:  LIO            AT, 3D23D70A
   20:  MTC1        AT, F0
   24:  NOP
   28:  SWC1        F0, 38 (V1)
   2C:  SWC1        F0, 30 (V1)
   30:  LW            V1, C (V0)
   34:  LIF            F0, 1.875
   3C:  NOP
   40:  SWC1        F0, 34 (V1)
   44:  LW            V1, C (V0)
   48:  LIO            AT, 3D4CCCCD
   50:  MTC1        AT, F0
   54:  NOP
   58:  SWC1        F0, 3C (V1)
        %offsets 64, 68, 6C control a different color (the middle color?)        (original = 000000FF 000000AA 0000002A)        Note that these colors sometimes influence the colors of the other fireballs
        LI            AT, FF
        SW            AT, 64 (V1)
        LI            AT, 90
        SW            AT, 68 (V1)
        LI            AT, FF
        SW            AT, 6C (V1)
        %offsets 70, 74, 78 for r g and b (of the boundary color?)    (original = 000000F3 00000030 00000000)
        LI            AT, E0
        SW            AT, 70 (V1)
        LI            AT, 0
        SW            AT, 74 (V1)
        LI            AT, E0
        SW            AT, 78 (V1)
   5C:  LW            RA, 10 (SP)
   60:  ADDIU        V0, R0, 2
   64:  JR            RA
   68:  ADDIU        SP, SP, 18
}
%/

%breath colors
%see crystal king scripts
/%
%change the values to change the colors
#new:Function $Function_SetBreathPalette        %$Function_80218280
{
    0:  ADDIU        SP, SP, FFE8
    4:  SW            RA, 10 (SP)
    8:  LW            V0, C (A0)
    C:  JAL            ~Func:get_variable
   10:  LW            A1, 0 (V0)
   14:  LW            V1, C (V0)
   18:  ADDIU        A0, R0, 66                %R
   1C:  SW            A0, 18 (V1)
   20:  LW            V1, C (V0)
        ADDIU        A0, R0, 6B                %G
   24:  SW            A0, 1C (V1)
   28:  LW            V1, C (V0)
   2C:  ADDIU        A1, R0, 71                %B
   30:  SW            A1, 20 (V1)
   34:  LW            A0, C (V0)
   38:  ADDIU        V1, R0, 3F                %R 2
   3C:  SW            V1, 28 (A0)
   40:  LW            A0, C (V0)
   44:  ADDIU        V1, R0, 42                %G 2
   48:  SW            V1, 2C (A0)
   4C:  LW            V1, C (V0)
        ADDIU        A1, R0, 46                %B 2
   50:  SW            A1, 30 (V1)
   54:  LW            RA, 10 (SP)
   58:  ADDIU        V0, R0, 2
   5C:  JR            RA
   60:  ADDIU        SP, SP, 18
}
%/


%Snaking static rgb vals

%pointer + 10 = lifetime timer (Values above 255 seem to break the timer and make the static last forever, which is useful for testing)
%pointer + 14 = timer going up

%pointer + 18, 1C, 20 = RGB (the secondary color?) (Default = 000000FF 000000E6 00000000)
%pointer + 24 = alpha (controls total alpha for the static)

%pointer + 28, 2C, 30 = RGB 2 (the primary color) (Default = 000000FF 000000FF 000000FF)

/%
#new:Function $Function_SetStaticColors
{
		PUSH		RA, S0
    8:  LW			V0, C (A0)
    C:  JAL			~Func:get_variable
   10:  LW			A1, 0 (V0)
   14:  LW			V1, C (V0)
   18:  ADDIU		A1, R0, FF			%R
   1C:  SW			A1, 18 (V1)
   20:  LW			V1, C (V0)
   18:  ADDIU		A1, R0, 77			%G
   24:  SW			A1, 1C (V1)
   28:  LW			V1, C (V0)
   18:  ADDIU		A1, R0, F7			%B
   2C:  SW			A1, 20 (V1)
   30:  LW			A0, C (V0)
   34:  ADDIU		V1, R0, FF			%R 2
   38:  SW			V1, 24 (A0)
   3C:  LW			A0, C (V0)
   40:  ADDIU		V1, R0, FF			%G 2
   44:  SW			V1, 28 (A0)
   48:  LW			V1, C (V0)
   18:  ADDIU		A1, R0, FF			%B 2
   4C:  SW			A1, 2C (V1)
		.end
   54:  ADDIU		V0, R0, 2
		JPOP		RA, S0
}
%/

%lightning effect (5E)
%lightning effect color swapping (see crystal king code)
/%
#new:Function $Function_SetLightningPalette
{
		PUSH		RA, S0
    8:  LW			V0, C (A0)
    C:  JAL			~Func:get_variable
   10:  LW			A1, 0 (V0)
   14:  LW			V1, C (V0)
   18:  ADDIU		A1, R0, FF			%R
   1C:  SW			A1, 30 (V1)
   20:  LW			V1, C (V0)
   18:  ADDIU		A1, R0, FF			%G
   24:  SW			A1, 34 (V1)
   28:  LW			V1, C (V0)
   18:  ADDIU		A1, R0, FF			%B
   2C:  SW			A1, 38 (V1)
   30:  LW			A0, C (V0)
   34:  ADDIU		V1, R0, C8			%R 2
   38:  SW			V1, 40 (A0)
   3C:  LW			A0, C (V0)
   40:  ADDIU		V1, R0, F0			%G 2
   44:  SW			V1, 44 (A0)
   48:  LW			V1, C (V0)
   18:  ADDIU		A1, R0, FF			%B 2
   4C:  SW			A1, 48 (V1)
   54:  ADDIU		V0, R0, 2
		JPOP		RA, S0
}
%/

%shockwave effect
%! does not set *VarF correctly (no returned effect table struct)
%accessible values are not very useful (things like start position and current position only)

%8053A840



%lighting FX
%creates 2 different effects?
%	the bolt and the big shockwave thing

%90 + first pointer = colors of shockwave (default = 000000FF 000000FF 00000000 000000FF 000000FF 000000FF)






%moving cloud colors
%0x74

%default = 000000D7 000000D7 000000B9
%			...
%			000000C8 00000064 000000FF

/%
#new:Function $Function_SetMovingCloudPalette
{
		PUSH		RA, S0
    8:  LW			V0, C (A0)
    C:  JAL			~Func:get_variable
   10:  LW			A1, 0 (V0)
   14:  LW			V1, C (V0)
   18:  ADDIU		A1, R0, FF			%R
   1C:  SW			A1, 24 (V1)
   20:  LW			V1, C (V0)
   18:  ADDIU		A1, R0, FF			%G
   24:  SW			A1, 28 (V1)
   28:  LW			V1, C (V0)
   18:  ADDIU		A1, R0, FF			%B
   2C:  SW			A1, 2C (V1)
   30:  LW			A0, C (V0)
   34:  ADDIU		V1, R0, DC			%R 2
   38:  SW			V1, 34 (A0)
   3C:  LW			A0, C (V0)
   40:  ADDIU		V1, R0, F5			%G 2
   44:  SW			V1, 38 (A0)
   48:  LW			V1, C (V0)
   18:  ADDIU		A1, R0, FF			%B 2
   4C:  SW			A1, 3C (V1)
   54:  ADDIU		V0, R0, 2
		JPOP		RA, S0
}
%/


%d down effect palette
%at 50 + pointer there are 2 colors (rgb) (default is a greenish and a whitish one)
%one byte per color by the way
%00FF7A F0FFFA

%be careful, the effect spawning for the hammer creates the effect at an angle while the effect spawning for the jump puts it normally


%uses 3 var inputs for positions
/%
#new:Function $Function_ChillWaveEffect
{
    0:  ADDIU     SP, SP, FFD8
    4:  SW        S1, 1C (SP)
    8:  COPY      S1, A0
    C:  SW        RA, 24 (SP)
   10:  SW        S2, 20 (SP)
   14:  SW        S0, 18 (SP)
   18:  LW        S0, C (S1)
   1C:  LW        A1, 0 (S0)
   20:  JAL       ~Func:get_variable
   24:  ADDIU     S0, S0, 4
   28:  LW        A1, 0 (S0)
   2C:  ADDIU     S0, S0, 4
   30:  COPY      A0, S1
   34:  JAL       ~Func:get_variable
   38:  COPY      S2, V0
   3C:  COPY      A0, S1
   40:  LW        A1, 0 (S0)
   44:  JAL       ~Func:get_variable
   48:  COPY      S0, V0
   4C:  LW        V1, AC (S1)
   50:  BNE       V1, R0, .o90
   54:  CLEAR     A0
   58:  MTC1      S2, F0
   5C:  NOP
   60:  CVT.S.W   F0, F0
   64:  MFC1      A1, F0
   68:  MTC1      S0, F0
   6C:  NOP
   70:  CVT.S.W   F0, F0
   74:  MFC1      A2, F0
   78:  MTC1      V0, F0
   7C:  NOP
   80:  CVT.S.W   F0, F0
   84:  MFC1      A3, F0
   88:  BEQ       R0, R0, .oC0
   8C:  LI        A0, 1
        .o90
   90:  MTC1      S2, F0
   94:  NOP
   98:  CVT.S.W   F0, F0
   9C:  MFC1      A1, F0
   A0:  MTC1      S0, F0
   A4:  NOP
   A8:  CVT.S.W   F0, F0
   AC:  MFC1      A2, F0
   B0:  MTC1      V0, F0
   B4:  NOP
   B8:  CVT.S.W   F0, F0
   BC:  MFC1      A3, F0
        .oC0
   C0:  JAL       80070B50
   C4:  SW        R0, 10 (SP)
		LW			V1, C (V0)
		ADDIU		A1, R0, 00			%R
		SB			A1, 50 (V1)
		LW			V1, C (V0)
		ADDIU		A1, R0, FF			%G
		SB			A1, 51 (V1)
		LW			V1, C (V0)
		ADDIU		A1, R0, FF			%B
		SB			A1, 52 (V1)
		LW			A0, C (V0)
		ADDIU		V1, R0, D0			%R 2
		SB			V1, 53 (A0)
		LW			A0, C (V0)
		ADDIU		V1, R0, FF			%G 2
		SB			V1, 54 (A0)
		LW			V1, C (V0)
		ADDIU		A1, R0, FF			%B 2
		SB			A1, 55 (V1)		
   C8:  LW        RA, 24 (SP)
   CC:  LW        S2, 20 (SP)
   D0:  LW        S1, 1C (SP)
   D4:  LW        S0, 18 (SP)
   D8:  LI        V0, 2
   DC:  JR        RA
   E0:  ADDIU     SP, SP, 28
}
%/


%big lightning wave
%	(*not the real name)
%	(*its one of the turbo charge / mega shock effects )
%80071990
%color is at 18, 1C, 20, 24 (RGBA with 1 word per color)
%30 = number of bolt layers + 1 (so 0 creates 1 set of bolts while 1 = 2 sets of bolts)



%big explosion shockwave
%1C, 20, 24 = x,y,z base scale
%50 + pointer has 2 colors (default = FF0000FF C864)
%1 byte per color
/%
#new:Function $Function_SetBlastPalette        
{
    0:  ADDIU        SP, SP, FFE8
    4:  SW            RA, 10 (SP)
    8:  LW            V0, C (A0)
    C:  JAL            ~Func:get_variable
   10:  LW            A1, 0 (V0)
   14:  LW            V1, C (V0)
   18:  ADDIU        A0, R0, D0                %R
   1C:  SW            A0, 50 (V1)
   20:  LW            V1, C (V0)
        ADDIU        A0, R0, 00                %G
   24:  SW            A0, 51 (V1)
   28:  LW            V1, C (V0)
   2C:  ADDIU        A1, R0, D0                %B
   30:  SW            A1, 52 (V1)
   34:  LW            A0, C (V0)
   38:  ADDIU        V1, R0, FF                %R 2
   3C:  SW            V1, 53 (A0)
   40:  LW            A0, C (V0)
   44:  ADDIU        V1, R0, B0                %G 2
   48:  SW            V1, 54 (A0)
   4C:  LW            V1, C (V0)
        ADDIU        A1, R0, FF                %B 2
   50:  SW            A1, 55 (V1)
   54:  LW            RA, 10 (SP)
   58:  ADDIU        V0, R0, 2
   5C:  JR            RA
   60:  ADDIU        SP, SP, 18
}
%/



%water beam
%	800719F0
%pointer + 34, 38, 3C, 40, 44, 48, 4C
%first 4 control the inner color (4th is alpha for the whole beam)
%last 3 control second color (outline color)

%Default: 
%	      000000D2 000000E6 000000FF
%000000C8 00000000 0000001E 000000CD

/%
#new:Function $Function_SetWaterBeamPalette        
{
    0:  ADDIU        SP, SP, FFE8
    4:  SW            RA, 10 (SP)
    8:  LW            V0, C (A0)
    C:  JAL            ~Func:get_variable
   10:  LW            A1, 0 (V0)
   14:  LW            V1, C (V0)
   18:  ADDIU        A0, R0, D2                %R
   1C:  SW            A0, 34 (V1)
   20:  LW            V1, C (V0)
        ADDIU        A0, R0, FF                %G
   24:  SW            A0, 38 (V1)
   28:  LW            V1, C (V0)
   2C:  ADDIU        A1, R0, E6                %B
   30:  SW            A1, 3C (V1)
   34:  LW            A0, C (V0)
   38:  ADDIU        V1, R0, 00                %R 2
   3C:  SW            V1, 44 (A0)
   40:  LW            A0, C (V0)
   44:  ADDIU        V1, R0, CD                %G 2
   48:  SW            V1, 48 (A0)
   4C:  LW            V1, C (V0)
        ADDIU        A1, R0, 1E                %B 2
   50:  SW            A1, 4C (V1)
   54:  LW            RA, 10 (SP)
   58:  ADDIU        V0, R0, 2
   5C:  JR            RA
   60:  ADDIU        SP, SP, 18
}
%/



%internal waterfall
%(one of the water block effects)
%800719F0

%pointer + 34, 38, 3C, 40, 44, 48, 4C
%first 4 control the color of the end of the waterfall (4th is alpha for the whole beam)
%last 3 control the color of the start of the waterfall

%default:
%000000D2 000000E6 000000FF
%000000FF 00000000 0000001E 000000CD




%water block
%the actual cube itself
%it lasts for a while

%18 + pointer = cube red
%1C + pointer = cube green	<-- NOTE: This goes up and down in a cycle
%20 + pointer = cube blue
%(Can't find eye color, it might not be here)

%24 + pointer = eye alpha?	(default is FF)
%28 + pointer = cube alpha? (default is FF) (remember that the cube is not opaque)



%(one of the tidal wave effects) (the water from sushie's mouth)
%80071B10		(Effect 5C)
%	subtype 1 = small waterfall
%	Normally, it loads A1,A2,A3 from some data structure (might be the part data structure)
%	10 + SP is set to a float value	(= 3F800000 ?)
%	14 + SP is set to 0
%	The effect pointer is stored for later modifications (moving it to the right place and angle)

%
%default color
%18 + pointer to 30 (rgba and rgb)
%				   00000046 000000B4
%000000FF 000000FF 000000FF 000000FF
%000000FF


%(another one) (the big screen covering one)
%80071B70		
%created once per frame?
%4,8,C + pointer = x,y,z (Default is hardcoded to = C2480000 41A00000 00000000)
%	This doesn't seem to do anything
%10 + pointer = lifetime (values above 255 break the timer)
%14 + pointer = fade in time (Low values make the effect more clear)
%1C, 1D, 1E, 1F + pointer = overlay color (Black = clear?) (but there's also alpha which is separate)
%	Alpha gets reduced down to 0 at the end of the effect



%(another one) (the bubbles)
%80071C30		(Effect 5F)
%	Subtype 3
%	Normally, it loads A1,A2,A3 from some data structure (actor position)
%	10 + SP is set to a float value	(= 3F800000 ?)
%	14 + SP is set to 0
%??? (hard to see what changes do because it lasts for a very short time)
%	^ also it places two effects at the same spot so that's why changes are hard to see

%0 = subtype?
%4,8,C = x,y,z pos
%1C = lifetime (counts down to 0)
%20 = some timer (counts up)

%Doesn't seem to actually work
%24,28,2C,30 = r,g,b,a ? (4 bytes each)	(Default = 00000046 000000B4 000000FF 000000FF)

%though there is actually another color (the blue edges of the bubble)



%smoke trail (like in air raid)
%80071E70
%18 + pointer = 2 colors (rgba and rgb)
%				   000000FF 000000FF
%000000FF 000000FF 000000E1 000000E1
%000000E1



%tattle window
%80072110
%can't find rgb colors
%the zoom in effect is independent of this
%pointer + 4,8,C = x,y,z pos (independent of effect state)
%pointer + 14 = effect state (0 to 0x18) (it comes down and opens up) (Negative values makes the y pos freak out)
%pointer + 18 = scale (base) (The value 4 after this just copies from here?)




%800720B0
%small in flowing waves of rays (used in goombario charge and mario charge)
%usually called multiple times to create a lot of rays

%pointer + 18, 1C, 20, 24, 28, 2C = 2 colors
%				   000000FF 000000FF
%000000FF 0000008F 000000FF 000000F5


%800718D0
%the buff arrow (+1 attack, +1 defense, etc)
%no rgb colors here
%Something to find out later: Are other numbers in memory (if so, can they be displayed by modifying the effect code?)
%	^ could potentially solve all the effect arrow problems



%80070BB0
%Radial waves
%	(There are a ton of different variations, I haven't gone through them all, but it's unlikely for the data structure to be different)
%	(Electrical waves above has colors at 68 + pointer so that might be shared data)

%Yellow inflowing waves
%sometimes called multiple times to make it look stronger
%Used in jump/hammer charges 1 and 2

%68 + pointer = colors
%default = 	FFFF00FF FFFF

%Vanish waves
%68 + pointer = colors
%default = EBEBEBFF FFFF

%Big blue outward waves (monstar makes these)
%default = 0700D8E4 FF0000FF
%! second color is yellower than its supposed to be (but acts weirdly)
%	second rgb colors are weird
%	The yellow waves below act similarly

%	if first RGB is red, effect is pure red
%	if first RGB is green, effect is pure green
%	if first RGB is blue, effect is blue and dark blue (It seems that the darker part of the waves are set to have lower blue value somehow)

%	Setting second values to 0 create yellow and cyan waves (???????)
%	second values are only half a byte each???

%Trying to figure out what is going on
%	Bytes 68,69,6A are loaded together
%	6B,6C,6D are also loaded together
%	6E and 6F seem unused

%FFFFF3F3 FFFF00FF = pure white


%radial yellow lines (radialflowin:electricalwaves)
%! does not set *VarF correctly (but V0 is set to the effect table pointer)

%fix that
%FCC4C + 8F4 = FD540
%802D829C + 8F4
@Function FD540
{
	COPY      S5, V0
}


%pointer + 68 has some color data (but the two colors are interrelated somehow)
%	looks like 2 rgb values but its not that simple
%default = (D7D000D7 FF0000FF)
%first color seems "dominant" (it influences the second color but isn't influenced by the second color in turn)

%second color gets a lot of green added to it

%last 2 bytes seem to affect how the first and second color are related

%try replacing with 
%FF77F7  FF77F7 00FF

%FF0000FF 80FFFFFF

%FF8000E0 D80000FF 	= orange





%small change: BoostAttack shows reddish waves while BoostDefense shows blueish waves

%19E5B4 --> 8026FCD4
%BoostAttack
%  33C:  JAL       $Function_8024E3D8		%(this function is present in boostattack, boostdefense, electrifyactor, vanishactor)
%  340:  LI        A0, 13					%it moves the camera to the target?
@Hook 19E8F0
{
	PUSH	  RA
	LW        V1, C (V0)
	ADDIU     A0, R0, FF                %R
	SB        A0, 68 (V1)
	LW        V1, C (V0)
	ADDIU     A0, R0, A0                %G
	SB        A0, 69 (V1)
	LW        V1, C (V0)
	ADDIU     A1, R0, A0                %B
	SB        A1, 6A (V1)
	LW        A0, C (V0)
	ADDIU     V1, R0, FF                %R 2
	SB        V1, 6B (A0)
	LW        A0, C (V0)
	ADDIU     V1, R0, FF                %G 2
	SB        V1, 6C (A0)
	LW        V1, C (V0)
	ADDIU     A1, R0, FF                %B 2
	SB        A1, 6D (V1)   
	JAL       8024E3D8					%$Function_8024E3D8		(hope this doesnt break)
	LI		  A0, 13
	POP		  RA
	J		80270018
	NOP
}

%19EA54 --> 80270174
%BoostDefense
%  33C:  JAL       $Function_8024E3D8
%  340:  LI        A0, 13
@Hook 19ED90
{
	PUSH	  RA
	LW        V1, C (V0)
	ADDIU     A0, R0, A0                %R
	SB        A0, 68 (V1)
	LW        V1, C (V0)
	ADDIU     A0, R0, A0                %G
	SB        A0, 69 (V1)
	LW        V1, C (V0)
	ADDIU     A1, R0, FF                %B
	SB        A1, 6A (V1)
	LW        A0, C (V0)
	ADDIU     V1, R0, FF                %R 2
	SB        V1, 6B (A0)
	LW        A0, C (V0)
	ADDIU     V1, R0, FF                %G 2
	SB        V1, 6C (A0)
	LW        V1, C (V0)
	ADDIU     A1, R0, FF                %B 2
	SB        A1, 6D (V1)   
	JAL       8024E3D8					%$Function_8024E3D8
	LI		  A0, 13
	POP		  RA
	J		  802704B8
	NOP
}



%Actor aura
%effect 003B0003 = gold flames
%80070EB0
%	load address at pointer in V0
%	use C + value at V0 for modification

%Note: the actor aura functions are pretty complicated


%add some stuff to change gold aura color to dark
#export:Function $SetAuraToDark
{
	ORI		V0, R0, 1
	SAB		V0, $ActorAuraType
	JR		RA
	ORI		V0, R0, 2	
}

#export:Data $ActorAuraType
{
	00000000
}

@Hook 18BAB4
{
	PUSH	V1, S0, S1
	%LAB	S0, 800740AB	%Area byte
	%LI		S1, 1E
	LAB		S0, $ActorAuraType
	BEQ		S0, R0, .end
	NOP
	.dark
	LW		V0, 0 (V0)		%???
	LW		V1, C (V0)
	SB		R0, 68 (V1)
	SB		R0, 69 (V1)
	SB		R0, 6A (V1)
	.end
	POP		V1, S0, S1
	LI      V0, 1			%hooked over
	J		8025D1DC
	SB      V0, 8BC (S2)	%hooked over
}
%   74:  LI        V0, 1
%   78:  SB        V0, 8BC (S2)

/%
% 0018BA40 --> 8025D160
#new:Function $Function_8025D160
{
    0:  ADDIU     SP, SP, FFD8
    4:  COPY      A3, A0
    8:  SW        RA, 24 (SP)
    C:  SW        S2, 20 (SP)
   10:  SW        S1, 1C (SP)
   14:  SW        S0, 18 (SP)
   18:  LW        S0, C0 (A3)
   1C:  COPY      S1, A1
   20:  ADDU      S2, S0, S1
   24:  LB        V1, 8BC (S2)
   28:  BEQ       V1, R0, .o40
   2C:  LI        V0, 1
   30:  BEQ       V1, V0, .o98
   34:  SLL       V0, S1, 2
   38:  BEQ       R0, R0, .o118
   3C:  NOP
        .o40
   40:  SLL       V0, S1, 2
   44:  ADDIU     V0, V0, 8B0
   48:  LIF       F0, 0.39804688
   54:  ADDU      V0, S0, V0
   58:  SW        V0, 14 (SP)
   5C:  SWC1      F0, 10 (SP)
   60:  LW        A1, 58 (A3)
   64:  LW        A2, 5C (A3)
   68:  LW        A3, 60 (A3)
   6C:  JAL       80070EB0
   70:  LI        A0, 3
   74:  LI        V0, 1
   78:  SB        V0, 8BC (S2)
   7C:  SLL       V0, S1, 4
   80:  ADDU      V0, S0, V0
   84:  LI        V1, 28
   88:  SH        V1, 8C6 (V0)
   8C:  SH        V1, 8C8 (V0)
   90:  BEQ       R0, R0, .o118
   94:  SH        R0, 8CA (V0)
        .o98
   98:  SLL       A0, S1, 4
   9C:  ADDU      A0, S0, A0
   A0:  ADDU      V0, S0, V0
   A4:  LH        V1, 8CA (A0)
   A8:  LWC1      F0, 58 (A3)
   AC:  MTC1      V1, F2
   B0:  NOP
   B4:  CVT.S.W   F2, F2
   B8:  LW        V1, 8B0 (V0)
   BC:  ADD.S     F0, F0, F2
   C0:  LW        V0, C (V1)
   C4:  SWC1      F0, 4 (V0)
   C8:  LWC1      F0, 5C (A3)
   CC:  SWC1      F0, 8 (V0)
   D0:  LWC1      F0, 60 (A3)
   D4:  SWC1      F0, C (V0)
   D8:  LH        V0, 8C6 (A0)
   DC:  LIF       F0, 100.0
   E4:  MTC1      V0, F2
   E8:  NOP
   EC:  CVT.S.W   F2, F2
   F0:  LW        V0, C (V1)
   F4:  DIV.S     F2, F2, F0
   F8:  SWC1      F2, 1C (V0)
   FC:  LH        V0, 8C8 (A0)
  100:  MTC1      V0, F2
  104:  NOP
  108:  CVT.S.W   F2, F2
  10C:  LW        V0, C (V1)
  110:  DIV.S     F2, F2, F0
  114:  SWC1      F2, 20 (V0)
        .o118
  118:  LW        RA, 24 (SP)
  11C:  LW        S2, 20 (SP)
  120:  LW        S1, 1C (SP)
  124:  LW        S0, 18 (SP)
  128:  JR        RA
  12C:  ADDIU     SP, SP, 28
}
%/

@Hook 18C528
{
	PUSH	V1, S0, S1
	%LAB	S0, 800740AB	%Area byte
	%LI		S1, 1E
	LAB		S0, $ActorAuraType
	BEQ		S0, R0, .end
	NOP
	.dark
	LW		V0, 0 (V0)		%???
	LW		V1, C (V0)
	SB		R0, 68 (V1)
	SB		R0, 69 (V1)
	SB		R0, 6A (V1)
	.end
	POP		V1, S0, S1
	LI      V0, 1			%hooked over
	J		8025DC50
	SB      V0, 8BC (S2)	%hooked over
}
%   78:  LI        V0, 1
%   7C:  SB        V0, 8BC (S2)

/%	Blue aura
% 0018C4B0 --> 8025DBD0
#new:Function $Function_8025DBD0
{
    0:  ADDIU     SP, SP, FFD0
    4:  SW        S1, 1C (SP)
    8:  COPY      S1, A0
    C:  SW        RA, 28 (SP)
   10:  SW        S3, 24 (SP)
   14:  SW        S2, 20 (SP)
   18:  SW        S0, 18 (SP)
   1C:  LW        S0, C0 (S1)
   20:  COPY      S3, A1
   24:  ADDU      S2, S0, S3
   28:  LB        V1, 8BC (S2)
   2C:  BEQ       V1, R0, .o44
   30:  LI        V0, 1
   34:  BEQ       V1, V0, .oA4
   38:  SLL       V0, S3, 2
   3C:  BEQ       R0, R0, .o154
   40:  NOP
        .o44
   44:  SLL       V0, S3, 2
   48:  ADDIU     V0, V0, 8B0
   4C:  LIF       F0, 1.1921875
   58:  ADDU      V0, S0, V0
   5C:  SW        V0, 14 (SP)
   60:  SWC1      F0, 10 (SP)
   64:  LW        A1, 58 (S1)
   68:  LW        A2, 5C (S1)
   6C:  LW        A3, 60 (S1)
   70:  JAL       80070EB0
   74:  LI        A0, 2
   78:  LI        V0, 1
   7C:  SB        V0, 8BC (S2)
   80:  SLL       V0, S3, 4
   84:  ADDU      V0, S0, V0
   88:  LI        V1, 96
   8C:  SH        V1, 8C6 (V0)
   90:  SH        V1, 8C8 (V0)
   94:  LI        V1, FF
   98:  SH        V1, 8CA (V0)
   9C:  SH        R0, 8CC (V0)
   A0:  SLL       V0, S3, 2
        .oA4
   A4:  ADDU      V0, S0, V0
   A8:  LW        A1, 8B0 (V0)
   AC:  LWC1      F0, 58 (S1)
   B0:  LW        V1, C (A1)
   B4:  SLL       A0, S3, 4
   B8:  SWC1      F0, 4 (V1)
   BC:  LWC1      F0, 5C (S1)
   C0:  ADDU      A0, S0, A0
   C4:  SWC1      F0, 8 (V1)
   C8:  LH        V0, 8CC (A0)
   CC:  LWC1      F0, 60 (S1)
   D0:  MTC1      V0, F2
   D4:  NOP
   D8:  CVT.S.W   F2, F2
   DC:  ADD.S     F0, F0, F2
   E0:  SWC1      F0, C (V1)
   E4:  LH        V0, 8C6 (A0)
   E8:  LIF       F0, 100.0
   F0:  MTC1      V0, F4
   F4:  NOP
   F8:  CVT.S.W   F4, F4
   FC:  LW        V0, C (A1)
  100:  DIV.S     F4, F4, F0
  104:  SWC1      F4, 1C (V0)
  108:  LH        V0, 8C8 (A0)
  10C:  LAD       F2, $ConstDouble_8029D4E8
  114:  MTC1      V0, F4
  118:  NOP
  11C:  CVT.S.W   F4, F4
  120:  DIV.S     F4, F4, F0
  124:  CVT.D.S   F0, F4
  128:  MUL.D     F0, F0, F2
  12C:  NOP
  130:  LW        V0, C (A1)
  134:  CVT.S.D   F0, F0
  138:  SWC1      F0, 20 (V0)
  13C:  LW        V1, C (A1)
  140:  LH        V0, 8CA (A0)
  144:  SW        V0, 28 (V1)
  148:  LW        V0, C (A1)
  14C:  LWC1      F0, 64 (S1)
  150:  SWC1      F0, 64 (V0)
        .o154
  154:  LW        RA, 28 (SP)
  158:  LW        S3, 24 (SP)
  15C:  LW        S2, 20 (SP)
  160:  LW        S1, 1C (SP)
  164:  LW        S0, 18 (SP)
  168:  JR        RA
  16C:  ADDIU     SP, SP, 30
}
%/



%(Gold aura)
%Has a lot of texture scrolling arguments
%30 + pointer = fadein time (low values mean no alpha)

%		Golden aura uses all of the scrolling stuff, not sure if the other auras do it
%34 + pointer = scrolling X 1?
%38 + pointer = scrolling Y 1?
%3C + pointer = scale? (scrolling X and Y are equal to this offset by an amount)

%40 + pointer = scrolling X 2?
%44 + pointer = scrolling Y 2?
%48 + pointer = scale? (scrolling X and Y are equal to this offset by an amount)

%4C + pointer = scrolling X 3?
%50 + pointer = scrolling Y 3?
%54 + pointer = scale? (scrolling X and Y are equal to this offset by an amount)

%58 + pointer = scrolling X 4?
%5C + pointer = scrolling Y 4?
%60 + pointer = scale? (scrolling X and Y are equal to this offset by an amount)

%64 + pointer = no visible effect in gold aura
%68 + pointer = colors???
%	68 = max red?
%	69 = max green?
%	6A = max blue?
%	6B = no effect?

%6C + pointer = alpha 1?
%6D + pointer = alpha 2?
%6E + pointer = alpha 3?	(Makes the effect "weaker" but values above 7F cause overflow and it looks weird)
%6F + pointer = alpha 4?


%Blue aura has the color in the same spot



%???
%Called in most of the star powers
%Sparkles in a star shape
%8006FEF0
%No pointer returned :(

%???
%Also in most of the star powers
%Sparkles in a rising formation
%80070550
%No pointer returned :(

%Lullaby notes
%800706D0
%No pointer returned :(

%???
%80070190
%somewhere in Time Out and other star powers
%	Damage from star moves create these stars?

%???
%Also in most of the star powers
%80072350

%Stopwatch effect
%80071D50
%	10 + pointer = fadeout countdown (values near 0 cause the clocks to stop waving and become pure white)
%	14 + pointer = fadein timer (values near 0 cause low alpha)
%	18 + pointer = ??? no visible effect
%	1C + pointer = ??? no visible effect
%	20 + pointer = ??? no visible effect
%	24 + pointer = total alpha

%	28 + pointer = scale (float)
%	2C + pointer = ??? set to FF at the very end, makes all the clocks white for values around that
%	30 + pointer = wiggle strength (becomes 0 at the end)
%	34 - 80 = X,Y positions of clocks?


%Star storm / shooting star
%8006FE30
%called once per star :P

%4,8.C + pointer = X,Y,Z
%10,14,18 + pointer = X,Y,Z velocities	(default? = 40AC5FD4 C08F0C9B 00000000)
%20,24,28 + pointer = ??? (some values written to and never read from?)

%??? a whole bunch of trail arguments (they change a lot)



%Light rays
%80070C70

%0 = subtype
%10, 14, 18 = x,y,z
%




%80070D90
%shimmer burst white
%has a return pointer not normally implemented into the effect function

%
%  9B0:  NOP
%COPY      S5, V0
%FCC4C / 802D829C
@Function FD5FC
{
	COPY      S5, V0
}


%40 + pointer
%000000FF 000000FF 000000FF 000000FF

%50,54,58,5C + pointer  = RGBA color of outer part
%000000D7 000000FF 000000EB 000000FF



%80071750
%	outward energy wave
%	Also used for goombario inward blue waves 	(colors = 00000032 00000032 000000FF)
%20,24,28 + pointer = RGB (reset constantly to default) (000000A2 000000BD 000000AE)

%Look at E00A45AC for effect colors for blue waves
%



%80072590
%Star beam
%		(Peach beam anim seems to be done through subtype shenanigans)
%		(No clue how the failure animation works)
%	All the star spirits are effects here :P
%	They seem to have separately tracked positions but they get reset to what they're supposed to be at all times

%18,1C,20,24 = RGBA 1 (top part) (making the alpha nonzero here will break the fadein thing)
%28,2C,30,34 = RGBA 2 (bottom part)
%40 = spin speed (how fast they go around in a circle) (default = 40A00000)

/%
				  000000FF 000000FF
00000078 00000000 000000FF 000000FF
000000FF 000000FF
%/



%80071FF0
%Clouds that Shrink moves produce
%(Normally, 20 are created, which can quickly fill all the space and cause crashing)

/%
	Full struct for reference	(* watch out for garbage data)
	80519F70 00000040 00012EFA 18408400
	
	00000000 C1880000 41E80002 C0A00000
	00000016 0000000A 000000FF 000000FF
	000000FF 000000FF 0000000A 0000000A
	00000078 3F800000 3F866666 000000FF	
%/
%-10 = pointer to next in the effect struct table
%-C = size of effect struct
%-8 = global effect ID? (Each effect gets a unique ID?)
%-0 = ???

%4,8,C = x,y,z pos
%10 = lifetime
%14 = counts up over time
%18,1C,20,24 = r,g,b,a




%8006FF50
%Magic spell (shape spell)

%4,8,C = x,y,z start
%10, 14, 18 = x,y,z offset from original pos
%1C, 20, 24 = x,y,z end


%Colors and gfx stuff
%6 display lists with no color data?
%$DisplayList_09001128

%things to do

%Truncate subtype when it is read

%the effect code is sneaky, the point where subtype is set has the value read from a register later
@Function 3392F8
{
	LI		AT, $3392F8Hook
	JR		AT
	NOP
}

#new:Function $3392F8Hook
{
	SW		S1, 0 (V1)
	SW		V0, 34 (V1)
	SWC1	F20, 4 (V1)
	SWC1 	F22, 8 (V1)
	ANDI	S1, S1, F			%overwriting code in effects is complicated
	LI		AT, E00240B8
	JR		AT
	NOP
}



%Main struct is S0 / S6 (Inconsistent! double check pointers to ensure it makes sense)

%	starts E0024188
%E00241E8 (S0 is struct)		+60 from start
%LW 	S1, 0 (S0)
%BNEZ	S1, E0024254	(+6C)
%ADDIU	V0, R0, 1

@Function 339438
{
	LI		AT, $339438Hook
	JR		AT
	NOP
}


#new:Function $339438Hook
{
	LW 		S1, 0 (S0)
	ANDI	S1, S1, F			%overwriting code in effects is complicated
	BNE		S1, R0, .takebranch
	ADDIU	V0, R0, 1
	BNE		V1, R0, .takebranch
	ADDIU	A0, R0, 1
	.nobranch
	LI		AT, E00241FC
	JR		AT
	NOP
	.takebranch
	LI		AT, E0024254
	JR		AT
	NOP
}


%E0024538 (S6 is struct)

%overwrite at E0024534 instead to avoid touching a branch
@Function 339784
{
	LI		AT, $339784Hook
	JR		AT
	NOP
}

#new:Function $339784Hook
{
	SWC1	F4, 88 (SP)
	LW		T0, 0  (S6)
	ANDI	T0, T0, F			%overwriting code in effects is complicated
	SW		T0, 70 (SP)
	LW		V1, 30 (S6)
	%
	LI		AT, E0024544
	JR		AT
	NOP
}


%E0024870 = part of reading table address
%Read from S6 for struct

%LI		S3, E0024CC0
%MFC1	A3, F28
%MFC1   A2, F0

@Function 339AC0
{
	LI		AT, $339AC0Hook
	JR		AT
	NOP	
}

%can't use A3, and A2 freely actually
%use A0 and AT?
#new:Function $339AC0Hook
{
	LW		A0, 0 (S6)
	ANDI	A0, A0, F0
	LI		AT, 10
	BEQ		A0, AT, .white
	LI		AT, 20
	BEQ		A0, AT, .red
	LI		AT, 30
	BEQ		A0, AT, .purple
	LI		AT, 40
	BEQ		A0, AT, .cyan
	LI		AT, 50
	BEQ		A0, AT, .green
	NOP
	LI		S3, E0024CC0	
	BEQ		R0, R0, .pastloading
	NOP
	.white
	LI		S3, $???_E0024CC0_White
	BEQ		R0, R0, .pastloading
	NOP
	.red
	LI		S3, $???_E0024CC0_Red
	BEQ		R0, R0, .pastloading
	NOP
	.purple
	LI		S3, $???_E0024CC0_Purple
	BEQ		R0, R0, .pastloading
	NOP
	.cyan
	LI		S3, $???_E0024CC0_Cyan
	BEQ		R0, R0, .pastloading
	NOP
	.green
	LI		S3, $???_E0024CC0_Green
	BEQ		R0, R0, .pastloading
	NOP
	.pastloading
	MFC1	A3, F28
	MFC1   	A2, F0
	%
	LI		AT, E0024880
	JR		AT
	NOP
}

%Colors available
%Normal
/%
#new:Unknown $???_E0024CC0 %Set of icons and colors (Colors are last 3 bytes of the 4 bytes)
{
	00FFD01A 09001128 090011A0 784DD0FE 09001150 090011C8 F0FE4C6E 09001178
	090011F0 00000000 00000000 00000000
}
%/

%White
#new:Unknown $???_E0024CC0_White 
{
	00FFFFFF 09001128 090011A0 78FFFFFF 09001150 090011C8 F0FFFFFF 09001178
	090011F0 00000000 00000000 00000000
}

%Red
#new:Unknown $???_E0024CC0_Red
{
	00FF0000 09001128 090011A0 784D0000 09001150 090011C8 F0FE0000 09001178
	090011F0 00000000 00000000 00000000
}

%Purple
#new:Unknown $???_E0024CC0_Purple 
{
	00FF1AD0 09001128 090011A0 78D04EFE 09001150 090011C8 F0FE4CFE 09001178
	090011F0 00000000 00000000 00000000
}

%Cyan
#new:Unknown $???_E0024CC0_Cyan
{
	00D0FFFF 09001128 090011A0 784DFEFE 09001150 090011C8 F06EFEFE 09001178
	090011F0 00000000 00000000 00000000
}

%Green
#new:Unknown $???_E0024CC0_Green
{
	001AD01A 09001128 090011A0 784DD04D 09001150 090011C8 F0F4CFE4C 09001178
	090011F0 00000000 00000000 00000000
}






%80070490
%blue / red fire
%	-> Certain map geometry can be replaced with these
%	World fire spawned at 801162C4
%	No return in V0 (or it might return something else)
%	V1 looks like the right pointer though! (Note that it is a direct pointer to the struct data, not an effect table entry)

%	0 = subtype (invalid subtypes crash due to invalid memory)
%		^	Suggests that it references memory to determine what to do with the fire
%	4,8,C = x,y,z (not constantly set)
%	10 = scale (3F000000 = default)
%	28, 2C, 30 = z,y,x scale (why the wrong order?)

%Only checked at E00403A0? (this one runs every frame and nothing else makes it look different if you change the value)

%...E00405C8
%

%The value is then checked against some stuff around E0040840 + 16 * subtype

%Messing with stuff around E0040840
%

%Red fire
%0-7 = color stuff (unclear formatting)
%RGBA 1, RGBA 2 (note that partial transparency means that 
%4th byte is not alpha
%May be some threshold for whether to use the first or second color?

%The colors interact in weird ways

%00FF004B 4E4C4F4B = green center with magenta exterior
%00FF004A 4E4B4F4A = green center with magenta exterior 
%00FF004A 4E4B4F4B = green center with magenta exterior 

%00FF004B 4E4B4F4B = magenta all the way through

%4th byte = ??? (determines if second color should be in the center?)
%	if this value is high enough, use second color in center

%7th byte = influences how much the second color gets through
%0 = fully second color
%FF = first color is not influenced by second at all
%	acts wonky though



%


%Colors are not perfectly accurate?
%	Pure white seems to work
%	Pure black does not (becomes black center gray outside)

%8-C = ??? default size?
%D = do not modify this or else you get a memory crash

%FFFFFF00 FF20004B 64000000 09000800

%Black fire with white outside
%FFFFFFFF FFFFFFFF 32000000 09000800

%Pure black fire
%000000FF FFFFFFFF 32000000 09000800

%Pure white fire
%FFFFFFFF FFFFFF00 32000000 09000800

%White fire with black outline
%FFFFFF5F 81828280 32000000 09000800


%E00405C0
@Function 3538C0	%4 instructions
{
	LI		AT, $3538C0Hook
	JR		AT
	NOP
}

#new:Function $3538C0Hook
{
	PUSH	S0, S1, S2
	LI		V0, E0040840		%want this pointer earlier
	LAB		S0, 800740AB
	LI		S1, 1E
	BNE		S0, S1, .end
	NOP
	%just do it manually because these are pretty small things to overwrite
	LI		S2, FFFFFFFF
	SW		S2, 0 (V0)
	SW		S2, 4 (V0)
	.end
	POP		S0, S1, S2
	%Hooked over stuff
	%LI		V0, E0040840		%moved to top
	SLL		A2, T4, 4
	LW		A1, 0 (S4)
	LI		AT, E00405D0	%+ 10 (4 instructions)
	JR		AT
	NOP
}




%80071450
%	Shock volume (all electrical attacks make this on hit)
%	4,8,C = x,y,z
%	30,34,38 = r,g,b 1
%	3C,40,44 = r,g,b 2



%Emitter volume snowflakes
%	38, 3C, 40, 44, 48, 4C = r,g,b,a and r,g,b (000000FF 000000FF 000000FF 000000FF 00000000 0000007F 000000FF)
%	Note that the snowflakes have a white border normally




%80072A70
%stars in the star shield effects (these are moved around with functions)
%18 + pointer
%				   000000FF 000000FF
%00000078 000000FF 000000FF 00000078
%00000000
%rgba, rgb




%800726B0
%Star spirit cards
%	how exactly are the different card types made? (Not a subtype thing)

%card type = 34 + pointer


%	The game uses complicated functions to make the cards work / move around (other effects are used for the first part of the card animation)



%80071330
%Gather magic (pink)
%30 + pointer
%RGB of border, rgb of outer
%000000FF 00000000 000000FF 000000FF
%000000FF 000000FF




